/* MACHINE GENERATED By Halide. */

#if !(__cplusplus >= 201103L || _MSVC_LANG >= 201103L)
#error "This code requires C++11 (or later); please upgrade your compiler."
#endif

#include <assert.h>
#include <fenv.h>
#include <float.h>
#include <limits.h>
#include <math.h>
#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <type_traits>

extern "C" {
int64_t halide_current_time_ns(void *ctx);
void halide_profiler_pipeline_end(void *, void *);
struct halide_buffer_t;
char *halide_buffer_to_string(char *, char *, const halide_buffer_t *);
}

#ifdef _WIN32
#ifndef _MT
__declspec(dllimport) float __cdecl roundf(float);
__declspec(dllimport) double __cdecl round(double);
#endif
#else
inline float asinh_f32(float x) {
    return asinhf(x);
}
inline float acosh_f32(float x) {
    return acoshf(x);
}
inline float atanh_f32(float x) {
    return atanhf(x);
}
inline double asinh_f64(double x) {
    return asinh(x);
}
inline double acosh_f64(double x) {
    return acosh(x);
}
inline double atanh_f64(double x) {
    return atanh(x);
}
#endif
inline float sqrt_f32(float x) {
    return sqrtf(x);
}
inline float sin_f32(float x) {
    return sinf(x);
}
inline float asin_f32(float x) {
    return asinf(x);
}
inline float cos_f32(float x) {
    return cosf(x);
}
inline float acos_f32(float x) {
    return acosf(x);
}
inline float tan_f32(float x) {
    return tanf(x);
}
inline float atan_f32(float x) {
    return atanf(x);
}
inline float atan2_f32(float x, float y) {
    return atan2f(x, y);
}
inline float sinh_f32(float x) {
    return sinhf(x);
}
inline float cosh_f32(float x) {
    return coshf(x);
}
inline float tanh_f32(float x) {
    return tanhf(x);
}
inline float hypot_f32(float x, float y) {
    return hypotf(x, y);
}
inline float exp_f32(float x) {
    return expf(x);
}
inline float log_f32(float x) {
    return logf(x);
}
inline float pow_f32(float x, float y) {
    return powf(x, y);
}
inline float floor_f32(float x) {
    return floorf(x);
}
inline float ceil_f32(float x) {
    return ceilf(x);
}

inline double sqrt_f64(double x) {
    return sqrt(x);
}
inline double sin_f64(double x) {
    return sin(x);
}
inline double asin_f64(double x) {
    return asin(x);
}
inline double cos_f64(double x) {
    return cos(x);
}
inline double acos_f64(double x) {
    return acos(x);
}
inline double tan_f64(double x) {
    return tan(x);
}
inline double atan_f64(double x) {
    return atan(x);
}
inline double atan2_f64(double x, double y) {
    return atan2(x, y);
}
inline double sinh_f64(double x) {
    return sinh(x);
}
inline double cosh_f64(double x) {
    return cosh(x);
}
inline double tanh_f64(double x) {
    return tanh(x);
}
inline double hypot_f64(double x, double y) {
    return hypot(x, y);
}
inline double exp_f64(double x) {
    return exp(x);
}
inline double log_f64(double x) {
    return log(x);
}
inline double pow_f64(double x, double y) {
    return pow(x, y);
}
inline double floor_f64(double x) {
    return floor(x);
}
inline double ceil_f64(double x) {
    return ceil(x);
}

inline float nan_f32() {
    return NAN;
}
inline float neg_inf_f32() {
    return -INFINITY;
}
inline float inf_f32() {
    return INFINITY;
}
inline bool is_nan_f32(float x) {
    return isnan(x);
}
inline bool is_nan_f64(double x) {
    return isnan(x);
}
inline bool is_inf_f32(float x) {
    return isinf(x);
}
inline bool is_inf_f64(double x) {
    return isinf(x);
}
inline bool is_finite_f32(float x) {
    return isfinite(x);
}
inline bool is_finite_f64(double x) {
    return isfinite(x);
}

template<typename A, typename B>
inline A reinterpret(const B &b) {
    static_assert(sizeof(A) == sizeof(B), "type size mismatch");
    A a;
    memcpy(&a, &b, sizeof(a));
    return a;
}

inline float float_from_bits(uint32_t bits) {
    return reinterpret<float, uint32_t>(bits);
}

template<typename T>
inline int halide_popcount_fallback(T a) {
    int bits_set = 0;
    while (a != 0) {
        bits_set += 1;
        // See: https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan
        a &= a - 1;
    }
    return bits_set;
}

template<typename T>
inline int halide_popcount(T a) {
    return halide_popcount_fallback<T>(a);
}

template<>
inline int halide_popcount<uint64_t>(uint64_t a) {
#ifdef _MSC_VER
#if defined(_WIN64)
    return __popcnt64(a);
#else
    return __popcnt((uint32_t)(a >> 32)) + __popcnt((uint32_t)(a & 0xffffffff));
#endif
#else
#if defined(__builtin_popcountll)
    static_assert(sizeof(unsigned long long) >= sizeof(uint64_t), "");
    return return __builtin_popcountll(a);
#else
    return halide_popcount_fallback<uint64_t>(a);
#endif
#endif
}

template<typename T>
inline int halide_count_leading_zeros(T a) {
    int leading_zeros = 0;
    int bit = sizeof(a) * 8 - 1;
    while (bit >= 0 && (a & (((T)1) << bit)) == 0) {
        leading_zeros++;
        bit--;
    }
    return leading_zeros;
}

template<typename T>
inline int halide_count_trailing_zeros(T a) {
    int trailing_zeros = 0;
    constexpr int bits = sizeof(a) * 8;
    int bit = 0;
    while (bit < bits && (a & (((T)1) << bit)) == 0) {
        trailing_zeros++;
        bit++;
    }
    return trailing_zeros;
}

template<typename T>
inline T halide_cpp_max(const T &a, const T &b) {
    return (a > b) ? a : b;
}

template<typename T>
inline T halide_cpp_min(const T &a, const T &b) {
    return (a < b) ? a : b;
}

template<typename T>
inline void halide_maybe_unused(const T &) {
}

template<typename A, typename B>
const B &return_second(const A &a, const B &b) {
    halide_maybe_unused(a);
    return b;
}

namespace {
template<void (*FreeFn)(void *, void *)>
class HalideFreeHelper {
    void *const user_context;
    void *ptr;

public:
    HalideFreeHelper(void *user_context, void *ptr)
        : user_context(user_context), ptr(ptr) {
    }
    ~HalideFreeHelper() {
        free();
    }
    void free() {
        if (ptr) {
            FreeFn(user_context, ptr);
            ptr = nullptr;
        }
    }
};

}  // namespace

#ifndef HALIDE_HALIDERUNTIME_H
#define HALIDE_HALIDERUNTIME_H

#ifndef COMPILING_HALIDE_RUNTIME
#ifdef __cplusplus
#include <array>
#include <cstddef>
#include <cstdint>
#include <cstring>
#include <string_view>
#else
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <string.h>
#endif
#else
#include "runtime_internal.h"
#endif

#ifdef __cplusplus
// Forward declare type to allow naming typed handles.
// See Type.h for documentation.
template<typename T>
struct halide_handle_traits;
#endif

#ifdef __cplusplus
extern "C" {
#endif

#ifdef _MSC_VER
// Note that (for MSVC) you should not use "inline" along with HALIDE_ALWAYS_INLINE;
// it is not necessary, and may produce warnings for some build configurations.
#define HALIDE_ALWAYS_INLINE __forceinline
#define HALIDE_NEVER_INLINE __declspec(noinline)
#else
// Note that (for Posixy compilers) you should always use "inline" along with HALIDE_ALWAYS_INLINE;
// otherwise some corner-case scenarios may erroneously report link errors.
#define HALIDE_ALWAYS_INLINE inline __attribute__((always_inline))
#define HALIDE_NEVER_INLINE __attribute__((noinline))
#endif

#ifndef HALIDE_MUST_USE_RESULT
#ifdef __has_attribute
#if __has_attribute(nodiscard)
// C++17 or later
#define HALIDE_MUST_USE_RESULT [[nodiscard]]
#elif __has_attribute(warn_unused_result)
// Clang/GCC
#define HALIDE_MUST_USE_RESULT __attribute__((warn_unused_result))
#else
#define HALIDE_MUST_USE_RESULT
#endif
#else
#define HALIDE_MUST_USE_RESULT
#endif
#endif

// Annotation for AOT and JIT calls -- if undefined, use no annotation.
// To ensure that all results are checked, do something like
//
//    -DHALIDE_FUNCTION_ATTRS=HALIDE_MUST_USE_RESULT
//
// in your C++ compiler options
#ifndef HALIDE_FUNCTION_ATTRS
#define HALIDE_FUNCTION_ATTRS
#endif

#ifndef HALIDE_EXPORT_SYMBOL
#ifdef _MSC_VER
#define HALIDE_EXPORT_SYMBOL __declspec(dllexport)
#else
#define HALIDE_EXPORT_SYMBOL __attribute__((visibility("default")))
#endif
#endif

#ifndef COMPILING_HALIDE_RUNTIME

// clang had _Float16 added as a reserved name in clang 8, but
// doesn't actually support it on most platforms until clang 15.
// Ideally there would be a better way to detect if the type
// is supported, even in a compiler independent fashion, but
// coming up with one has proven elusive.
#if defined(__clang__) && (__clang_major__ >= 16) && !defined(__EMSCRIPTEN__)
#if defined(__is_identifier)
#if !__is_identifier(_Float16)
#define HALIDE_CPP_COMPILER_HAS_FLOAT16
#endif
#endif
#endif

// Similarly, detecting _Float16 for gcc is problematic.
// For now, we say that if >= v12, and compiling on x86 or arm,
// we assume support. This may need revision.
#if defined(__GNUC__) && (__GNUC__ >= 12)
#if defined(__x86_64__) || defined(__i386__) || defined(__arm__) || defined(__aarch64__)
#define HALIDE_CPP_COMPILER_HAS_FLOAT16
#endif
#endif

#endif  // !COMPILING_HALIDE_RUNTIME

/** \file
 *
 * This file declares the routines used by Halide internally in its
 * runtime. On platforms that support weak linking, these can be
 * replaced with user-defined versions by defining an extern "C"
 * function with the same name and signature.
 *
 * When doing Just In Time (JIT) compilation members of
 * some_pipeline_or_func.jit_handlers() must be replaced instead. The
 * corresponding methods are documented below.
 *
 * All of these functions take a "void *user_context" parameter as their
 * first argument; if the Halide kernel that calls back to any of these
 * functions has been compiled with the UserContext feature set on its Target,
 * then the value of that pointer passed from the code that calls the
 * Halide kernel is piped through to the function.
 *
 * Some of these are also useful to call when using the default
 * implementation. E.g. halide_shutdown_thread_pool.
 *
 * Note that even on platforms with weak linking, some linker setups
 * may not respect the override you provide. E.g. if the override is
 * in a shared library and the halide object files are linked directly
 * into the output, the builtin versions of the runtime functions will
 * be called. See your linker documentation for more details. On
 * Linux, LD_DYNAMIC_WEAK=1 may help.
 *
 */

// Forward-declare to suppress warnings if compiling as C.
struct halide_buffer_t;

/** Print a message to stderr. Main use is to support tracing
 * functionality, print, and print_when calls. Also called by the default
 * halide_error.  This function can be replaced in JITed code by using
 * halide_custom_print and providing an implementation of halide_print
 * in AOT code. See Func::set_custom_print.
 */
// @{
extern void halide_print(void *user_context, const char *);
extern void halide_default_print(void *user_context, const char *);
typedef void (*halide_print_t)(void *, const char *);
extern halide_print_t halide_set_custom_print(halide_print_t print);
// @}

/** Halide calls this function on runtime errors (for example bounds
 * checking failures). This function can be replaced in JITed code by
 * using Func::set_error_handler, or in AOT code by calling
 * halide_set_error_handler. In AOT code on platforms that support
 * weak linking (i.e. not Windows), you can also override it by simply
 * defining your own halide_error.
 */
// @{
extern void halide_error(void *user_context, const char *);
extern void halide_default_error(void *user_context, const char *);
typedef void (*halide_error_handler_t)(void *, const char *);
extern halide_error_handler_t halide_set_error_handler(halide_error_handler_t handler);
// @}

/** Cross-platform mutex. Must be initialized with zero and implementation
 * must treat zero as an unlocked mutex with no waiters, etc.
 */
struct halide_mutex {
    uintptr_t _private[1];
};

/** Cross platform condition variable. Must be initialized to 0. */
struct halide_cond {
    uintptr_t _private[1];
};

/** A basic set of mutex and condition variable functions, which call
 * platform specific code for mutual exclusion. Equivalent to posix
 * calls. */
//@{
extern void halide_mutex_lock(struct halide_mutex *mutex);
extern void halide_mutex_unlock(struct halide_mutex *mutex);
extern void halide_cond_signal(struct halide_cond *cond);
extern void halide_cond_broadcast(struct halide_cond *cond);
extern void halide_cond_wait(struct halide_cond *cond, struct halide_mutex *mutex);
//@}

/** Functions for constructing/destroying/locking/unlocking arrays of mutexes. */
struct halide_mutex_array;
//@{
extern struct halide_mutex_array *halide_mutex_array_create(int sz);
extern void halide_mutex_array_destroy(void *user_context, void *array);
extern int halide_mutex_array_lock(struct halide_mutex_array *array, int entry);
extern int halide_mutex_array_unlock(struct halide_mutex_array *array, int entry);
//@}

/** Define halide_do_par_for to replace the default thread pool
 * implementation. halide_shutdown_thread_pool can also be called to
 * release resources used by the default thread pool on platforms
 * where it makes sense. See Func::set_custom_do_task and
 * Func::set_custom_do_par_for. Should return zero if all the jobs
 * return zero, or an arbitrarily chosen return value from one of the
 * jobs otherwise.
 */
//@{
typedef int (*halide_task_t)(void *user_context, int task_number, uint8_t *closure);
extern int halide_do_par_for(void *user_context,
                             halide_task_t task,
                             int min, int size, uint8_t *closure);
extern void halide_shutdown_thread_pool();
//@}

/** Set a custom method for performing a parallel for loop. Returns
 * the old do_par_for handler. */
typedef int (*halide_do_par_for_t)(void *, halide_task_t, int, int, uint8_t *);
extern halide_do_par_for_t halide_set_custom_do_par_for(halide_do_par_for_t do_par_for);

/** An opaque struct representing a semaphore. Used by the task system for async tasks. */
struct halide_semaphore_t {
    uint64_t _private[2];
};

/** A struct representing a semaphore and a number of items that must
 * be acquired from it. Used in halide_parallel_task_t below. */
struct halide_semaphore_acquire_t {
    struct halide_semaphore_t *semaphore;
    int count;
};
extern int halide_semaphore_init(struct halide_semaphore_t *, int n);
extern int halide_semaphore_release(struct halide_semaphore_t *, int n);
extern bool halide_semaphore_try_acquire(struct halide_semaphore_t *, int n);
typedef int (*halide_semaphore_init_t)(struct halide_semaphore_t *, int);
typedef int (*halide_semaphore_release_t)(struct halide_semaphore_t *, int);
typedef bool (*halide_semaphore_try_acquire_t)(struct halide_semaphore_t *, int);

/** A task representing a serial for loop evaluated over some range.
 * Note that task_parent is a pass through argument that should be
 * passed to any dependent taks that are invoked using halide_do_parallel_tasks
 * underneath this call. */
typedef int (*halide_loop_task_t)(void *user_context, int min, int extent,
                                  uint8_t *closure, void *task_parent);

/** A parallel task to be passed to halide_do_parallel_tasks. This
 * task may recursively call halide_do_parallel_tasks, and there may
 * be complex dependencies between seemingly unrelated tasks expressed
 * using semaphores. If you are using a custom task system, care must
 * be taken to avoid potential deadlock. This can be done by carefully
 * respecting the static metadata at the end of the task struct.*/
struct halide_parallel_task_t {
    // The function to call. It takes a user context, a min and
    // extent, a closure, and a task system pass through argument.
    halide_loop_task_t fn;

    // The closure to pass it
    uint8_t *closure;

    // The name of the function to be called. For debugging purposes only.
    const char *name;

    // An array of semaphores that must be acquired before the
    // function is called. Must be reacquired for every call made.
    struct halide_semaphore_acquire_t *semaphores;
    int num_semaphores;

    // The entire range the function should be called over. This range
    // may be sliced up and the function called multiple times.
    int min, extent;

    // A parallel task provides several pieces of metadata to prevent
    // unbounded resource usage or deadlock.

    // The first is the minimum number of execution contexts (call
    // stacks or threads) necessary for the function to run to
    // completion. This may be greater than one when there is nested
    // parallelism with internal producer-consumer relationships
    // (calling the function recursively spawns and blocks on parallel
    // sub-tasks that communicate with each other via semaphores). If
    // a parallel runtime calls the function when fewer than this many
    // threads are idle, it may need to create more threads to
    // complete the task, or else risk deadlock due to committing all
    // threads to tasks that cannot complete without more.
    //
    // FIXME: Note that extern stages are assumed to only require a
    // single thread to complete. If the extern stage is itself a
    // Halide pipeline, this may be an underestimate.
    int min_threads;

    // The calls to the function should be in serial order from min to min+extent-1, with only
    // one executing at a time. If false, any order is fine, and
    // concurrency is fine.
    bool serial;
};

/** Enqueue some number of the tasks described above and wait for them
 * to complete. While waiting, the calling threads assists with either
 * the tasks enqueued, or other non-blocking tasks in the task
 * system. Note that task_parent should be NULL for top-level calls
 * and the pass through argument if this call is being made from
 * another task. */
extern int halide_do_parallel_tasks(void *user_context, int num_tasks,
                                    struct halide_parallel_task_t *tasks,
                                    void *task_parent);

/** If you use the default do_par_for, you can still set a custom
 * handler to perform each individual task. Returns the old handler. */
//@{
typedef int (*halide_do_task_t)(void *, halide_task_t, int, uint8_t *);
extern halide_do_task_t halide_set_custom_do_task(halide_do_task_t do_task);
extern int halide_do_task(void *user_context, halide_task_t f, int idx,
                          uint8_t *closure);
//@}

/** The version of do_task called for loop tasks. By default calls the
 * loop task with the same arguments. */
// @{
typedef int (*halide_do_loop_task_t)(void *, halide_loop_task_t, int, int, uint8_t *, void *);
extern halide_do_loop_task_t halide_set_custom_do_loop_task(halide_do_loop_task_t do_task);
extern int halide_do_loop_task(void *user_context, halide_loop_task_t f, int min, int extent,
                               uint8_t *closure, void *task_parent);
//@}

/** Provide an entire custom tasking runtime via function
 * pointers. Note that do_task and semaphore_try_acquire are only ever
 * called by halide_default_do_par_for and
 * halide_default_do_parallel_tasks, so it's only necessary to provide
 * those if you are mixing in the default implementations of
 * do_par_for and do_parallel_tasks. */
// @{
typedef int (*halide_do_parallel_tasks_t)(void *, int, struct halide_parallel_task_t *,
                                          void *task_parent);
extern void halide_set_custom_parallel_runtime(
    halide_do_par_for_t,
    halide_do_task_t,
    halide_do_loop_task_t,
    halide_do_parallel_tasks_t,
    halide_semaphore_init_t,
    halide_semaphore_try_acquire_t,
    halide_semaphore_release_t);
// @}

/** The default versions of the parallel runtime functions. */
// @{
extern int halide_default_do_par_for(void *user_context,
                                     halide_task_t task,
                                     int min, int size, uint8_t *closure);
extern int halide_default_do_parallel_tasks(void *user_context,
                                            int num_tasks,
                                            struct halide_parallel_task_t *tasks,
                                            void *task_parent);
extern int halide_default_do_task(void *user_context, halide_task_t f, int idx,
                                  uint8_t *closure);
extern int halide_default_do_loop_task(void *user_context, halide_loop_task_t f,
                                       int min, int extent,
                                       uint8_t *closure, void *task_parent);
extern int halide_default_semaphore_init(struct halide_semaphore_t *, int n);
extern int halide_default_semaphore_release(struct halide_semaphore_t *, int n);
extern bool halide_default_semaphore_try_acquire(struct halide_semaphore_t *, int n);
// @}

struct halide_thread;

/** Spawn a thread. Returns a handle to the thread for the purposes of
 * joining it. The thread must be joined in order to clean up any
 * resources associated with it. */
extern struct halide_thread *halide_spawn_thread(void (*f)(void *), void *closure);

/** Join a thread. */
extern void halide_join_thread(struct halide_thread *);

/** Set the number of threads used by Halide's thread pool. Returns
 * the old number.
 *
 * n < 0  : error condition
 * n == 0 : use a reasonable system default (typically, number of cpus online).
 * n == 1 : use exactly one thread; this will always enforce serial execution
 * n > 1  : use a pool of exactly n threads.
 *
 * (Note that this is only guaranteed when using the default implementations
 * of halide_do_par_for(); custom implementations may completely ignore values
 * passed to halide_set_num_threads().)
 */
extern int halide_set_num_threads(int n);

/** Halide calls these functions to allocate and free memory. To
 * replace in AOT code, use the halide_set_custom_malloc and
 * halide_set_custom_free, or (on platforms that support weak
 * linking), simply define these functions yourself. In JIT-compiled
 * code use Func::set_custom_allocator.
 *
 * If you override them, and find yourself wanting to call the default
 * implementation from within your override, use
 * halide_default_malloc/free.
 *
 * Note that halide_malloc must return a pointer aligned to the
 * maximum meaningful alignment for the platform for the purpose of
 * vector loads and stores, *and* with an allocated size that is (at least)
 * an integral multiple of that same alignment. The default implementation
 * uses 32-byte alignment on arm and 64-byte alignment on x86. Additionally,
 * it must be safe to read at least 8 bytes before the start and beyond the end.
 */
//@{
extern void *halide_malloc(void *user_context, size_t x);
extern void halide_free(void *user_context, void *ptr);
extern void *halide_default_malloc(void *user_context, size_t x);
extern void halide_default_free(void *user_context, void *ptr);
typedef void *(*halide_malloc_t)(void *, size_t);
typedef void (*halide_free_t)(void *, void *);
extern halide_malloc_t halide_set_custom_malloc(halide_malloc_t user_malloc);
extern halide_free_t halide_set_custom_free(halide_free_t user_free);
//@}

/** Halide calls these functions to interact with the underlying
 * system runtime functions. To replace in AOT code on platforms that
 * support weak linking, define these functions yourself, or use
 * the halide_set_custom_load_library() and halide_set_custom_get_library_symbol()
 * functions. In JIT-compiled code, use JITSharedRuntime::set_default_handlers().
 *
 * halide_load_library and halide_get_library_symbol are equivalent to
 * dlopen and dlsym. halide_get_symbol(sym) is equivalent to
 * dlsym(RTLD_DEFAULT, sym).
 */
//@{
extern void *halide_get_symbol(const char *name);
extern void *halide_load_library(const char *name);
extern void *halide_get_library_symbol(void *lib, const char *name);
extern void *halide_default_get_symbol(const char *name);
extern void *halide_default_load_library(const char *name);
extern void *halide_default_get_library_symbol(void *lib, const char *name);
typedef void *(*halide_get_symbol_t)(const char *name);
typedef void *(*halide_load_library_t)(const char *name);
typedef void *(*halide_get_library_symbol_t)(void *lib, const char *name);
extern halide_get_symbol_t halide_set_custom_get_symbol(halide_get_symbol_t user_get_symbol);
extern halide_load_library_t halide_set_custom_load_library(halide_load_library_t user_load_library);
extern halide_get_library_symbol_t halide_set_custom_get_library_symbol(halide_get_library_symbol_t user_get_library_symbol);
//@}

/** Called when debug_to_file is used inside %Halide code.  See
 * Func::debug_to_file for how this is called
 *
 * Cannot be replaced in JITted code at present.
 */
extern int32_t halide_debug_to_file(void *user_context, const char *filename,
                                    int32_t type_code,
                                    struct halide_buffer_t *buf);

/** Types in the halide type system. They can be ints, unsigned ints,
 * or floats (of various bit-widths), or a handle (which is always 64-bits).
 * Note that the int/uint/float values do not imply a specific bit width
 * (the bit width is expected to be encoded in a separate value).
 */
typedef enum halide_type_code_t
#if (__cplusplus >= 201103L || _MSVC_LANG >= 201103L)
    : uint8_t
#endif
{
    halide_type_int = 0,     ///< signed integers
    halide_type_uint = 1,    ///< unsigned integers
    halide_type_float = 2,   ///< IEEE floating point numbers
    halide_type_handle = 3,  ///< opaque pointer type (void *)
    halide_type_bfloat = 4,  ///< floating point numbers in the bfloat format
} halide_type_code_t;

// Note that while __attribute__ can go before or after the declaration,
// __declspec apparently is only allowed before.
#ifndef HALIDE_ATTRIBUTE_ALIGN
#ifdef _MSC_VER
#define HALIDE_ATTRIBUTE_ALIGN(x) __declspec(align(x))
#else
#define HALIDE_ATTRIBUTE_ALIGN(x) __attribute__((aligned(x)))
#endif
#endif

/** A runtime tag for a type in the halide type system. Can be ints,
 * unsigned ints, or floats of various bit-widths (the 'bits'
 * field). Can also be vectors of the same (by setting the 'lanes'
 * field to something larger than one). This struct should be
 * exactly 32-bits in size. */
struct halide_type_t {
    /** The basic type code: signed integer, unsigned integer, or floating point. */
#if (__cplusplus >= 201103L || _MSVC_LANG >= 201103L)
    HALIDE_ATTRIBUTE_ALIGN(1)
    halide_type_code_t code;  // halide_type_code_t
#else
    HALIDE_ATTRIBUTE_ALIGN(1)
    uint8_t code;  // halide_type_code_t
#endif

    /** The number of bits of precision of a single scalar value of this type. */
    HALIDE_ATTRIBUTE_ALIGN(1)
    uint8_t bits;

    /** How many elements in a vector. This is 1 for scalar types. */
    HALIDE_ATTRIBUTE_ALIGN(2)
    uint16_t lanes;

#if (__cplusplus >= 201103L || _MSVC_LANG >= 201103L)
    /** Construct a runtime representation of a Halide type from:
     * code: The fundamental type from an enum.
     * bits: The bit size of one element.
     * lanes: The number of vector elements in the type. */
    HALIDE_ALWAYS_INLINE constexpr halide_type_t(halide_type_code_t code, uint8_t bits, uint16_t lanes = 1)
        : code(code), bits(bits), lanes(lanes) {
    }

    /** Default constructor is required e.g. to declare halide_trace_event
     * instances. */
    HALIDE_ALWAYS_INLINE constexpr halide_type_t()
        : code((halide_type_code_t)0), bits(0), lanes(0) {
    }

    HALIDE_ALWAYS_INLINE constexpr halide_type_t with_lanes(uint16_t new_lanes) const {
        return halide_type_t((halide_type_code_t)code, bits, new_lanes);
    }

    HALIDE_ALWAYS_INLINE constexpr halide_type_t element_of() const {
        return with_lanes(1);
    }
    /** Compare two types for equality. */
    HALIDE_ALWAYS_INLINE constexpr bool operator==(const halide_type_t &other) const {
        return as_u32() == other.as_u32();
    }

    HALIDE_ALWAYS_INLINE constexpr bool operator!=(const halide_type_t &other) const {
        return !(*this == other);
    }

    HALIDE_ALWAYS_INLINE constexpr bool operator<(const halide_type_t &other) const {
        return as_u32() < other.as_u32();
    }

    /** Size in bytes for a single element, even if width is not 1, of this type. */
    HALIDE_ALWAYS_INLINE constexpr int bytes() const {
        return (bits + 7) / 8;
    }

    HALIDE_ALWAYS_INLINE constexpr uint32_t as_u32() const {
        // Note that this produces a result that is identical to memcpy'ing 'this'
        // into a u32 (on a little-endian machine, anyway), and at -O1 or greater
        // on Clang, the compiler knows this and optimizes this into a single 32-bit move.
        // (At -O0 it will look awful.)
        return static_cast<uint8_t>(code) |
               (static_cast<uint16_t>(bits) << 8) |
               (static_cast<uint32_t>(lanes) << 16);
    }
#endif
};

#if (__cplusplus >= 201103L || _MSVC_LANG >= 201103L)
static_assert(sizeof(halide_type_t) == sizeof(uint32_t), "size mismatch in halide_type_t");
#endif

enum halide_trace_event_code_t { halide_trace_load = 0,
                                 halide_trace_store = 1,
                                 halide_trace_begin_realization = 2,
                                 halide_trace_end_realization = 3,
                                 halide_trace_produce = 4,
                                 halide_trace_end_produce = 5,
                                 halide_trace_consume = 6,
                                 halide_trace_end_consume = 7,
                                 halide_trace_begin_pipeline = 8,
                                 halide_trace_end_pipeline = 9,
                                 halide_trace_tag = 10 };

struct halide_trace_event_t {
    /** The name of the Func or Pipeline that this event refers to */
    const char *func;

    /** If the event type is a load or a store, this points to the
     * value being loaded or stored. Use the type field to safely cast
     * this to a concrete pointer type and retrieve it. For other
     * events this is null. */
    void *value;

    /** For loads and stores, an array which contains the location
     * being accessed. For vector loads or stores it is an array of
     * vectors of coordinates (the vector dimension is innermost).
     *
     * For realization or production-related events, this will contain
     * the mins and extents of the region being accessed, in the order
     * min0, extent0, min1, extent1, ...
     *
     * For pipeline-related events, this will be null.
     */
    int32_t *coordinates;

    /** For halide_trace_tag, this points to a read-only null-terminated string
     * of arbitrary text. For all other events, this will be null.
     */
    const char *trace_tag;

    /** If the event type is a load or a store, this is the type of
     * the data. Otherwise, the value is meaningless. */
    struct halide_type_t type;

    /** The type of event */
    enum halide_trace_event_code_t event;

    /* The ID of the parent event (see below for an explanation of
     * event ancestry). */
    int32_t parent_id;

    /** If this was a load or store of a Tuple-valued Func, this is
     * which tuple element was accessed. */
    int32_t value_index;

    /** The length of the coordinates array */
    int32_t dimensions;
};

/** Called when Funcs are marked as trace_load, trace_store, or
 * trace_realization. See Func::set_custom_trace. The default
 * implementation either prints events via halide_print, or if
 * HL_TRACE_FILE is defined, dumps the trace to that file in a
 * sequence of trace packets. The header for a trace packet is defined
 * below. If the trace is going to be large, you may want to make the
 * file a named pipe, and then read from that pipe into gzip.
 *
 * halide_trace returns a unique ID which will be passed to future
 * events that "belong" to the earlier event as the parent id. The
 * ownership hierarchy looks like:
 *
 * begin_pipeline
 * +--trace_tag (if any)
 * +--trace_tag (if any)
 * ...
 * +--begin_realization
 * |  +--produce
 * |  |  +--load/store
 * |  |  +--end_produce
 * |  +--consume
 * |  |  +--load
 * |  |  +--end_consume
 * |  +--end_realization
 * +--end_pipeline
 *
 * Threading means that ownership cannot be inferred from the ordering
 * of events. There can be many active realizations of a given
 * function, or many active productions for a single
 * realization. Within a single production, the ordering of events is
 * meaningful.
 *
 * Note that all trace_tag events (if any) will occur just after the begin_pipeline
 * event, but before any begin_realization events. All trace_tags for a given Func
 * will be emitted in the order added.
 */
// @}
extern int32_t halide_trace(void *user_context, const struct halide_trace_event_t *event);
extern int32_t halide_default_trace(void *user_context, const struct halide_trace_event_t *event);
typedef int32_t (*halide_trace_t)(void *user_context, const struct halide_trace_event_t *);
extern halide_trace_t halide_set_custom_trace(halide_trace_t trace);
// @}

/** The header of a packet in a binary trace. All fields are 32-bit. */
struct halide_trace_packet_t {
    /** The total size of this packet in bytes. Always a multiple of
     * four. Equivalently, the number of bytes until the next
     * packet. */
    uint32_t size;

    /** The id of this packet (for the purpose of parent_id). */
    int32_t id;

    /** The remaining fields are equivalent to those in halide_trace_event_t */
    // @{
    struct halide_type_t type;
    enum halide_trace_event_code_t event;
    int32_t parent_id;
    int32_t value_index;
    int32_t dimensions;
    // @}

#if (__cplusplus >= 201103L || _MSVC_LANG >= 201103L)
    /** Get the coordinates array, assuming this packet is laid out in
     * memory as it was written. The coordinates array comes
     * immediately after the packet header. */
    HALIDE_ALWAYS_INLINE const int *coordinates() const {
        return (const int *)(this + 1);
    }

    HALIDE_ALWAYS_INLINE int *coordinates() {
        return (int *)(this + 1);
    }

    /** Get the value, assuming this packet is laid out in memory as
     * it was written. The packet comes immediately after the coordinates
     * array. */
    HALIDE_ALWAYS_INLINE const void *value() const {
        return (const void *)(coordinates() + dimensions);
    }

    HALIDE_ALWAYS_INLINE void *value() {
        return (void *)(coordinates() + dimensions);
    }

    /** Get the func name, assuming this packet is laid out in memory
     * as it was written. It comes after the value. */
    HALIDE_ALWAYS_INLINE const char *func() const {
        return (const char *)value() + type.lanes * type.bytes();
    }

    HALIDE_ALWAYS_INLINE char *func() {
        return (char *)value() + type.lanes * type.bytes();
    }

    /** Get the trace_tag (if any), assuming this packet is laid out in memory
     * as it was written. It comes after the func name. If there is no trace_tag,
     * this will return a pointer to an empty string. */
    HALIDE_ALWAYS_INLINE const char *trace_tag() const {
        const char *f = func();
        // strlen may not be available here
        while (*f++) {
            // nothing
        }
        return f;
    }

    HALIDE_ALWAYS_INLINE char *trace_tag() {
        char *f = func();
        // strlen may not be available here
        while (*f++) {
            // nothing
        }
        return f;
    }
#endif
};

/** Set the file descriptor that Halide should write binary trace
 * events to. If called with 0 as the argument, Halide outputs trace
 * information to stdout in a human-readable format. If never called,
 * Halide checks the for existence of an environment variable called
 * HL_TRACE_FILE and opens that file. If HL_TRACE_FILE is not defined,
 * it outputs trace information to stdout in a human-readable
 * format. */
extern void halide_set_trace_file(int fd);

/** Halide calls this to retrieve the file descriptor to write binary
 * trace events to. The default implementation returns the value set
 * by halide_set_trace_file. Implement it yourself if you wish to use
 * a custom file descriptor per user_context. Return zero from your
 * implementation to tell Halide to print human-readable trace
 * information to stdout. */
extern int halide_get_trace_file(void *user_context);

/** If tracing is writing to a file. This call closes that file
 * (flushing the trace). Returns zero on success. */
extern int halide_shutdown_trace();

/** All Halide GPU or device backend implementations provide an
 * interface to be used with halide_device_malloc, etc. This is
 * accessed via the functions below.
 */

/** An opaque struct containing per-GPU API implementations of the
 * device functions. */
struct halide_device_interface_impl_t;

/** Each GPU API provides a halide_device_interface_t struct pointing
 * to the code that manages device allocations. You can access these
 * functions directly from the struct member function pointers, or by
 * calling the functions declared below. Note that the global
 * functions are not available when using Halide as a JIT compiler.
 * If you are using raw halide_buffer_t in that context you must use
 * the function pointers in the device_interface struct.
 *
 * The function pointers below are currently the same for every GPU
 * API; only the impl field varies. These top-level functions do the
 * bookkeeping that is common across all GPU APIs, and then dispatch
 * to more API-specific functions via another set of function pointers
 * hidden inside the impl field.
 */
struct halide_device_interface_t {
    int (*device_malloc)(void *user_context, struct halide_buffer_t *buf,
                         const struct halide_device_interface_t *device_interface);
    int (*device_free)(void *user_context, struct halide_buffer_t *buf);
    int (*device_sync)(void *user_context, struct halide_buffer_t *buf);
    void (*device_release)(void *user_context,
                           const struct halide_device_interface_t *device_interface);
    int (*copy_to_host)(void *user_context, struct halide_buffer_t *buf);
    int (*copy_to_device)(void *user_context, struct halide_buffer_t *buf,
                          const struct halide_device_interface_t *device_interface);
    int (*device_and_host_malloc)(void *user_context, struct halide_buffer_t *buf,
                                  const struct halide_device_interface_t *device_interface);
    int (*device_and_host_free)(void *user_context, struct halide_buffer_t *buf);
    int (*buffer_copy)(void *user_context, struct halide_buffer_t *src,
                       const struct halide_device_interface_t *dst_device_interface, struct halide_buffer_t *dst);
    int (*device_crop)(void *user_context, const struct halide_buffer_t *src,
                       struct halide_buffer_t *dst);
    int (*device_slice)(void *user_context, const struct halide_buffer_t *src,
                        int slice_dim, int slice_pos, struct halide_buffer_t *dst);
    int (*device_release_crop)(void *user_context, struct halide_buffer_t *buf);
    int (*wrap_native)(void *user_context, struct halide_buffer_t *buf, uint64_t handle,
                       const struct halide_device_interface_t *device_interface);
    int (*detach_native)(void *user_context, struct halide_buffer_t *buf);
    int (*compute_capability)(void *user_context, int *major, int *minor);
    const struct halide_device_interface_impl_t *impl;
};

/** Release all data associated with the given device interface, in
 * particular all resources (memory, texture, context handles)
 * allocated by Halide. Must be called explicitly when using AOT
 * compilation. This is *not* thread-safe with respect to actively
 * running Halide code. Ensure all pipelines are finished before
 * calling this. */
extern void halide_device_release(void *user_context,
                                  const struct halide_device_interface_t *device_interface);

/** Copy image data from device memory to host memory. This must be called
 * explicitly to copy back the results of a GPU-based filter. */
extern int halide_copy_to_host(void *user_context, struct halide_buffer_t *buf);

/** Copy image data from host memory to device memory. This should not
 * be called directly; Halide handles copying to the device
 * automatically.  If interface is NULL and the buf has a non-zero dev
 * field, the device associated with the dev handle will be
 * used. Otherwise if the dev field is 0 and interface is NULL, an
 * error is returned. */
extern int halide_copy_to_device(void *user_context, struct halide_buffer_t *buf,
                                 const struct halide_device_interface_t *device_interface);

/** Copy data from one buffer to another. The buffers may have
 * different shapes and sizes, but the destination buffer's shape must
 * be contained within the source buffer's shape. That is, for each
 * dimension, the min on the destination buffer must be greater than
 * or equal to the min on the source buffer, and min+extent on the
 * destination buffer must be less that or equal to min+extent on the
 * source buffer. The source data is pulled from either device or
 * host memory on the source, depending on the dirty flags. host is
 * preferred if both are valid. The dst_device_interface parameter
 * controls the destination memory space. NULL means host memory. */
extern int halide_buffer_copy(void *user_context, struct halide_buffer_t *src,
                              const struct halide_device_interface_t *dst_device_interface,
                              struct halide_buffer_t *dst);

/** Give the destination buffer a device allocation which is an alias
 * for the same coordinate range in the source buffer. Modifies the
 * device, device_interface, and the device_dirty flag only. Only
 * supported by some device APIs (others will return
 * halide_error_code_device_crop_unsupported). Call
 * halide_device_release_crop instead of halide_device_free to clean
 * up resources associated with the cropped view. Do not free the
 * device allocation on the source buffer while the destination buffer
 * still lives. Note that the two buffers do not share dirty flags, so
 * care must be taken to update them together as needed. Note that src
 * and dst are required to have the same number of dimensions.
 *
 * Note also that (in theory) device interfaces which support cropping may
 * still not support cropping a crop (instead, create a new crop of the parent
 * buffer); in practice, no known implementation has this limitation, although
 * it is possible that some future implementations may require it. */
extern int halide_device_crop(void *user_context,
                              const struct halide_buffer_t *src,
                              struct halide_buffer_t *dst);

/** Give the destination buffer a device allocation which is an alias
 * for a similar coordinate range in the source buffer, but with one dimension
 * sliced away in the dst. Modifies the device, device_interface, and the
 * device_dirty flag only. Only supported by some device APIs (others will return
 * halide_error_code_device_crop_unsupported). Call
 * halide_device_release_crop instead of halide_device_free to clean
 * up resources associated with the sliced view. Do not free the
 * device allocation on the source buffer while the destination buffer
 * still lives. Note that the two buffers do not share dirty flags, so
 * care must be taken to update them together as needed. Note that the dst buffer
 * must have exactly one fewer dimension than the src buffer, and that slice_dim
 * and slice_pos must be valid within src. */
extern int halide_device_slice(void *user_context,
                               const struct halide_buffer_t *src,
                               int slice_dim, int slice_pos,
                               struct halide_buffer_t *dst);

/** Release any resources associated with a cropped/sliced view of another
 * buffer. */
extern int halide_device_release_crop(void *user_context,
                                      struct halide_buffer_t *buf);

/** Wait for current GPU operations to complete. Calling this explicitly
 * should rarely be necessary, except maybe for profiling. */
extern int halide_device_sync(void *user_context, struct halide_buffer_t *buf);

/** Allocate device memory to back a halide_buffer_t. */
extern int halide_device_malloc(void *user_context, struct halide_buffer_t *buf,
                                const struct halide_device_interface_t *device_interface);

/** Free device memory. */
extern int halide_device_free(void *user_context, struct halide_buffer_t *buf);

/** Wrap or detach a native device handle, setting the device field
 * and device_interface field as appropriate for the given GPU
 * API. The meaning of the opaque handle is specific to the device
 * interface, so if you know the device interface in use, call the
 * more specific functions in the runtime headers for your specific
 * device API instead (e.g. HalideRuntimeCuda.h). */
// @{
extern int halide_device_wrap_native(void *user_context,
                                     struct halide_buffer_t *buf,
                                     uint64_t handle,
                                     const struct halide_device_interface_t *device_interface);
extern int halide_device_detach_native(void *user_context, struct halide_buffer_t *buf);
// @}

/** Selects which gpu device to use. 0 is usually the display
 * device. If never called, Halide uses the environment variable
 * HL_GPU_DEVICE. If that variable is unset, Halide uses the last
 * device. Set this to -1 to use the last device. */
extern void halide_set_gpu_device(int n);

/** Halide calls this to get the desired halide gpu device
 * setting. Implement this yourself to use a different gpu device per
 * user_context. The default implementation returns the value set by
 * halide_set_gpu_device, or the environment variable
 * HL_GPU_DEVICE. */
extern int halide_get_gpu_device(void *user_context);

/** Set the soft maximum amount of memory, in bytes, that the LRU
 *  cache will use to memoize Func results.  This is not a strict
 *  maximum in that concurrency and simultaneous use of memoized
 *  reults larger than the cache size can both cause it to
 *  temporariliy be larger than the size specified here.
 */
extern void halide_memoization_cache_set_size(int64_t size);

/** Given a cache key for a memoized result, currently constructed
 *  from the Func name and top-level Func name plus the arguments of
 *  the computation, determine if the result is in the cache and
 *  return it if so. (The internals of the cache key should be
 *  considered opaque by this function.) If this routine returns true,
 *  it is a cache miss. Otherwise, it will return false and the
 *  buffers passed in will be filled, via copying, with memoized
 *  data. The last argument is a list if halide_buffer_t pointers which
 *  represents the outputs of the memoized Func. If the Func does not
 *  return a Tuple, there will only be one halide_buffer_t in the list. The
 *  tuple_count parameters determines the length of the list.
 *
 * The return values are:
 * -1: Signals an error.
 *  0: Success and cache hit.
 *  1: Success and cache miss.
 */
extern int halide_memoization_cache_lookup(void *user_context, const uint8_t *cache_key, int32_t size,
                                           struct halide_buffer_t *realized_bounds,
                                           int32_t tuple_count, struct halide_buffer_t **tuple_buffers);

/** Given a cache key for a memoized result, currently constructed
 *  from the Func name and top-level Func name plus the arguments of
 *  the computation, store the result in the cache for futre access by
 *  halide_memoization_cache_lookup. (The internals of the cache key
 *  should be considered opaque by this function.) Data is copied out
 *  from the inputs and inputs are unmodified. The last argument is a
 *  list if halide_buffer_t pointers which represents the outputs of the
 *  memoized Func. If the Func does not return a Tuple, there will
 *  only be one halide_buffer_t in the list. The tuple_count parameters
 *  determines the length of the list.
 *
 * If there is a memory allocation failure, the store does not store
 * the data into the cache.
 *
 * If has_eviction_key is true, the entry is marked with eviction_key to
 * allow removing the key with halide_memoization_cache_evict.
 */
extern int halide_memoization_cache_store(void *user_context, const uint8_t *cache_key, int32_t size,
                                          struct halide_buffer_t *realized_bounds,
                                          int32_t tuple_count,
                                          struct halide_buffer_t **tuple_buffers,
                                          bool has_eviction_key, uint64_t eviction_key);

/** Evict all cache entries that were tagged with the given
 *  eviction_key in the memoize scheduling directive.
 */
extern void halide_memoization_cache_evict(void *user_context, uint64_t eviction_key);

/** If halide_memoization_cache_lookup succeeds,
 * halide_memoization_cache_release must be called to signal the
 * storage is no longer being used by the caller. It will be passed
 * the host pointer of one the buffers returned by
 * halide_memoization_cache_lookup. That is
 * halide_memoization_cache_release will be called multiple times for
 * the case where halide_memoization_cache_lookup is handling multiple
 * buffers.  (This corresponds to memoizing a Tuple in Halide.) Note
 * that the host pointer must be sufficient to get to all information
 * the release operation needs. The default Halide cache impleemntation
 * accomplishes this by storing extra data before the start of the user
 * modifiable host storage.
 *
 * This call is like free and does not have a failure return.
 */
extern void halide_memoization_cache_release(void *user_context, void *host);

/** Free all memory and resources associated with the memoization cache.
 * Must be called at a time when no other threads are accessing the cache.
 */
extern void halide_memoization_cache_cleanup();

/** Verify that a given range of memory has been initialized; only used when Target::MSAN is enabled.
 *
 * The default implementation simply calls the LLVM-provided __msan_check_mem_is_initialized() function.
 *
 * The return value should always be zero.
 */
extern int halide_msan_check_memory_is_initialized(void *user_context, const void *ptr, uint64_t len, const char *name);

/** Verify that the data pointed to by the halide_buffer_t is initialized (but *not* the halide_buffer_t itself),
 * using halide_msan_check_memory_is_initialized() for checking.
 *
 * The default implementation takes pains to only check the active memory ranges
 * (skipping padding), and sorting into ranges to always check the smallest number of
 * ranges, in monotonically increasing memory order.
 *
 * Most client code should never need to replace the default implementation.
 *
 * The return value should always be zero.
 */
extern int halide_msan_check_buffer_is_initialized(void *user_context, struct halide_buffer_t *buffer, const char *buf_name);

/** Annotate that a given range of memory has been initialized;
 * only used when Target::MSAN is enabled.
 *
 * The default implementation simply calls the LLVM-provided __msan_unpoison() function.
 *
 * The return value should always be zero.
 */
extern int halide_msan_annotate_memory_is_initialized(void *user_context, const void *ptr, uint64_t len);

/** Mark the data pointed to by the halide_buffer_t as initialized (but *not* the halide_buffer_t itself),
 * using halide_msan_annotate_memory_is_initialized() for marking.
 *
 * The default implementation takes pains to only mark the active memory ranges
 * (skipping padding), and sorting into ranges to always mark the smallest number of
 * ranges, in monotonically increasing memory order.
 *
 * Most client code should never need to replace the default implementation.
 *
 * The return value should always be zero.
 */
extern int halide_msan_annotate_buffer_is_initialized(void *user_context, struct halide_buffer_t *buffer);
extern void halide_msan_annotate_buffer_is_initialized_as_destructor(void *user_context, void *buffer);

/** The error codes that may be returned by a Halide pipeline. */
enum halide_error_code_t {
    /** There was no error. This is the value returned by Halide on success. */
    halide_error_code_success = 0,

    /** An uncategorized error occurred. Refer to the string passed to halide_error. */
    halide_error_code_generic_error = -1,

    /** A Func was given an explicit bound via Func::bound, but this
     * was not large enough to encompass the region that is used of
     * the Func by the rest of the pipeline. */
    halide_error_code_explicit_bounds_too_small = -2,

    /** The elem_size field of a halide_buffer_t does not match the size in
     * bytes of the type of that ImageParam. Probable type mismatch. */
    halide_error_code_bad_type = -3,

    /** A pipeline would access memory outside of the halide_buffer_t passed
     * in. */
    halide_error_code_access_out_of_bounds = -4,

    /** A halide_buffer_t was given that spans more than 2GB of memory. */
    halide_error_code_buffer_allocation_too_large = -5,

    /** A halide_buffer_t was given with extents that multiply to a number
     * greater than 2^31-1 */
    halide_error_code_buffer_extents_too_large = -6,

    /** Applying explicit constraints on the size of an input or
     * output buffer shrank the size of that buffer below what will be
     * accessed by the pipeline. */
    halide_error_code_constraints_make_required_region_smaller = -7,

    /** A constraint on a size or stride of an input or output buffer
     * was not met by the halide_buffer_t passed in. */
    halide_error_code_constraint_violated = -8,

    /** A scalar parameter passed in was smaller than its minimum
     * declared value. */
    halide_error_code_param_too_small = -9,

    /** A scalar parameter passed in was greater than its minimum
     * declared value. */
    halide_error_code_param_too_large = -10,

    /** A call to halide_malloc returned NULL. */
    halide_error_code_out_of_memory = -11,

    /** A halide_buffer_t pointer passed in was NULL. */
    halide_error_code_buffer_argument_is_null = -12,

    /** debug_to_file failed to open or write to the specified
     * file. */
    halide_error_code_debug_to_file_failed = -13,

    /** The Halide runtime encountered an error while trying to copy
     * from device to host. Turn on -debug in your target string to
     * see more details. */
    halide_error_code_copy_to_host_failed = -14,

    /** The Halide runtime encountered an error while trying to copy
     * from host to device. Turn on -debug in your target string to
     * see more details. */
    halide_error_code_copy_to_device_failed = -15,

    /** The Halide runtime encountered an error while trying to
     * allocate memory on device. Turn on -debug in your target string
     * to see more details. */
    halide_error_code_device_malloc_failed = -16,

    /** The Halide runtime encountered an error while trying to
     * synchronize with a device. Turn on -debug in your target string
     * to see more details. */
    halide_error_code_device_sync_failed = -17,

    /** The Halide runtime encountered an error while trying to free a
     * device allocation. Turn on -debug in your target string to see
     * more details. */
    halide_error_code_device_free_failed = -18,

    /** Buffer has a non-zero device but no device interface, which
     * violates a Halide invariant. */
    halide_error_code_no_device_interface = -19,

    /** This part of the Halide runtime is unimplemented on this platform. */
    halide_error_code_unimplemented = -20,

    /** A runtime symbol could not be loaded. */
    halide_error_code_symbol_not_found = -21,

    /** There is a bug in the Halide compiler. */
    halide_error_code_internal_error = -22,

    /** The Halide runtime encountered an error while trying to launch
     * a GPU kernel. Turn on -debug in your target string to see more
     * details. */
    halide_error_code_device_run_failed = -23,

    /** The Halide runtime encountered a host pointer that violated
     * the alignment set for it by way of a call to
     * set_host_alignment */
    halide_error_code_unaligned_host_ptr = -24,

    /** A fold_storage directive was used on a dimension that is not
     * accessed in a monotonically increasing or decreasing fashion. */
    halide_error_code_bad_fold = -25,

    /** A fold_storage directive was used with a fold factor that was
     * too small to store all the values of a producer needed by the
     * consumer. */
    halide_error_code_fold_factor_too_small = -26,

    /** User-specified require() expression was not satisfied. */
    halide_error_code_requirement_failed = -27,

    /** At least one of the buffer's extents are negative. */
    halide_error_code_buffer_extents_negative = -28,

    /** Call(s) to a GPU backend API failed. */
    halide_error_code_gpu_device_error = -29,

    /** Failure recording trace packets for one of the halide_target_feature_trace features. */
    halide_error_code_trace_failed = -30,

    /** A specialize_fail() schedule branch was selected at runtime. */
    halide_error_code_specialize_fail = -31,

    /** The Halide runtime encountered an error while trying to wrap a
     * native device handle.  Turn on -debug in your target string to
     * see more details. */
    halide_error_code_device_wrap_native_failed = -32,

    /** The Halide runtime encountered an error while trying to detach
     * a native device handle.  Turn on -debug in your target string
     * to see more details. */
    halide_error_code_device_detach_native_failed = -33,

    /** The host field on an input or output was null, the device
     * field was not zero, and the pipeline tries to use the buffer on
     * the host. You may be passing a GPU-only buffer to a pipeline
     * which is scheduled to use it on the CPU. */
    halide_error_code_host_is_null = -34,

    /** A folded buffer was passed to an extern stage, but the region
     * touched wraps around the fold boundary. */
    halide_error_code_bad_extern_fold = -35,

    /** Buffer has a non-null device_interface but device is 0, which
     * violates a Halide invariant. */
    halide_error_code_device_interface_no_device = -36,

    /** Buffer has both host and device dirty bits set, which violates
     * a Halide invariant. */
    halide_error_code_host_and_device_dirty = -37,

    /** The halide_buffer_t * passed to a halide runtime routine is
     * nullptr and this is not allowed. */
    halide_error_code_buffer_is_null = -38,

    /** The Halide runtime encountered an error while trying to copy
     * from one buffer to another. Turn on -debug in your target
     * string to see more details. */
    halide_error_code_device_buffer_copy_failed = -39,

    /** Attempted to make cropped/sliced alias of a buffer with a device
     * field, but the device_interface does not support cropping. */
    halide_error_code_device_crop_unsupported = -40,

    /** Cropping/slicing a buffer failed for some other reason. Turn on -debug
     * in your target string. */
    halide_error_code_device_crop_failed = -41,

    /** An operation on a buffer required an allocation on a
     * particular device interface, but a device allocation already
     * existed on a different device interface. Free the old one
     * first. */
    halide_error_code_incompatible_device_interface = -42,

    /** The dimensions field of a halide_buffer_t does not match the dimensions of that ImageParam. */
    halide_error_code_bad_dimensions = -43,

    /** A buffer with the device_dirty flag set was passed to a
     * pipeline compiled with no device backends enabled, so it
     * doesn't know how to copy the data back from device memory to
     * host memory. Either call copy_to_host before calling the Halide
     * pipeline, or enable the appropriate device backend. */
    halide_error_code_device_dirty_with_no_device_support = -44,

    /** An explicit storage bound provided is too small to store
     * all the values produced by the function. */
    halide_error_code_storage_bound_too_small = -45,
};

/** Halide calls the functions below on various error conditions. The
 * default implementations construct an error message, call
 * halide_error, then return the matching error code above. On
 * platforms that support weak linking, you can override these to
 * catch the errors individually. */

/** A call into an extern stage for the purposes of bounds inference
 * failed. Returns the error code given by the extern stage. */
extern int halide_error_bounds_inference_call_failed(void *user_context, const char *extern_stage_name, int result);

/** A call to an extern stage failed. Returned the error code given by
 * the extern stage. */
extern int halide_error_extern_stage_failed(void *user_context, const char *extern_stage_name, int result);

/** Various other error conditions. See the enum above for a
 * description of each. */
// @{
extern int halide_error_explicit_bounds_too_small(void *user_context, const char *func_name, const char *var_name,
                                                  int min_bound, int max_bound, int min_required, int max_required);
extern int halide_error_bad_type(void *user_context, const char *func_name,
                                 uint32_t type_given, uint32_t correct_type);  // N.B. The last two args are the bit representation of a halide_type_t
extern int halide_error_bad_dimensions(void *user_context, const char *func_name,
                                       int32_t dimensions_given, int32_t correct_dimensions);
extern int halide_error_access_out_of_bounds(void *user_context, const char *func_name,
                                             int dimension, int min_touched, int max_touched,
                                             int min_valid, int max_valid);
extern int halide_error_buffer_allocation_too_large(void *user_context, const char *buffer_name,
                                                    uint64_t allocation_size, uint64_t max_size);
extern int halide_error_buffer_extents_negative(void *user_context, const char *buffer_name, int dimension, int extent);
extern int halide_error_buffer_extents_too_large(void *user_context, const char *buffer_name,
                                                 int64_t actual_size, int64_t max_size);
extern int halide_error_constraints_make_required_region_smaller(void *user_context, const char *buffer_name,
                                                                 int dimension,
                                                                 int constrained_min, int constrained_extent,
                                                                 int required_min, int required_extent);
extern int halide_error_constraint_violated(void *user_context, const char *var, int val,
                                            const char *constrained_var, int constrained_val);
extern int halide_error_param_too_small_i64(void *user_context, const char *param_name,
                                            int64_t val, int64_t min_val);
extern int halide_error_param_too_small_u64(void *user_context, const char *param_name,
                                            uint64_t val, uint64_t min_val);
extern int halide_error_param_too_small_f64(void *user_context, const char *param_name,
                                            double val, double min_val);
extern int halide_error_param_too_large_i64(void *user_context, const char *param_name,
                                            int64_t val, int64_t max_val);
extern int halide_error_param_too_large_u64(void *user_context, const char *param_name,
                                            uint64_t val, uint64_t max_val);
extern int halide_error_param_too_large_f64(void *user_context, const char *param_name,
                                            double val, double max_val);
extern int halide_error_out_of_memory(void *user_context);
extern int halide_error_buffer_argument_is_null(void *user_context, const char *buffer_name);
extern int halide_error_debug_to_file_failed(void *user_context, const char *func,
                                             const char *filename, int error_code);
extern int halide_error_unaligned_host_ptr(void *user_context, const char *func_name, int alignment);
extern int halide_error_host_is_null(void *user_context, const char *func_name);
extern int halide_error_bad_fold(void *user_context, const char *func_name, const char *var_name,
                                 const char *loop_name);
extern int halide_error_bad_extern_fold(void *user_context, const char *func_name,
                                        int dim, int min, int extent, int valid_min, int fold_factor);

extern int halide_error_fold_factor_too_small(void *user_context, const char *func_name, const char *var_name,
                                              int fold_factor, const char *loop_name, int required_extent);
extern int halide_error_requirement_failed(void *user_context, const char *condition, const char *message);
extern int halide_error_specialize_fail(void *user_context, const char *message);
extern int halide_error_no_device_interface(void *user_context);
extern int halide_error_device_interface_no_device(void *user_context);
extern int halide_error_host_and_device_dirty(void *user_context);
extern int halide_error_buffer_is_null(void *user_context, const char *routine);
extern int halide_error_device_dirty_with_no_device_support(void *user_context, const char *buffer_name);
extern int halide_error_storage_bound_too_small(void *user_context, const char *func_name, const char *var_name,
                                                int provided_size, int required_size);
extern int halide_error_device_crop_failed(void *user_context);
// @}

/** Optional features a compilation Target can have.
 * Be sure to keep this in sync with the Feature enum in Target.h and the implementation of
 * get_runtime_compatible_target in Target.cpp if you add a new feature.
 */
typedef enum halide_target_feature_t {
    halide_target_feature_jit = 0,          ///< Generate code that will run immediately inside the calling process.
    halide_target_feature_debug,            ///< Turn on debug info and output for runtime code.
    halide_target_feature_no_asserts,       ///< Disable all runtime checks, for slightly tighter code.
    halide_target_feature_no_bounds_query,  ///< Disable the bounds querying functionality.

    halide_target_feature_sse41,  ///< Use SSE 4.1 and earlier instructions. Only relevant on x86.
    halide_target_feature_avx,    ///< Use AVX 1 instructions. Only relevant on x86.
    halide_target_feature_avx2,   ///< Use AVX 2 instructions. Only relevant on x86.
    halide_target_feature_fma,    ///< Enable x86 FMA instruction
    halide_target_feature_fma4,   ///< Enable x86 (AMD) FMA4 instruction set
    halide_target_feature_f16c,   ///< Enable x86 16-bit float support

    halide_target_feature_armv7s,   ///< Generate code for ARMv7s. Only relevant for 32-bit ARM.
    halide_target_feature_no_neon,  ///< Avoid using NEON instructions. Only relevant for 32-bit ARM.

    halide_target_feature_vsx,              ///< Use VSX instructions. Only relevant on POWERPC.
    halide_target_feature_power_arch_2_07,  ///< Use POWER ISA 2.07 new instructions. Only relevant on POWERPC.

    halide_target_feature_cuda,               ///< Enable the CUDA runtime. Defaults to compute capability 2.0 (Fermi)
    halide_target_feature_cuda_capability30,  ///< Enable CUDA compute capability 3.0 (Kepler)
    halide_target_feature_cuda_capability32,  ///< Enable CUDA compute capability 3.2 (Tegra K1)
    halide_target_feature_cuda_capability35,  ///< Enable CUDA compute capability 3.5 (Kepler)
    halide_target_feature_cuda_capability50,  ///< Enable CUDA compute capability 5.0 (Maxwell)
    halide_target_feature_cuda_capability61,  ///< Enable CUDA compute capability 6.1 (Pascal)
    halide_target_feature_cuda_capability70,  ///< Enable CUDA compute capability 7.0 (Volta)
    halide_target_feature_cuda_capability75,  ///< Enable CUDA compute capability 7.5 (Turing)
    halide_target_feature_cuda_capability80,  ///< Enable CUDA compute capability 8.0 (Ampere)
    halide_target_feature_cuda_capability86,  ///< Enable CUDA compute capability 8.6 (Ampere)

    halide_target_feature_opencl,       ///< Enable the OpenCL runtime.
    halide_target_feature_cl_doubles,   ///< Enable double support on OpenCL targets
    halide_target_feature_cl_atomic64,  ///< Enable 64-bit atomics operations on OpenCL targets

    halide_target_feature_openglcompute,  ///< Enable OpenGL Compute runtime. NOTE: This feature is deprecated and will be removed in Halide 17.

    halide_target_feature_user_context,  ///< Generated code takes a user_context pointer as first argument

    halide_target_feature_profile,     ///< Launch a sampling profiler alongside the Halide pipeline that monitors and reports the runtime used by each Func
    halide_target_feature_no_runtime,  ///< Do not include a copy of the Halide runtime in any generated object file or assembly

    halide_target_feature_metal,  ///< Enable the (Apple) Metal runtime.

    halide_target_feature_c_plus_plus_mangling,  ///< Generate C++ mangled names for result function, et al

    halide_target_feature_large_buffers,  ///< Enable 64-bit buffer indexing to support buffers > 2GB. Ignored if bits != 64.

    halide_target_feature_hvx_128,                ///< Enable HVX 128 byte mode.
    halide_target_feature_hvx_v62,                ///< Enable Hexagon v62 architecture.
    halide_target_feature_fuzz_float_stores,      ///< On every floating point store, set the last bit of the mantissa to zero. Pipelines for which the output is very different with this feature enabled may also produce very different output on different processors.
    halide_target_feature_soft_float_abi,         ///< Enable soft float ABI. This only enables the soft float ABI calling convention, which does not necessarily use soft floats.
    halide_target_feature_msan,                   ///< Enable hooks for MSAN support.
    halide_target_feature_avx512,                 ///< Enable the base AVX512 subset supported by all AVX512 architectures. The specific feature sets are AVX-512F and AVX512-CD. See https://en.wikipedia.org/wiki/AVX-512 for a description of each AVX subset.
    halide_target_feature_avx512_knl,             ///< Enable the AVX512 features supported by Knight's Landing chips, such as the Xeon Phi x200. This includes the base AVX512 set, and also AVX512-CD and AVX512-ER.
    halide_target_feature_avx512_skylake,         ///< Enable the AVX512 features supported by Skylake Xeon server processors. This adds AVX512-VL, AVX512-BW, and AVX512-DQ to the base set. The main difference from the base AVX512 set is better support for small integer ops. Note that this does not include the Knight's Landing features. Note also that these features are not available on Skylake desktop and mobile processors.
    halide_target_feature_avx512_cannonlake,      ///< Enable the AVX512 features expected to be supported by future Cannonlake processors. This includes all of the Skylake features, plus AVX512-IFMA and AVX512-VBMI.
    halide_target_feature_avx512_sapphirerapids,  ///< Enable the AVX512 features supported by Sapphire Rapids processors. This include all of the Cannonlake features, plus AVX512-VNNI and AVX512-BF16.
    halide_target_feature_trace_loads,            ///< Trace all loads done by the pipeline. Equivalent to calling Func::trace_loads on every non-inlined Func.
    halide_target_feature_trace_stores,           ///< Trace all stores done by the pipeline. Equivalent to calling Func::trace_stores on every non-inlined Func.
    halide_target_feature_trace_realizations,     ///< Trace all realizations done by the pipeline. Equivalent to calling Func::trace_realizations on every non-inlined Func.
    halide_target_feature_trace_pipeline,         ///< Trace the pipeline.
    halide_target_feature_hvx_v65,                ///< Enable Hexagon v65 architecture.
    halide_target_feature_hvx_v66,                ///< Enable Hexagon v66 architecture.
    halide_target_feature_cl_half,                ///< Enable half support on OpenCL targets
    halide_target_feature_strict_float,           ///< Turn off all non-IEEE floating-point optimization. Currently applies only to LLVM targets.
    halide_target_feature_tsan,                   ///< Enable hooks for TSAN support.
    halide_target_feature_asan,                   ///< Enable hooks for ASAN support.
    halide_target_feature_d3d12compute,           ///< Enable Direct3D 12 Compute runtime.
    halide_target_feature_check_unsafe_promises,  ///< Insert assertions for promises.
    halide_target_feature_hexagon_dma,            ///< Enable Hexagon DMA buffers.
    halide_target_feature_embed_bitcode,          ///< Emulate clang -fembed-bitcode flag.
    halide_target_feature_enable_llvm_loop_opt,   ///< Enable loop vectorization + unrolling in LLVM. Overrides halide_target_feature_disable_llvm_loop_opt. (Ignored for non-LLVM targets.)
    halide_target_feature_wasm_simd128,           ///< Enable +simd128 instructions for WebAssembly codegen.
    halide_target_feature_wasm_signext,           ///< Enable +sign-ext instructions for WebAssembly codegen.
    halide_target_feature_wasm_sat_float_to_int,  ///< Enable saturating (nontrapping) float-to-int instructions for WebAssembly codegen.
    halide_target_feature_wasm_threads,           ///< Enable use of threads in WebAssembly codegen. Requires the use of a wasm runtime that provides pthread-compatible wrappers (typically, Emscripten with the -pthreads flag). Unsupported under WASI.
    halide_target_feature_wasm_bulk_memory,       ///< Enable +bulk-memory instructions for WebAssembly codegen.
    halide_target_feature_webgpu,                 ///< Enable the WebGPU runtime.
    halide_target_feature_sve,                    ///< Enable ARM Scalable Vector Extensions
    halide_target_feature_sve2,                   ///< Enable ARM Scalable Vector Extensions v2
    halide_target_feature_egl,                    ///< Force use of EGL support.
    halide_target_feature_arm_dot_prod,           ///< Enable ARMv8.2-a dotprod extension (i.e. udot and sdot instructions)
    halide_target_feature_arm_fp16,               ///< Enable ARMv8.2-a half-precision floating point data processing
    halide_llvm_large_code_model,                 ///< Use the LLVM large code model to compile
    halide_target_feature_rvv,                    ///< Enable RISCV "V" Vector Extension
    halide_target_feature_armv81a,                ///< Enable ARMv8.1-a instructions
    halide_target_feature_sanitizer_coverage,     ///< Enable hooks for SanitizerCoverage support.
    halide_target_feature_profile_by_timer,       ///< Alternative to halide_target_feature_profile using timer interrupt for systems without threads or applicartions that need to avoid them.
    halide_target_feature_spirv,                  ///< Enable SPIR-V code generation support.
    halide_target_feature_vulkan,                 ///< Enable Vulkan runtime support.
    halide_target_feature_vulkan_int8,            ///< Enable Vulkan 8-bit integer support.
    halide_target_feature_vulkan_int16,           ///< Enable Vulkan 16-bit integer support.
    halide_target_feature_vulkan_int64,           ///< Enable Vulkan 64-bit integer support.
    halide_target_feature_vulkan_float16,         ///< Enable Vulkan 16-bit float support.
    halide_target_feature_vulkan_float64,         ///< Enable Vulkan 64-bit float support.
    halide_target_feature_vulkan_version10,       ///< Enable Vulkan v1.0 runtime target support.
    halide_target_feature_vulkan_version12,       ///< Enable Vulkan v1.2 runtime target support.
    halide_target_feature_vulkan_version13,       ///< Enable Vulkan v1.3 runtime target support.
    halide_target_feature_semihosting,            ///< Used together with Target::NoOS for the baremetal target built with semihosting library and run with semihosting mode where minimum I/O communication with a host PC is available.
    halide_target_feature_end                     ///< A sentinel. Every target is considered to have this feature, and setting this feature does nothing.
} halide_target_feature_t;

/** This function is called internally by Halide in some situations to determine
 * if the current execution environment can support the given set of
 * halide_target_feature_t flags. The implementation must do the following:
 *
 * -- If there are flags set in features that the function knows *cannot* be supported, return 0.
 * -- Otherwise, return 1.
 * -- Note that any flags set in features that the function doesn't know how to test should be ignored;
 * this implies that a return value of 1 means "not known to be bad" rather than "known to be good".
 *
 * In other words: a return value of 0 means "It is not safe to use code compiled with these features",
 * while a return value of 1 means "It is not obviously unsafe to use code compiled with these features".
 *
 * The default implementation simply calls halide_default_can_use_target_features.
 *
 * Note that `features` points to an array of `count` uint64_t; this array must contain enough
 * bits to represent all the currently known features. Any excess bits must be set to zero.
 */
// @{
extern int halide_can_use_target_features(int count, const uint64_t *features);
typedef int (*halide_can_use_target_features_t)(int count, const uint64_t *features);
extern halide_can_use_target_features_t halide_set_custom_can_use_target_features(halide_can_use_target_features_t);
// @}

/**
 * This is the default implementation of halide_can_use_target_features; it is provided
 * for convenience of user code that may wish to extend halide_can_use_target_features
 * but continue providing existing support, e.g.
 *
 *     int halide_can_use_target_features(int count, const uint64_t *features) {
 *          if (features[halide_target_somefeature >> 6] & (1LL << (halide_target_somefeature & 63))) {
 *              if (!can_use_somefeature()) {
 *                  return 0;
 *              }
 *          }
 *          return halide_default_can_use_target_features(count, features);
 *     }
 */
extern int halide_default_can_use_target_features(int count, const uint64_t *features);

typedef struct halide_dimension_t {
#if (__cplusplus >= 201103L || _MSVC_LANG >= 201103L)
    int32_t min = 0, extent = 0, stride = 0;

    // Per-dimension flags. None are defined yet (This is reserved for future use).
    uint32_t flags = 0;

    HALIDE_ALWAYS_INLINE halide_dimension_t() = default;
    HALIDE_ALWAYS_INLINE halide_dimension_t(int32_t m, int32_t e, int32_t s, uint32_t f = 0)
        : min(m), extent(e), stride(s), flags(f) {
    }

    HALIDE_ALWAYS_INLINE bool operator==(const halide_dimension_t &other) const {
        return (min == other.min) &&
               (extent == other.extent) &&
               (stride == other.stride) &&
               (flags == other.flags);
    }

    HALIDE_ALWAYS_INLINE bool operator!=(const halide_dimension_t &other) const {
        return !(*this == other);
    }
#else
    int32_t min, extent, stride;

    // Per-dimension flags. None are defined yet (This is reserved for future use).
    uint32_t flags;
#endif
} halide_dimension_t;

#ifdef __cplusplus
}  // extern "C"
#endif

typedef enum { halide_buffer_flag_host_dirty = 1,
               halide_buffer_flag_device_dirty = 2 } halide_buffer_flags;

/**
 * The raw representation of an image passed around by generated
 * Halide code. It includes some stuff to track whether the image is
 * not actually in main memory, but instead on a device (like a
 * GPU). For a more convenient C++ wrapper, use Halide::Buffer<T>. */
typedef struct halide_buffer_t {
    /** A device-handle for e.g. GPU memory used to back this buffer. */
    uint64_t device;

    /** The interface used to interpret the above handle. */
    const struct halide_device_interface_t *device_interface;

    /** A pointer to the start of the data in main memory. In terms of
     * the Halide coordinate system, this is the address of the min
     * coordinates (defined below). */
    uint8_t *host;

    /** flags with various meanings. */
    uint64_t flags;

    /** The type of each buffer element. */
    struct halide_type_t type;

    /** The dimensionality of the buffer. */
    int32_t dimensions;

    /** The shape of the buffer. Halide does not own this array - you
     * must manage the memory for it yourself. */
    halide_dimension_t *dim;

    /** Pads the buffer up to a multiple of 8 bytes */
    void *padding;

#if (__cplusplus >= 201103L || _MSVC_LANG >= 201103L)
    /** Convenience methods for accessing the flags */
    // @{
    HALIDE_ALWAYS_INLINE bool get_flag(halide_buffer_flags flag) const {
        return (flags & flag) != 0;
    }

    HALIDE_ALWAYS_INLINE void set_flag(halide_buffer_flags flag, bool value) {
        if (value) {
            flags |= flag;
        } else {
            flags &= ~uint64_t(flag);
        }
    }

    HALIDE_ALWAYS_INLINE bool host_dirty() const {
        return get_flag(halide_buffer_flag_host_dirty);
    }

    HALIDE_ALWAYS_INLINE bool device_dirty() const {
        return get_flag(halide_buffer_flag_device_dirty);
    }

    HALIDE_ALWAYS_INLINE void set_host_dirty(bool v = true) {
        set_flag(halide_buffer_flag_host_dirty, v);
    }

    HALIDE_ALWAYS_INLINE void set_device_dirty(bool v = true) {
        set_flag(halide_buffer_flag_device_dirty, v);
    }
    // @}

    /** The total number of elements this buffer represents. Equal to
     * the product of the extents */
    HALIDE_ALWAYS_INLINE size_t number_of_elements() const {
        size_t s = 1;
        for (int i = 0; i < dimensions; i++) {
            s *= dim[i].extent;
        }
        return s;
    }

    /** Offset to the element with the lowest address.
     * If all strides are positive, equal to zero.
     * Offset is in elements, not bytes.
     * Unlike begin(), this is ok to call on an unallocated buffer. */
    HALIDE_ALWAYS_INLINE ptrdiff_t begin_offset() const {
        ptrdiff_t index = 0;
        for (int i = 0; i < dimensions; i++) {
            const int stride = dim[i].stride;
            if (stride < 0) {
                index += stride * (ptrdiff_t)(dim[i].extent - 1);
            }
        }
        return index;
    }

    /** An offset to one beyond the element with the highest address.
     * Offset is in elements, not bytes.
     * Unlike end(), this is ok to call on an unallocated buffer. */
    HALIDE_ALWAYS_INLINE ptrdiff_t end_offset() const {
        ptrdiff_t index = 0;
        for (int i = 0; i < dimensions; i++) {
            const int stride = dim[i].stride;
            if (stride > 0) {
                index += stride * (ptrdiff_t)(dim[i].extent - 1);
            }
        }
        index += 1;
        return index;
    }

    /** A pointer to the element with the lowest address.
     * If all strides are positive, equal to the host pointer.
     * Illegal to call on an unallocated buffer. */
    HALIDE_ALWAYS_INLINE uint8_t *begin() const {
        return host + begin_offset() * type.bytes();
    }

    /** A pointer to one beyond the element with the highest address.
     * Illegal to call on an unallocated buffer. */
    HALIDE_ALWAYS_INLINE uint8_t *end() const {
        return host + end_offset() * type.bytes();
    }

    /** The total number of bytes spanned by the data in memory. */
    HALIDE_ALWAYS_INLINE size_t size_in_bytes() const {
        return (size_t)(end_offset() - begin_offset()) * type.bytes();
    }

    /** A pointer to the element at the given location. */
    HALIDE_ALWAYS_INLINE uint8_t *address_of(const int *pos) const {
        ptrdiff_t index = 0;
        for (int i = 0; i < dimensions; i++) {
            index += (ptrdiff_t)dim[i].stride * (pos[i] - dim[i].min);
        }
        return host + index * type.bytes();
    }

    /** Attempt to call device_sync for the buffer. If the buffer
     * has no device_interface (or no device_sync), this is a quiet no-op.
     * Calling this explicitly should rarely be necessary, except for profiling. */
    HALIDE_ALWAYS_INLINE int device_sync(void *ctx = nullptr) {
        if (device_interface && device_interface->device_sync) {
            return device_interface->device_sync(ctx, this);
        }
        return 0;
    }

    /** Check if an input buffer passed extern stage is a querying
     * bounds. Compared to doing the host pointer check directly,
     * this both adds clarity to code and will facilitate moving to
     * another representation for bounds query arguments. */
    HALIDE_ALWAYS_INLINE bool is_bounds_query() const {
        return host == nullptr && device == 0;
    }

#endif
} halide_buffer_t;

#ifdef __cplusplus
extern "C" {
#endif

#ifndef HALIDE_ATTRIBUTE_DEPRECATED
#ifdef HALIDE_ALLOW_DEPRECATED
#define HALIDE_ATTRIBUTE_DEPRECATED(x)
#else
#ifdef _MSC_VER
#define HALIDE_ATTRIBUTE_DEPRECATED(x) __declspec(deprecated(x))
#else
#define HALIDE_ATTRIBUTE_DEPRECATED(x) __attribute__((deprecated(x)))
#endif
#endif
#endif

/** halide_scalar_value_t is a simple union able to represent all the well-known
 * scalar values in a filter argument. Note that it isn't tagged with a type;
 * you must ensure you know the proper type before accessing. Most user
 * code will never need to create instances of this struct; its primary use
 * is to hold def/min/max values in a halide_filter_argument_t. (Note that
 * this is conceptually just a union; it's wrapped in a struct to ensure
 * that it doesn't get anonymized by LLVM.)
 */
struct halide_scalar_value_t {
    union {
        bool b;
        int8_t i8;
        int16_t i16;
        int32_t i32;
        int64_t i64;
        uint8_t u8;
        uint16_t u16;
        uint32_t u32;
        uint64_t u64;
        float f32;
        double f64;
        void *handle;
    } u;
#ifdef __cplusplus
    HALIDE_ALWAYS_INLINE halide_scalar_value_t() {
        u.u64 = 0;
    }
#endif
};

enum halide_argument_kind_t {
    halide_argument_kind_input_scalar = 0,
    halide_argument_kind_input_buffer = 1,
    halide_argument_kind_output_buffer = 2
};

/*
    These structs must be robust across different compilers and settings; when
    modifying them, strive for the following rules:

    1) All fields are explicitly sized. I.e. must use int32_t and not "int"
    2) All fields must land on an alignment boundary that is the same as their size
    3) Explicit padding is added to make that so
    4) The sizeof the struct is padded out to a multiple of the largest natural size thing in the struct
    5) don't forget that 32 and 64 bit pointers are different sizes
*/

/**
 * Obsolete version of halide_filter_argument_t; only present in
 * code that wrote halide_filter_metadata_t version 0.
 */
struct halide_filter_argument_t_v0 {
    const char *name;
    int32_t kind;
    int32_t dimensions;
    struct halide_type_t type;
    const struct halide_scalar_value_t *def, *min, *max;
};

/**
 * halide_filter_argument_t is essentially a plain-C-struct equivalent to
 * Halide::Argument; most user code will never need to create one.
 */
struct halide_filter_argument_t {
    const char *name;    // name of the argument; will never be null or empty.
    int32_t kind;        // actually halide_argument_kind_t
    int32_t dimensions;  // always zero for scalar arguments
    struct halide_type_t type;
    // These pointers should always be null for buffer arguments,
    // and *may* be null for scalar arguments. (A null value means
    // there is no def/min/max/estimate specified for this argument.)
    const struct halide_scalar_value_t *scalar_def, *scalar_min, *scalar_max, *scalar_estimate;
    // This pointer should always be null for scalar arguments,
    // and *may* be null for buffer arguments. If not null, it should always
    // point to an array of dimensions*2 pointers, which will be the (min, extent)
    // estimates for each dimension of the buffer. (Note that any of the pointers
    // may be null as well.)
    int64_t const *const *buffer_estimates;
};

struct halide_filter_metadata_t {
#ifdef __cplusplus
    static const int32_t VERSION = 1;
#endif

    /** version of this metadata; currently always 1. */
    int32_t version;

    /** The number of entries in the arguments field. This is always >= 1. */
    int32_t num_arguments;

    /** An array of the filters input and output arguments; this will never be
     * null. The order of arguments is not guaranteed (input and output arguments
     * may come in any order); however, it is guaranteed that all arguments
     * will have a unique name within a given filter. */
    const struct halide_filter_argument_t *arguments;

    /** The Target for which the filter was compiled. This is always
     * a canonical Target string (ie a product of Target::to_string). */
    const char *target;

    /** The function name of the filter. */
    const char *name;
};

/** halide_register_argv_and_metadata() is a **user-defined** function that
 * must be provided in order to use the registration.cc files produced
 * by Generators when the 'registration' output is requested. Each registration.cc
 * file provides a static initializer that calls this function with the given
 * filter's argv-call variant, its metadata, and (optionally) and additional
 * textual data that the build system chooses to tack on for its own purposes.
 * Note that this will be called at static-initializer time (i.e., before
 * main() is called), and in an unpredictable order. Note that extra_key_value_pairs
 * may be nullptr; if it's not null, it's expected to be a null-terminated list
 * of strings, with an even number of entries. */
void halide_register_argv_and_metadata(
    int (*filter_argv_call)(void **),
    const struct halide_filter_metadata_t *filter_metadata,
    const char *const *extra_key_value_pairs);

/** The functions below here are relevant for pipelines compiled with
 * the -profile target flag, which runs a sampling profiler thread
 * alongside the pipeline. */

/** Per-Func state tracked by the sampling profiler. */
struct HALIDE_ATTRIBUTE_ALIGN(8) halide_profiler_func_stats {
    /** Total time taken evaluating this Func (in nanoseconds). */
    uint64_t time;

    /** The current memory allocation of this Func. */
    uint64_t memory_current;

    /** The peak memory allocation of this Func. */
    uint64_t memory_peak;

    /** The total memory allocation of this Func. */
    uint64_t memory_total;

    /** The peak stack allocation of this Func's threads. */
    uint64_t stack_peak;

    /** The average number of thread pool worker threads active while computing this Func. */
    uint64_t active_threads_numerator, active_threads_denominator;

    /** The name of this Func. A global constant string. */
    const char *name;

    /** The total number of memory allocation of this Func. */
    int num_allocs;
};

/** Per-pipeline state tracked by the sampling profiler. These exist
 * in a linked list. */
struct HALIDE_ATTRIBUTE_ALIGN(8) halide_profiler_pipeline_stats {
    /** Total time spent inside this pipeline (in nanoseconds) */
    uint64_t time;

    /** The current memory allocation of funcs in this pipeline. */
    uint64_t memory_current;

    /** The peak memory allocation of funcs in this pipeline. */
    uint64_t memory_peak;

    /** The total memory allocation of funcs in this pipeline. */
    uint64_t memory_total;

    /** The average number of thread pool worker threads doing useful
     * work while computing this pipeline. */
    uint64_t active_threads_numerator, active_threads_denominator;

    /** The name of this pipeline. A global constant string. */
    const char *name;

    /** An array containing states for each Func in this pipeline. */
    struct halide_profiler_func_stats *funcs;

    /** The next pipeline_stats pointer. It's a void * because types
     * in the Halide runtime may not currently be recursive. */
    void *next;

    /** The number of funcs in this pipeline. */
    int num_funcs;

    /** An internal base id used to identify the funcs in this pipeline. */
    int first_func_id;

    /** The number of times this pipeline has been run. */
    int runs;

    /** The total number of samples taken inside of this pipeline. */
    int samples;

    /** The total number of memory allocation of funcs in this pipeline. */
    int num_allocs;
};

/** The global state of the profiler. */

struct halide_profiler_state {
    /** Guards access to the fields below. If not locked, the sampling
     * profiler thread is free to modify things below (including
     * reordering the linked list of pipeline stats). */
    struct halide_mutex lock;

    /** The amount of time the profiler thread sleeps between samples
     * in milliseconds. Defaults to 1 */
    int sleep_time;

    /** An internal id used for bookkeeping. */
    int first_free_id;

    /** The id of the current running Func. Set by the pipeline, read
     * periodically by the profiler thread. */
    int current_func;

    /** The number of threads currently doing work. */
    int active_threads;

    /** A linked list of stats gathered for each pipeline. */
    struct halide_profiler_pipeline_stats *pipelines;

    /** Retrieve remote profiler state. Used so that the sampling
     * profiler can follow along with execution that occurs elsewhere,
     * e.g. on a DSP. If null, it reads from the int above instead. */
    void (*get_remote_profiler_state)(int *func, int *active_workers);

    /** Sampling thread reference to be joined at shutdown. */
    struct halide_thread *sampling_thread;
};

/** Profiler func ids with special meanings. */
enum {
    /// current_func takes on this value when not inside Halide code
    halide_profiler_outside_of_halide = -1,
    /// Set current_func to this value to tell the profiling thread to
    /// halt. It will start up again next time you run a pipeline with
    /// profiling enabled.
    halide_profiler_please_stop = -2
};

/** Get a pointer to the global profiler state for programmatic
 * inspection. Lock it before using to pause the profiler. */
extern struct halide_profiler_state *halide_profiler_get_state();

/** Get a pointer to the pipeline state associated with pipeline_name.
 * This function grabs the global profiler state's lock on entry. */
extern struct halide_profiler_pipeline_stats *halide_profiler_get_pipeline_state(const char *pipeline_name);

/** Collects profiling information. Intended to be called from a timer
 * interrupt handler if timer based profiling is being used.
 *  State argument is acquired via halide_profiler_get_pipeline_state.
 * prev_t argument is the previous time and can be used to set a more
 * accurate time interval if desired. */
extern int halide_profiler_sample(struct halide_profiler_state *s, uint64_t *prev_t);

/** Reset profiler state cheaply. May leave threads running or some
 * memory allocated but all accumluated statistics are reset.
 * WARNING: Do NOT call this method while any halide pipeline is
 * running; halide_profiler_memory_allocate/free and
 * halide_profiler_stack_peak_update update the profiler pipeline's
 * state without grabbing the global profiler state's lock. */
extern void halide_profiler_reset();

/** Reset all profiler state.
 * WARNING: Do NOT call this method while any halide pipeline is
 * running; halide_profiler_memory_allocate/free and
 * halide_profiler_stack_peak_update update the profiler pipeline's
 * state without grabbing the global profiler state's lock. */
void halide_profiler_shutdown();

/** Print out timing statistics for everything run since the last
 * reset. Also happens at process exit. */
extern void halide_profiler_report(void *user_context);

/** For timer based profiling, this routine starts the timer chain running.
 * halide_get_profiler_state can be called to get the current timer interval.
 */
extern void halide_start_timer_chain();
/** These routines are called to temporarily disable and then reenable
 * timer interuppts for profiling */
//@{
extern void halide_disable_timer_interrupt();
extern void halide_enable_timer_interrupt();
//@}

/// \name "Float16" functions
/// These functions operate of bits (``uint16_t``) representing a half
/// precision floating point number (IEEE-754 2008 binary16).
//{@

/** Read bits representing a half precision floating point number and return
 *  the float that represents the same value */
extern float halide_float16_bits_to_float(uint16_t);

/** Read bits representing a half precision floating point number and return
 *  the double that represents the same value */
extern double halide_float16_bits_to_double(uint16_t);

// TODO: Conversion functions to half

//@}

// Allocating and freeing device memory is often very slow. The
// methods below give Halide's runtime permission to hold onto device
// memory to service future requests instead of returning it to the
// underlying device API. The API does not manage an allocation pool,
// all it does is provide access to a shared counter that acts as a
// limit on the unused memory not yet returned to the underlying
// device API. It makes callbacks to participants when memory needs to
// be released because the limit is about to be exceeded (either
// because the limit has been reduced, or because the memory owned by
// some participant becomes unused).

/** Tell Halide whether or not it is permitted to hold onto device
 * allocations to service future requests instead of returning them
 * eagerly to the underlying device API. Many device allocators are
 * quite slow, so it can be beneficial to set this to true. The
 * default value for now is false.
 *
 * Note that if enabled, the eviction policy is very simplistic. The
 * 32 most-recently used allocations are preserved, regardless of
 * their size. Additionally, if a call to cuMalloc results in an
 * out-of-memory error, the entire cache is flushed and the allocation
 * is retried. See https://github.com/halide/Halide/issues/4093
 *
 * If set to false, releases all unused device allocations back to the
 * underlying device APIs. For finer-grained control, see specific
 * methods in each device api runtime.
 *
 * Note that if the flag is set to true, this call *must* succeed and return
 * a value of halide_error_code_success (i.e., zero); if you replace
 * the implementation of this call in the runtime, you must honor this contract.
 * */
extern int halide_reuse_device_allocations(void *user_context, bool);

/** Determines whether on device_free the memory is returned
 * immediately to the device API, or placed on a free list for future
 * use. Override and switch based on the user_context for
 * finer-grained control. By default just returns the value most
 * recently set by the method above. */
extern bool halide_can_reuse_device_allocations(void *user_context);

struct halide_device_allocation_pool {
    int (*release_unused)(void *user_context);
    struct halide_device_allocation_pool *next;
};

/** Register a callback to be informed when
 * halide_reuse_device_allocations(false) is called, and all unused
 * device allocations must be released. The object passed should have
 * global lifetime, and its next field will be clobbered. */
extern void halide_register_device_allocation_pool(struct halide_device_allocation_pool *);

#ifdef __cplusplus
}  // End extern "C"
#endif

#if (__cplusplus >= 201103L || _MSVC_LANG >= 201103L)

namespace {

template<typename T>
struct check_is_pointer {
    static constexpr bool value = false;
};

template<typename T>
struct check_is_pointer<T *> {
    static constexpr bool value = true;
};

}  // namespace

/** Construct the halide equivalent of a C type */
template<typename T>
HALIDE_ALWAYS_INLINE constexpr halide_type_t halide_type_of() {
    // Create a compile-time error if T is not a pointer (without
    // using any includes - this code goes into the runtime).
    // (Note that we can't have uninitialized variables in constexpr functions,
    // even if those variables aren't used.)
    static_assert(check_is_pointer<T>::value, "Expected a pointer type here");
    return halide_type_t(halide_type_handle, 64);
}

#ifdef HALIDE_CPP_COMPILER_HAS_FLOAT16
template<>
HALIDE_ALWAYS_INLINE constexpr halide_type_t halide_type_of<_Float16>() {
    return halide_type_t(halide_type_float, 16);
}
#endif

template<>
HALIDE_ALWAYS_INLINE constexpr halide_type_t halide_type_of<float>() {
    return halide_type_t(halide_type_float, 32);
}

template<>
HALIDE_ALWAYS_INLINE constexpr halide_type_t halide_type_of<double>() {
    return halide_type_t(halide_type_float, 64);
}

template<>
HALIDE_ALWAYS_INLINE constexpr halide_type_t halide_type_of<bool>() {
    return halide_type_t(halide_type_uint, 1);
}

template<>
HALIDE_ALWAYS_INLINE constexpr halide_type_t halide_type_of<uint8_t>() {
    return halide_type_t(halide_type_uint, 8);
}

template<>
HALIDE_ALWAYS_INLINE constexpr halide_type_t halide_type_of<uint16_t>() {
    return halide_type_t(halide_type_uint, 16);
}

template<>
HALIDE_ALWAYS_INLINE constexpr halide_type_t halide_type_of<uint32_t>() {
    return halide_type_t(halide_type_uint, 32);
}

template<>
HALIDE_ALWAYS_INLINE constexpr halide_type_t halide_type_of<uint64_t>() {
    return halide_type_t(halide_type_uint, 64);
}

template<>
HALIDE_ALWAYS_INLINE constexpr halide_type_t halide_type_of<int8_t>() {
    return halide_type_t(halide_type_int, 8);
}

template<>
HALIDE_ALWAYS_INLINE constexpr halide_type_t halide_type_of<int16_t>() {
    return halide_type_t(halide_type_int, 16);
}

template<>
HALIDE_ALWAYS_INLINE constexpr halide_type_t halide_type_of<int32_t>() {
    return halide_type_t(halide_type_int, 32);
}

template<>
HALIDE_ALWAYS_INLINE constexpr halide_type_t halide_type_of<int64_t>() {
    return halide_type_t(halide_type_int, 64);
}

#ifndef COMPILING_HALIDE_RUNTIME

// These structures are used by `function_info_header` files
// (generated by passing `-e function_info_header` to a Generator).
// The generated files contain documentation on the proper usage.
namespace HalideFunctionInfo {

enum ArgumentKind { InputScalar = 0,
                    InputBuffer = 1,
                    OutputBuffer = 2 };

struct ArgumentInfo {
    std::string_view name;
    ArgumentKind kind;
    int32_t dimensions;  // always zero for scalar arguments
    halide_type_t type;
};

}  // namespace HalideFunctionInfo

#endif  // COMPILING_HALIDE_RUNTIME

#endif  // (__cplusplus >= 201103L || _MSVC_LANG >= 201103L)

#endif  // HALIDE_HALIDERUNTIME_H

#ifdef COMPILING_HALIDE_RUNTIME
#include "HalideRuntime.h"
#define HALIDE_BUFFER_HELPER_ATTRS WEAK_INLINE
#else
#define HALIDE_BUFFER_HELPER_ATTRS inline
#endif

// Structs are annoying to deal with from within Halide Stmts. These
// utility functions are for dealing with halide_buffer_t in that
// context. They are not intended for use outside of Halide code, and
// not exposed in HalideRuntime.h. The symbols are private to the
// module and should be inlined and then stripped. This blob of code
// also gets copy-pasted into C outputs.

extern "C" {

HALIDE_BUFFER_HELPER_ATTRS
int _halide_buffer_get_dimensions(const halide_buffer_t *buf) {
    return buf->dimensions;
}

HALIDE_BUFFER_HELPER_ATTRS
uint8_t *_halide_buffer_get_host(const halide_buffer_t *buf) {
    return buf->host;
}

HALIDE_BUFFER_HELPER_ATTRS
uint64_t _halide_buffer_get_device(const halide_buffer_t *buf) {
    return buf->device;
}

HALIDE_BUFFER_HELPER_ATTRS
const struct halide_device_interface_t *_halide_buffer_get_device_interface(const halide_buffer_t *buf) {
    return buf->device_interface;
}

HALIDE_BUFFER_HELPER_ATTRS
int _halide_buffer_get_min(const halide_buffer_t *buf, int d) {
    return buf->dim[d].min;
}

HALIDE_BUFFER_HELPER_ATTRS
int _halide_buffer_get_max(const halide_buffer_t *buf, int d) {
    return buf->dim[d].min + buf->dim[d].extent - 1;
}

HALIDE_BUFFER_HELPER_ATTRS
int _halide_buffer_get_extent(const halide_buffer_t *buf, int d) {
    return buf->dim[d].extent;
}

HALIDE_BUFFER_HELPER_ATTRS
int _halide_buffer_get_stride(const halide_buffer_t *buf, int d) {
    return buf->dim[d].stride;
}

HALIDE_BUFFER_HELPER_ATTRS
int _halide_buffer_set_host_dirty(halide_buffer_t *buf, bool val) {
    buf->set_host_dirty(val);
    return 0;
}

HALIDE_BUFFER_HELPER_ATTRS
int _halide_buffer_set_device_dirty(halide_buffer_t *buf, bool val) {
    buf->set_device_dirty(val);
    return 0;
}

HALIDE_BUFFER_HELPER_ATTRS
bool _halide_buffer_get_host_dirty(const halide_buffer_t *buf) {
    return buf->host_dirty();
}

HALIDE_BUFFER_HELPER_ATTRS
bool _halide_buffer_get_device_dirty(const halide_buffer_t *buf) {
    return buf->device_dirty();
}

HALIDE_BUFFER_HELPER_ATTRS
halide_dimension_t *_halide_buffer_get_shape(halide_buffer_t *buf) {
    return buf->dim;
}

HALIDE_BUFFER_HELPER_ATTRS
bool _halide_buffer_is_bounds_query(const halide_buffer_t *buf) {
    return buf->host == nullptr && buf->device == 0;
}

HALIDE_BUFFER_HELPER_ATTRS
uint32_t _halide_buffer_get_type(const halide_buffer_t *buf) {
    return buf->type.as_u32();
}

HALIDE_BUFFER_HELPER_ATTRS
halide_buffer_t *_halide_buffer_init(halide_buffer_t *dst,
                                     halide_dimension_t *dst_shape,
                                     void *host,
                                     uint64_t device,
                                     const halide_device_interface_t *device_interface,
                                     int type_code, int type_bits,
                                     int dimensions,
                                     halide_dimension_t *shape,
                                     uint64_t flags) {
    dst->host = (uint8_t *)host;
    dst->device = device;
    dst->device_interface = device_interface;
    dst->type.code = (halide_type_code_t)type_code;
    dst->type.bits = (uint8_t)type_bits;
    dst->type.lanes = 1;
    dst->dimensions = dimensions;
    dst->dim = dst_shape;
    if (shape != dst->dim) {
        for (int i = 0; i < dimensions; i++) {
            dst->dim[i] = shape[i];
        }
    }
    dst->flags = flags;
    return dst;
}

HALIDE_BUFFER_HELPER_ATTRS
halide_buffer_t *_halide_buffer_init_from_buffer(halide_buffer_t *dst,
                                                 halide_dimension_t *dst_shape,
                                                 const halide_buffer_t *src) {
    dst->host = src->host;
    dst->device = src->device;
    dst->device_interface = src->device_interface;
    dst->type = src->type;
    dst->dimensions = src->dimensions;
    dst->dim = dst_shape;
    dst->flags = src->flags;
    for (int i = 0; i < dst->dimensions; i++) {
        dst->dim[i] = src->dim[i];
    }
    return dst;
}

HALIDE_BUFFER_HELPER_ATTRS
halide_buffer_t *_halide_buffer_crop(void *user_context,
                                     halide_buffer_t *dst,
                                     halide_dimension_t *dst_shape,
                                     const halide_buffer_t *src,
                                     const int *min, const int *extent) {
    *dst = *src;
    dst->dim = dst_shape;
    int64_t offset = 0;
    for (int i = 0; i < dst->dimensions; i++) {
        dst->dim[i] = src->dim[i];
        dst->dim[i].min = min[i];
        dst->dim[i].extent = extent[i];
        offset += (min[i] - src->dim[i].min) * (int64_t)src->dim[i].stride;
    }
    if (dst->host) {
        dst->host += offset * src->type.bytes();
    }
    dst->device_interface = nullptr;
    dst->device = 0;
    if (src->device_interface) {
        if (src->device_interface->device_crop(user_context, src, dst) != 0) {
            // This is uncommon: either a runtime error, or a backend that
            // doesn't replace the default definition of device_crop. But it
            // does happen, so let's return a nullptr here, and require the caller
            // to check the result.
            return nullptr;
        }
    }
    return dst;
}

// Called on return from an extern stage where the output buffer was a
// crop of some other larger buffer. This happens for extern stages
// with distinct store_at/compute_at levels. Each call to the stage
// only fills in part of the buffer.
HALIDE_BUFFER_HELPER_ATTRS
int _halide_buffer_retire_crop_after_extern_stage(void *user_context,
                                                  void *obj) {
    int result;
    halide_buffer_t **buffers = (halide_buffer_t **)obj;
    halide_buffer_t *crop = buffers[0];
    halide_buffer_t *parent = buffers[1];

    if (crop->device) {
        if (!parent->device) {
            // We have been given a device allocation by the extern
            // stage. It only represents the cropped region, so we
            // can't just give it to the parent.
            if (crop->device_dirty()) {
                result = crop->device_interface->copy_to_host(user_context, crop);
                if (result != 0) {
                    return result;
                }
            }
            result = crop->device_interface->device_free(user_context, crop);
            if (result != 0) {
                return result;
            }
        } else {
            // We are a crop of an existing device allocation.
            if (crop->device_dirty()) {
                parent->set_device_dirty();
            }
            result = crop->device_interface->device_release_crop(user_context, crop);
            if (result != 0) {
                return result;
            }
        }
    }
    if (crop->host_dirty()) {
        parent->set_host_dirty();
    }
    return 0;
}

HALIDE_BUFFER_HELPER_ATTRS
int _halide_buffer_retire_crops_after_extern_stage(void *user_context,
                                                   void *obj) {
    halide_buffer_t **buffers = (halide_buffer_t **)obj;
    while (*buffers) {
        _halide_buffer_retire_crop_after_extern_stage(user_context, buffers);
        buffers += 2;
    }
    return 0;
}

HALIDE_BUFFER_HELPER_ATTRS
halide_buffer_t *_halide_buffer_set_bounds(halide_buffer_t *buf,
                                           int dim, int min, int extent) {
    // This can be called with the result of _halide_buffer_crop(), which
    // can return nullptr if an error occurs -- so don't crash, just propagate
    // the nullptr result to our caller.
    if (buf != nullptr) {
        buf->dim[dim].min = min;
        buf->dim[dim].extent = extent;
    }
    return buf;
}
}

#undef HALIDE_BUFFER_HELPER_ATTRS


#ifndef HALIDE_MUST_USE_RESULT
#ifdef __has_attribute
#if __has_attribute(nodiscard)
#define HALIDE_MUST_USE_RESULT [[nodiscard]]
#elif __has_attribute(warn_unused_result)
#define HALIDE_MUST_USE_RESULT __attribute__((warn_unused_result))
#else
#define HALIDE_MUST_USE_RESULT
#endif
#else
#define HALIDE_MUST_USE_RESULT
#endif
#endif

#ifndef HALIDE_FUNCTION_ATTRS
#define HALIDE_FUNCTION_ATTRS
#endif



#ifdef __cplusplus
extern "C" {
#endif

int32_t load_vert_idx(struct halide_buffer_t *, int32_t , struct halide_buffer_t *);
int32_t search_mid_faces(struct halide_buffer_t *, struct halide_buffer_t *, struct halide_buffer_t *, struct halide_buffer_t *, struct halide_buffer_t *, int32_t , struct halide_buffer_t *);

static HALIDE_FUNCTION_ATTRS
int merge_mesh_verts_par_for_patch_I_b_idx_s0_p_v2(void *__user_context, int32_t _patch_I_b_idx_s0_p_v2, uint8_t *_closure_arg) {
 void * const _ucon = const_cast<void *>(__user_context);
 halide_maybe_unused(_ucon);
 auto *_0 = (void *)(nullptr);
 float _1 = float_from_bits(0 /* 0 */);
 struct {
  void * f_0;
  void * f_1;
  int32_t f_2;
  int32_t f_3;
  int32_t f_4;
  int32_t f_5;
  int32_t f_6;
  int32_t f_7;
  float f_8;
  int32_t f_9;
 } s0 = {
  _0,
  _0,
  0,
  0,
  0,
  0,
  0,
  0,
  _1,
  0
 };
 auto *_2 = (&s0);
 auto _closure_prototype = _2;
 halide_maybe_unused(_closure_prototype);
 auto *_3 = ((decltype(_closure_prototype))_closure_arg)->f_0;
 auto _I_back_idx = _3;
 halide_maybe_unused(_I_back_idx);
 auto *_4 = ((decltype(_closure_prototype))_closure_arg)->f_1;
 auto _patch_I_b_idx = _4;
 halide_maybe_unused(_patch_I_b_idx);
 int32_t _5 = ((decltype(_closure_prototype))_closure_arg)->f_2;
 int32_t _6 = ((decltype(_closure_prototype))_closure_arg)->f_3;
 int32_t _7 = ((decltype(_closure_prototype))_closure_arg)->f_4;
 int32_t _8 = ((decltype(_closure_prototype))_closure_arg)->f_5;
 int32_t _9 = ((decltype(_closure_prototype))_closure_arg)->f_6;
 int32_t _10 = ((decltype(_closure_prototype))_closure_arg)->f_7;
 float _11 = ((decltype(_closure_prototype))_closure_arg)->f_8;
 int32_t _12 = ((decltype(_closure_prototype))_closure_arg)->f_9;
 int32_t _13 = _patch_I_b_idx_s0_p_v2 * 32;
 int32_t _14 = _13 + _9;
 int32_t _15 = _8 + -32;
 int32_t _16 = ::halide_cpp_min(_14, _15);
 int32_t _17 = _16 - _10;
 for (int _patch_I_b_idx_s0_p_v3 = 0; _patch_I_b_idx_s0_p_v3 < 0 + 32; _patch_I_b_idx_s0_p_v3++)
 {
  int32_t _18 = _patch_I_b_idx_s0_p_v3 + _17;
  int32_t _19 = _18 * 289;
  int32_t _20 = _patch_I_b_idx_s0_p_v3 + _16;
  for (int _patch_I_b_idx_s0_y_p = 0; _patch_I_b_idx_s0_y_p < 0 + 17; _patch_I_b_idx_s0_y_p++)
  {
   bool _21 = _20 < 0;
   int32_t _22 = (int32_t)(_21 ? -1 : 0);
   bool _23 = _6 == 0;
   int32_t _24 = (int32_t)(_23 ? -1 : 0);
   bool _25 = _6 < 0;
   int32_t _26 = (int32_t)(_25 ? -1 : 0);
   int32_t _27 = _20 * 16;
   int32_t _28 = _27 - _22;
   int32_t _29 = _6 | _24;
   int32_t _30 = _28 % _29;
   int32_t _31 = _6 ^ _26;
   int32_t _32 = ~_26;
   int32_t _33 = _31 + _32;
   int32_t _34 = _22 & _33;
   int32_t _35 = _30 + _34;
   int32_t _36 = ~_24;
   int32_t _37 = _35 & _36;
   float _38 = (float)(_20);
   float _39 = _38 / _11;
   float _40 = floor_f32(_39);
   float _41 = float_from_bits(1098907648 /* 16 */);
   float _42 = _40 * _41;
   int32_t _43 = (int32_t)(_42);
   int32_t _44 = _patch_I_b_idx_s0_y_p + _43;
   int32_t _45 = _7 + -1;
   int32_t _46 = ::halide_cpp_min(_44, _45);
   int32_t _47 = ::halide_cpp_max(_46, 0);
   int32_t _48 = _47 * _5;
   int32_t _49 = _48 - _12;
   int32_t _50 = _patch_I_b_idx_s0_y_p * 17;
   int32_t _51 = _50 + _19;
   for (int _patch_I_b_idx_s0_x_p = 0; _patch_I_b_idx_s0_x_p < 0 + 17; _patch_I_b_idx_s0_x_p++)
   {
    int32_t _52 = _patch_I_b_idx_s0_x_p + _37;
    int32_t _53 = _6 + -1;
    int32_t _54 = ::halide_cpp_min(_52, _53);
    int32_t _55 = ::halide_cpp_max(_54, 0);
    int32_t _56 = _55 + _49;
    int32_t _57 = ((int32_t *)_I_back_idx)[_56];
    int32_t _58 = _patch_I_b_idx_s0_x_p + _51;
    ((int32_t *)_patch_I_b_idx)[_58] = _57;
   } // for _patch_I_b_idx_s0_x_p
  } // for _patch_I_b_idx_s0_y_p
 } // for _patch_I_b_idx_s0_p_v3
 return 0;
}
static HALIDE_FUNCTION_ATTRS
int merge_mesh_verts_par_for_patch_I_b_l_s0_p_v2(void *__user_context, int32_t _patch_I_b_l_s0_p_v2, uint8_t *_closure_arg__1) {
 void * const _ucon = const_cast<void *>(__user_context);
 halide_maybe_unused(_ucon);
 auto *_59 = (void *)(nullptr);
 float _60 = float_from_bits(0 /* 0 */);
 struct {
  void * f_0;
  void * f_1;
  int32_t f_2;
  int32_t f_3;
  int32_t f_4;
  int32_t f_5;
  int32_t f_6;
  int32_t f_7;
  float f_8;
  int32_t f_9;
 } s1 = {
  _59,
  _59,
  0,
  0,
  0,
  0,
  0,
  0,
  _60,
  0
 };
 auto *_61 = (&s1);
 auto _closure_prototype__1 = _61;
 halide_maybe_unused(_closure_prototype__1);
 auto *_62 = ((decltype(_closure_prototype__1))_closure_arg__1)->f_0;
 auto _I_back_labels = _62;
 halide_maybe_unused(_I_back_labels);
 auto *_63 = ((decltype(_closure_prototype__1))_closure_arg__1)->f_1;
 auto _patch_I_b_l = _63;
 halide_maybe_unused(_patch_I_b_l);
 int32_t _64 = ((decltype(_closure_prototype__1))_closure_arg__1)->f_2;
 int32_t _65 = ((decltype(_closure_prototype__1))_closure_arg__1)->f_3;
 int32_t _66 = ((decltype(_closure_prototype__1))_closure_arg__1)->f_4;
 int32_t _67 = ((decltype(_closure_prototype__1))_closure_arg__1)->f_5;
 int32_t _68 = ((decltype(_closure_prototype__1))_closure_arg__1)->f_6;
 int32_t _69 = ((decltype(_closure_prototype__1))_closure_arg__1)->f_7;
 float _70 = ((decltype(_closure_prototype__1))_closure_arg__1)->f_8;
 int32_t _71 = ((decltype(_closure_prototype__1))_closure_arg__1)->f_9;
 int32_t _72 = _patch_I_b_l_s0_p_v2 * 32;
 int32_t _73 = _72 + _68;
 int32_t _74 = _67 + -32;
 int32_t _75 = ::halide_cpp_min(_73, _74);
 int32_t _76 = _75 - _69;
 for (int _patch_I_b_l_s0_p_v3 = 0; _patch_I_b_l_s0_p_v3 < 0 + 32; _patch_I_b_l_s0_p_v3++)
 {
  int32_t _77 = _patch_I_b_l_s0_p_v3 + _76;
  int32_t _78 = _77 * 289;
  int32_t _79 = _patch_I_b_l_s0_p_v3 + _75;
  for (int _patch_I_b_l_s0_y_p = 0; _patch_I_b_l_s0_y_p < 0 + 17; _patch_I_b_l_s0_y_p++)
  {
   bool _80 = _79 < 0;
   int32_t _81 = (int32_t)(_80 ? -1 : 0);
   bool _82 = _65 == 0;
   int32_t _83 = (int32_t)(_82 ? -1 : 0);
   bool _84 = _65 < 0;
   int32_t _85 = (int32_t)(_84 ? -1 : 0);
   int32_t _86 = _79 * 16;
   int32_t _87 = _86 - _81;
   int32_t _88 = _65 | _83;
   int32_t _89 = _87 % _88;
   int32_t _90 = _65 ^ _85;
   int32_t _91 = ~_85;
   int32_t _92 = _90 + _91;
   int32_t _93 = _81 & _92;
   int32_t _94 = _89 + _93;
   int32_t _95 = ~_83;
   int32_t _96 = _94 & _95;
   float _97 = (float)(_79);
   float _98 = _97 / _70;
   float _99 = floor_f32(_98);
   float _100 = float_from_bits(1098907648 /* 16 */);
   float _101 = _99 * _100;
   int32_t _102 = (int32_t)(_101);
   int32_t _103 = _patch_I_b_l_s0_y_p + _102;
   int32_t _104 = _66 + -1;
   int32_t _105 = ::halide_cpp_min(_103, _104);
   int32_t _106 = ::halide_cpp_max(_105, 0);
   int32_t _107 = _106 * _64;
   int32_t _108 = _107 - _71;
   int32_t _109 = _patch_I_b_l_s0_y_p * 17;
   int32_t _110 = _109 + _78;
   for (int _patch_I_b_l_s0_x_p = 0; _patch_I_b_l_s0_x_p < 0 + 17; _patch_I_b_l_s0_x_p++)
   {
    int32_t _111 = _patch_I_b_l_s0_x_p + _96;
    int32_t _112 = _65 + -1;
    int32_t _113 = ::halide_cpp_min(_111, _112);
    int32_t _114 = ::halide_cpp_max(_113, 0);
    int32_t _115 = _114 + _108;
    uint8_t _116 = ((uint8_t *)_I_back_labels)[_115];
    int32_t _117 = _patch_I_b_l_s0_x_p + _110;
    ((uint8_t *)_patch_I_b_l)[_117] = _116;
   } // for _patch_I_b_l_s0_x_p
  } // for _patch_I_b_l_s0_y_p
 } // for _patch_I_b_l_s0_p_v3
 return 0;
}
static HALIDE_FUNCTION_ATTRS
int merge_mesh_verts_par_for_patch_I_f_idx_s0_p_v2(void *__user_context, int32_t _patch_I_f_idx_s0_p_v2, uint8_t *_closure_arg__2) {
 void * const _ucon = const_cast<void *>(__user_context);
 halide_maybe_unused(_ucon);
 auto *_118 = (void *)(nullptr);
 float _119 = float_from_bits(0 /* 0 */);
 struct {
  void * f_0;
  void * f_1;
  int32_t f_2;
  int32_t f_3;
  int32_t f_4;
  int32_t f_5;
  int32_t f_6;
  int32_t f_7;
  float f_8;
  int32_t f_9;
 } s2 = {
  _118,
  _118,
  0,
  0,
  0,
  0,
  0,
  0,
  _119,
  0
 };
 auto *_120 = (&s2);
 auto _closure_prototype__2 = _120;
 halide_maybe_unused(_closure_prototype__2);
 auto *_121 = ((decltype(_closure_prototype__2))_closure_arg__2)->f_0;
 auto _I_fore_idx = _121;
 halide_maybe_unused(_I_fore_idx);
 auto *_122 = ((decltype(_closure_prototype__2))_closure_arg__2)->f_1;
 auto _patch_I_f_idx = _122;
 halide_maybe_unused(_patch_I_f_idx);
 int32_t _123 = ((decltype(_closure_prototype__2))_closure_arg__2)->f_2;
 int32_t _124 = ((decltype(_closure_prototype__2))_closure_arg__2)->f_3;
 int32_t _125 = ((decltype(_closure_prototype__2))_closure_arg__2)->f_4;
 int32_t _126 = ((decltype(_closure_prototype__2))_closure_arg__2)->f_5;
 int32_t _127 = ((decltype(_closure_prototype__2))_closure_arg__2)->f_6;
 int32_t _128 = ((decltype(_closure_prototype__2))_closure_arg__2)->f_7;
 float _129 = ((decltype(_closure_prototype__2))_closure_arg__2)->f_8;
 int32_t _130 = ((decltype(_closure_prototype__2))_closure_arg__2)->f_9;
 int32_t _131 = _patch_I_f_idx_s0_p_v2 * 32;
 int32_t _132 = _131 + _127;
 int32_t _133 = _126 + -32;
 int32_t _134 = ::halide_cpp_min(_132, _133);
 int32_t _135 = _134 - _128;
 for (int _patch_I_f_idx_s0_p_v3 = 0; _patch_I_f_idx_s0_p_v3 < 0 + 32; _patch_I_f_idx_s0_p_v3++)
 {
  int32_t _136 = _patch_I_f_idx_s0_p_v3 + _135;
  int32_t _137 = _136 * 289;
  int32_t _138 = _patch_I_f_idx_s0_p_v3 + _134;
  for (int _patch_I_f_idx_s0_y_p = 0; _patch_I_f_idx_s0_y_p < 0 + 17; _patch_I_f_idx_s0_y_p++)
  {
   bool _139 = _138 < 0;
   int32_t _140 = (int32_t)(_139 ? -1 : 0);
   bool _141 = _123 == 0;
   int32_t _142 = (int32_t)(_141 ? -1 : 0);
   bool _143 = _123 < 0;
   int32_t _144 = (int32_t)(_143 ? -1 : 0);
   int32_t _145 = _138 * 16;
   int32_t _146 = _145 - _140;
   int32_t _147 = _123 | _142;
   int32_t _148 = _146 % _147;
   int32_t _149 = _123 ^ _144;
   int32_t _150 = ~_144;
   int32_t _151 = _149 + _150;
   int32_t _152 = _140 & _151;
   int32_t _153 = _148 + _152;
   int32_t _154 = ~_142;
   int32_t _155 = _153 & _154;
   float _156 = (float)(_138);
   float _157 = _156 / _129;
   float _158 = floor_f32(_157);
   float _159 = float_from_bits(1098907648 /* 16 */);
   float _160 = _158 * _159;
   int32_t _161 = (int32_t)(_160);
   int32_t _162 = _patch_I_f_idx_s0_y_p + _161;
   int32_t _163 = _124 + -1;
   int32_t _164 = ::halide_cpp_min(_162, _163);
   int32_t _165 = ::halide_cpp_max(_164, 0);
   int32_t _166 = _165 * _125;
   int32_t _167 = _166 - _130;
   int32_t _168 = _patch_I_f_idx_s0_y_p * 17;
   int32_t _169 = _168 + _137;
   for (int _patch_I_f_idx_s0_x_p = 0; _patch_I_f_idx_s0_x_p < 0 + 17; _patch_I_f_idx_s0_x_p++)
   {
    int32_t _170 = _patch_I_f_idx_s0_x_p + _155;
    int32_t _171 = _123 + -1;
    int32_t _172 = ::halide_cpp_min(_170, _171);
    int32_t _173 = ::halide_cpp_max(_172, 0);
    int32_t _174 = _173 + _167;
    int32_t _175 = ((int32_t *)_I_fore_idx)[_174];
    int32_t _176 = _patch_I_f_idx_s0_x_p + _169;
    ((int32_t *)_patch_I_f_idx)[_176] = _175;
   } // for _patch_I_f_idx_s0_x_p
  } // for _patch_I_f_idx_s0_y_p
 } // for _patch_I_f_idx_s0_p_v3
 return 0;
}
static HALIDE_FUNCTION_ATTRS
int merge_mesh_verts_par_for_patch_f_mask_s0_p_v2(void *__user_context, int32_t _patch_f_mask_s0_p_v2, uint8_t *_closure_arg__3) {
 void * const _ucon = const_cast<void *>(__user_context);
 halide_maybe_unused(_ucon);
 auto *_177 = (void *)(nullptr);
 struct {
  void * f_0;
  void * f_1;
  int32_t f_2;
  int32_t f_3;
  int32_t f_4;
  int32_t f_5;
  int32_t f_6;
  int32_t f_7;
 } s3 = {
  _177,
  _177,
  0,
  0,
  0,
  0,
  0,
  0
 };
 auto *_178 = (&s3);
 auto _closure_prototype__3 = _178;
 halide_maybe_unused(_closure_prototype__3);
 auto *_179 = ((decltype(_closure_prototype__3))_closure_arg__3)->f_0;
 auto _BI_fore_mask = _179;
 halide_maybe_unused(_BI_fore_mask);
 auto *_180 = ((decltype(_closure_prototype__3))_closure_arg__3)->f_1;
 auto _patch_f_mask = _180;
 halide_maybe_unused(_patch_f_mask);
 int32_t _181 = ((decltype(_closure_prototype__3))_closure_arg__3)->f_2;
 int32_t _182 = ((decltype(_closure_prototype__3))_closure_arg__3)->f_3;
 int32_t _183 = ((decltype(_closure_prototype__3))_closure_arg__3)->f_4;
 int32_t _184 = ((decltype(_closure_prototype__3))_closure_arg__3)->f_5;
 int32_t _185 = ((decltype(_closure_prototype__3))_closure_arg__3)->f_6;
 int32_t _186 = ((decltype(_closure_prototype__3))_closure_arg__3)->f_7;
 int32_t _187 = _patch_f_mask_s0_p_v2 * 32;
 int32_t _188 = _187 + _184;
 int32_t _189 = _186 + -32;
 int32_t _190 = ::halide_cpp_min(_188, _189);
 int32_t _191 = _190 - _183;
 for (int _patch_f_mask_s0_p_v3 = 0; _patch_f_mask_s0_p_v3 < 0 + 32; _patch_f_mask_s0_p_v3++)
 {
  int32_t _192 = _patch_f_mask_s0_p_v3 + _190;
  bool _193 = _192 < 0;
  int32_t _194 = (int32_t)(_193 ? -1 : 0);
  bool _195 = _181 == 1;
  int32_t _196 = (int32_t)(_195 ? -1 : 0);
  bool _197 = _181 < 1;
  int32_t _198 = (int32_t)(_197 ? -1 : 0);
  int32_t _199 = _192 - _194;
  int32_t _200 = _181 + -1;
  int32_t _201 = _200 | _196;
  int32_t _202 = _199 % _201;
  int32_t _203 = _200 ^ _198;
  int32_t _204 = ~_198;
  int32_t _205 = _203 + _204;
  int32_t _206 = _194 & _205;
  int32_t _207 = _202 + _206;
  int32_t _208 = ~_196;
  int32_t _209 = _207 & _208;
  int32_t _210 = _181 - _196;
  int32_t _211 = _210 + -1;
  int32_t _212 = _199 / _211;
  int32_t _213 = _204 - _198;
  int32_t _214 = _194 & _213;
  int32_t _215 = _212 + _214;
  int32_t _216 = _215 & _208;
  int32_t _217 = _216 * _182;
  int32_t _218 = _217 - _185;
  int32_t _219 = _209 + _218;
  uint8_t _220 = ((uint8_t *)_BI_fore_mask)[_219];
  int32_t _221 = _patch_f_mask_s0_p_v3 + _191;
  ((uint8_t *)_patch_f_mask)[_221] = _220;
 } // for _patch_f_mask_s0_p_v3
 return 0;
}
static HALIDE_FUNCTION_ATTRS
int merge_mesh_verts_par_for_get_faces_s0_p_v2(void *__user_context, int32_t _get_faces_s0_p_v2, uint8_t *_closure_arg__4) {
 void * const _ucon = const_cast<void *>(__user_context);
 halide_maybe_unused(_ucon);
 auto *_222 = (struct halide_buffer_t *)(nullptr);
 struct {
  struct halide_buffer_t * f_0;
  struct halide_buffer_t * f_1;
  struct halide_buffer_t * f_2;
  struct halide_buffer_t * f_3;
  struct halide_buffer_t * f_4;
  struct halide_buffer_t * f_5;
  int32_t f_6;
  int32_t f_7;
  int32_t f_8;
  int32_t f_9;
  int32_t f_10;
  int32_t f_11;
  int32_t f_12;
  int32_t f_13;
  int32_t f_14;
  int32_t f_15;
  int32_t f_16;
  int32_t f_17;
 } s4 = {
  _222,
  _222,
  _222,
  _222,
  _222,
  _222,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
 };
 auto *_223 = (&s4);
 auto _closure_prototype__4 = _223;
 halide_maybe_unused(_closure_prototype__4);
 auto *_224 = ((decltype(_closure_prototype__4))_closure_arg__4)->f_0;
 auto _get_faces_buffer = _224;
 halide_maybe_unused(_get_faces_buffer);
 auto *_225 = ((decltype(_closure_prototype__4))_closure_arg__4)->f_1;
 auto _patch_I_b_idx_buffer = _225;
 halide_maybe_unused(_patch_I_b_idx_buffer);
 auto *_226 = ((decltype(_closure_prototype__4))_closure_arg__4)->f_2;
 auto _patch_I_b_l_buffer = _226;
 halide_maybe_unused(_patch_I_b_l_buffer);
 auto *_227 = ((decltype(_closure_prototype__4))_closure_arg__4)->f_3;
 auto _patch_I_f_idx_buffer = _227;
 halide_maybe_unused(_patch_I_f_idx_buffer);
 auto *_228 = ((decltype(_closure_prototype__4))_closure_arg__4)->f_4;
 auto _patch_f_mask_buffer = _228;
 halide_maybe_unused(_patch_f_mask_buffer);
 auto *_229 = ((decltype(_closure_prototype__4))_closure_arg__4)->f_5;
 auto _patch_vidx_buffer = _229;
 halide_maybe_unused(_patch_vidx_buffer);
 int32_t _230 = ((decltype(_closure_prototype__4))_closure_arg__4)->f_6;
 int32_t _231 = ((decltype(_closure_prototype__4))_closure_arg__4)->f_7;
 int32_t _232 = ((decltype(_closure_prototype__4))_closure_arg__4)->f_8;
 int32_t _233 = ((decltype(_closure_prototype__4))_closure_arg__4)->f_9;
 int32_t _234 = ((decltype(_closure_prototype__4))_closure_arg__4)->f_10;
 int32_t _235 = ((decltype(_closure_prototype__4))_closure_arg__4)->f_11;
 int32_t _236 = ((decltype(_closure_prototype__4))_closure_arg__4)->f_12;
 int32_t _237 = ((decltype(_closure_prototype__4))_closure_arg__4)->f_13;
 int32_t _238 = ((decltype(_closure_prototype__4))_closure_arg__4)->f_14;
 int32_t _239 = ((decltype(_closure_prototype__4))_closure_arg__4)->f_15;
 int32_t _240 = ((decltype(_closure_prototype__4))_closure_arg__4)->f_16;
 int32_t _241 = ((decltype(_closure_prototype__4))_closure_arg__4)->f_17;
 bool _242 = _get_faces_s0_p_v2 < _238;
 if (_242)
 {
  halide_buffer_t b2;
  auto *_243 = &b2;
  uint64_t a0[6];
  auto *_244 = (struct halide_dimension_t *)(&a0);
  int32_t _245 = _get_faces_s0_p_v2 * 32;
  int32_t _246 = _245 + _233;
  struct {
   int32_t f_0;
   int32_t f_1;
   int32_t f_2;
  } s5 = {
   _230,
   _231,
   _246
  };
  auto *_247 = (int32_t const *)(&s5);
  struct {
   int32_t f_0;
   int32_t f_1;
   int32_t f_2;
  } s6 = {
   _234,
   _235,
   32
  };
  auto *_248 = (int32_t const *)(&s6);
  auto *_249 = _halide_buffer_crop(_ucon, _243, _244, _get_faces_buffer, _247, _248);
  auto _get_faces_0_tmp_buffer = _249;
  halide_maybe_unused(_get_faces_0_tmp_buffer);
  halide_buffer_t b3;
  auto *_250 = &b3;
  uint64_t a1[2];
  auto *_251 = (struct halide_dimension_t *)(&a1);
  struct {
   int32_t f_0;
  } s7 = {
   _237
  };
  auto *_252 = (int32_t const *)(&s7);
  int32_t _253 = _239 + 1;
  struct {
   int32_t f_0;
  } s8 = {
   _253
  };
  auto *_254 = (int32_t const *)(&s8);
  auto *_255 = _halide_buffer_crop(_ucon, _250, _251, _patch_vidx_buffer, _252, _254);
  auto _patch_vidx_0_tmp_buffer = _255;
  halide_maybe_unused(_patch_vidx_0_tmp_buffer);
  halide_buffer_t b4;
  auto *_256 = &b4;
  uint64_t a2[2];
  auto *_257 = (struct halide_dimension_t *)(&a2);
  struct {
   int32_t f_0;
  } s9 = {
   _236
  };
  auto *_258 = (int32_t const *)(&s9);
  struct {
   int32_t f_0;
  } s10 = {
   _240
  };
  auto *_259 = (int32_t const *)(&s10);
  auto *_260 = _halide_buffer_crop(_ucon, _256, _257, _patch_f_mask_buffer, _258, _259);
  auto _patch_f_mask_0_tmp_buffer = _260;
  halide_maybe_unused(_patch_f_mask_0_tmp_buffer);
  halide_buffer_t b5;
  auto *_261 = &b5;
  uint64_t a3[6];
  auto *_262 = (struct halide_dimension_t *)(&a3);
  struct {
   int32_t f_0;
   int32_t f_1;
   int32_t f_2;
  } s11 = {
   0,
   0,
   _233
  };
  auto *_263 = (int32_t const *)(&s11);
  struct {
   int32_t f_0;
   int32_t f_1;
   int32_t f_2;
  } s12 = {
   17,
   17,
   _241
  };
  auto *_264 = (int32_t const *)(&s12);
  auto *_265 = _halide_buffer_crop(_ucon, _261, _262, _patch_I_b_l_buffer, _263, _264);
  auto _patch_I_b_l_0_tmp_buffer = _265;
  halide_maybe_unused(_patch_I_b_l_0_tmp_buffer);
  halide_buffer_t b6;
  auto *_266 = &b6;
  uint64_t a4[6];
  auto *_267 = (struct halide_dimension_t *)(&a4);
  struct {
   int32_t f_0;
   int32_t f_1;
   int32_t f_2;
  } s13 = {
   0,
   0,
   _233
  };
  auto *_268 = (int32_t const *)(&s13);
  struct {
   int32_t f_0;
   int32_t f_1;
   int32_t f_2;
  } s14 = {
   17,
   17,
   _241
  };
  auto *_269 = (int32_t const *)(&s14);
  auto *_270 = _halide_buffer_crop(_ucon, _266, _267, _patch_I_b_idx_buffer, _268, _269);
  auto _patch_I_b_idx_0_tmp_buffer = _270;
  halide_maybe_unused(_patch_I_b_idx_0_tmp_buffer);
  halide_buffer_t b7;
  auto *_271 = &b7;
  uint64_t a5[6];
  auto *_272 = (struct halide_dimension_t *)(&a5);
  struct {
   int32_t f_0;
   int32_t f_1;
   int32_t f_2;
  } s15 = {
   0,
   0,
   _233
  };
  auto *_273 = (int32_t const *)(&s15);
  struct {
   int32_t f_0;
   int32_t f_1;
   int32_t f_2;
  } s16 = {
   17,
   17,
   _241
  };
  auto *_274 = (int32_t const *)(&s16);
  auto *_275 = _halide_buffer_crop(_ucon, _271, _272, _patch_I_f_idx_buffer, _273, _274);
  auto _patch_I_f_idx_0_tmp_buffer = _275;
  halide_maybe_unused(_patch_I_f_idx_0_tmp_buffer);
  uint64_t _276 = (uint64_t)(_patch_I_f_idx_0_tmp_buffer);
  uint64_t _277 = (uint64_t)(0ull);
  bool _278 = _276 != _277;
  if (!_278)
  {
   int32_t _279 = halide_error_device_crop_failed(_ucon);
   return _279;
  }
  uint64_t _280 = (uint64_t)(_patch_I_b_idx_0_tmp_buffer);
  uint64_t _281 = (uint64_t)(0ull);
  bool _282 = _280 != _281;
  if (!_282)
  {
   int32_t _283 = halide_error_device_crop_failed(_ucon);
   return _283;
  }
  uint64_t _284 = (uint64_t)(_patch_I_b_l_0_tmp_buffer);
  uint64_t _285 = (uint64_t)(0ull);
  bool _286 = _284 != _285;
  if (!_286)
  {
   int32_t _287 = halide_error_device_crop_failed(_ucon);
   return _287;
  }
  uint64_t _288 = (uint64_t)(_patch_f_mask_0_tmp_buffer);
  uint64_t _289 = (uint64_t)(0ull);
  bool _290 = _288 != _289;
  if (!_290)
  {
   int32_t _291 = halide_error_device_crop_failed(_ucon);
   return _291;
  }
  uint64_t _292 = (uint64_t)(_patch_vidx_0_tmp_buffer);
  uint64_t _293 = (uint64_t)(0ull);
  bool _294 = _292 != _293;
  if (!_294)
  {
   int32_t _295 = halide_error_device_crop_failed(_ucon);
   return _295;
  }
  uint64_t _296 = (uint64_t)(_get_faces_0_tmp_buffer);
  uint64_t _297 = (uint64_t)(0ull);
  bool _298 = _296 != _297;
  if (!_298)
  {
   int32_t _299 = halide_error_device_crop_failed(_ucon);
   return _299;
  }
  int32_t _300 = search_mid_faces(_patch_I_f_idx_0_tmp_buffer, _patch_I_b_idx_0_tmp_buffer, _patch_I_b_l_0_tmp_buffer, _patch_f_mask_0_tmp_buffer, _patch_vidx_0_tmp_buffer, 16, _get_faces_0_tmp_buffer);
  auto *_301 = (struct halide_buffer_t *)(nullptr);
  struct {
   struct halide_buffer_t * f_0;
   struct halide_buffer_t * f_1;
   struct halide_buffer_t * f_2;
   struct halide_buffer_t * f_3;
   struct halide_buffer_t * f_4;
   struct halide_buffer_t * f_5;
   struct halide_buffer_t * f_6;
   struct halide_buffer_t * f_7;
   struct halide_buffer_t * f_8;
   struct halide_buffer_t * f_9;
   struct halide_buffer_t * f_10;
   struct halide_buffer_t * f_11;
   struct halide_buffer_t * f_12;
  } s17 = {
   _patch_I_f_idx_0_tmp_buffer,
   _patch_I_f_idx_buffer,
   _patch_I_b_idx_0_tmp_buffer,
   _patch_I_b_idx_buffer,
   _patch_I_b_l_0_tmp_buffer,
   _patch_I_b_l_buffer,
   _patch_f_mask_0_tmp_buffer,
   _patch_f_mask_buffer,
   _patch_vidx_0_tmp_buffer,
   _patch_vidx_buffer,
   _get_faces_0_tmp_buffer,
   _get_faces_buffer,
   _301
  };
  auto *_302 = (&s17);
  int32_t _303 = _halide_buffer_retire_crops_after_extern_stage(_ucon, _302);
  halide_maybe_unused(_303);
  bool _304 = _300 == 0;
  if (!_304)
  {
   int32_t _305 = halide_error_extern_stage_failed(_ucon, "search_mid_faces", _300);
   return _305;
  }
 } // if _242
 else
 {
  halide_buffer_t b8;
  auto *_306 = &b8;
  uint64_t a6[6];
  auto *_307 = (struct halide_dimension_t *)(&a6);
  int32_t _308 = _232 + -32;
  struct {
   int32_t f_0;
   int32_t f_1;
   int32_t f_2;
  } s18 = {
   _230,
   _231,
   _308
  };
  auto *_309 = (int32_t const *)(&s18);
  struct {
   int32_t f_0;
   int32_t f_1;
   int32_t f_2;
  } s19 = {
   _234,
   _235,
   32
  };
  auto *_310 = (int32_t const *)(&s19);
  auto *_311 = _halide_buffer_crop(_ucon, _306, _307, _get_faces_buffer, _309, _310);
  auto _get_faces_0_tmp_buffer = _311;
  halide_maybe_unused(_get_faces_0_tmp_buffer);
  halide_buffer_t b9;
  auto *_312 = &b9;
  uint64_t a7[2];
  auto *_313 = (struct halide_dimension_t *)(&a7);
  struct {
   int32_t f_0;
  } s20 = {
   _237
  };
  auto *_314 = (int32_t const *)(&s20);
  int32_t _315 = _239 + 1;
  struct {
   int32_t f_0;
  } s21 = {
   _315
  };
  auto *_316 = (int32_t const *)(&s21);
  auto *_317 = _halide_buffer_crop(_ucon, _312, _313, _patch_vidx_buffer, _314, _316);
  auto _patch_vidx_0_tmp_buffer = _317;
  halide_maybe_unused(_patch_vidx_0_tmp_buffer);
  halide_buffer_t b10;
  auto *_318 = &b10;
  uint64_t a8[2];
  auto *_319 = (struct halide_dimension_t *)(&a8);
  struct {
   int32_t f_0;
  } s22 = {
   _236
  };
  auto *_320 = (int32_t const *)(&s22);
  struct {
   int32_t f_0;
  } s23 = {
   _240
  };
  auto *_321 = (int32_t const *)(&s23);
  auto *_322 = _halide_buffer_crop(_ucon, _318, _319, _patch_f_mask_buffer, _320, _321);
  auto _patch_f_mask_0_tmp_buffer = _322;
  halide_maybe_unused(_patch_f_mask_0_tmp_buffer);
  halide_buffer_t b11;
  auto *_323 = &b11;
  uint64_t a9[6];
  auto *_324 = (struct halide_dimension_t *)(&a9);
  struct {
   int32_t f_0;
   int32_t f_1;
   int32_t f_2;
  } s24 = {
   0,
   0,
   _233
  };
  auto *_325 = (int32_t const *)(&s24);
  struct {
   int32_t f_0;
   int32_t f_1;
   int32_t f_2;
  } s25 = {
   17,
   17,
   _241
  };
  auto *_326 = (int32_t const *)(&s25);
  auto *_327 = _halide_buffer_crop(_ucon, _323, _324, _patch_I_b_l_buffer, _325, _326);
  auto _patch_I_b_l_0_tmp_buffer = _327;
  halide_maybe_unused(_patch_I_b_l_0_tmp_buffer);
  halide_buffer_t b12;
  auto *_328 = &b12;
  uint64_t a10[6];
  auto *_329 = (struct halide_dimension_t *)(&a10);
  struct {
   int32_t f_0;
   int32_t f_1;
   int32_t f_2;
  } s26 = {
   0,
   0,
   _233
  };
  auto *_330 = (int32_t const *)(&s26);
  struct {
   int32_t f_0;
   int32_t f_1;
   int32_t f_2;
  } s27 = {
   17,
   17,
   _241
  };
  auto *_331 = (int32_t const *)(&s27);
  auto *_332 = _halide_buffer_crop(_ucon, _328, _329, _patch_I_b_idx_buffer, _330, _331);
  auto _patch_I_b_idx_0_tmp_buffer = _332;
  halide_maybe_unused(_patch_I_b_idx_0_tmp_buffer);
  halide_buffer_t b13;
  auto *_333 = &b13;
  uint64_t a11[6];
  auto *_334 = (struct halide_dimension_t *)(&a11);
  struct {
   int32_t f_0;
   int32_t f_1;
   int32_t f_2;
  } s28 = {
   0,
   0,
   _233
  };
  auto *_335 = (int32_t const *)(&s28);
  struct {
   int32_t f_0;
   int32_t f_1;
   int32_t f_2;
  } s29 = {
   17,
   17,
   _241
  };
  auto *_336 = (int32_t const *)(&s29);
  auto *_337 = _halide_buffer_crop(_ucon, _333, _334, _patch_I_f_idx_buffer, _335, _336);
  auto _patch_I_f_idx_0_tmp_buffer = _337;
  halide_maybe_unused(_patch_I_f_idx_0_tmp_buffer);
  uint64_t _338 = (uint64_t)(_patch_I_f_idx_0_tmp_buffer);
  uint64_t _339 = (uint64_t)(0ull);
  bool _340 = _338 != _339;
  if (!_340)
  {
   int32_t _341 = halide_error_device_crop_failed(_ucon);
   return _341;
  }
  uint64_t _342 = (uint64_t)(_patch_I_b_idx_0_tmp_buffer);
  uint64_t _343 = (uint64_t)(0ull);
  bool _344 = _342 != _343;
  if (!_344)
  {
   int32_t _345 = halide_error_device_crop_failed(_ucon);
   return _345;
  }
  uint64_t _346 = (uint64_t)(_patch_I_b_l_0_tmp_buffer);
  uint64_t _347 = (uint64_t)(0ull);
  bool _348 = _346 != _347;
  if (!_348)
  {
   int32_t _349 = halide_error_device_crop_failed(_ucon);
   return _349;
  }
  uint64_t _350 = (uint64_t)(_patch_f_mask_0_tmp_buffer);
  uint64_t _351 = (uint64_t)(0ull);
  bool _352 = _350 != _351;
  if (!_352)
  {
   int32_t _353 = halide_error_device_crop_failed(_ucon);
   return _353;
  }
  uint64_t _354 = (uint64_t)(_patch_vidx_0_tmp_buffer);
  uint64_t _355 = (uint64_t)(0ull);
  bool _356 = _354 != _355;
  if (!_356)
  {
   int32_t _357 = halide_error_device_crop_failed(_ucon);
   return _357;
  }
  uint64_t _358 = (uint64_t)(_get_faces_0_tmp_buffer);
  uint64_t _359 = (uint64_t)(0ull);
  bool _360 = _358 != _359;
  if (!_360)
  {
   int32_t _361 = halide_error_device_crop_failed(_ucon);
   return _361;
  }
  int32_t _362 = search_mid_faces(_patch_I_f_idx_0_tmp_buffer, _patch_I_b_idx_0_tmp_buffer, _patch_I_b_l_0_tmp_buffer, _patch_f_mask_0_tmp_buffer, _patch_vidx_0_tmp_buffer, 16, _get_faces_0_tmp_buffer);
  auto *_363 = (struct halide_buffer_t *)(nullptr);
  struct {
   struct halide_buffer_t * f_0;
   struct halide_buffer_t * f_1;
   struct halide_buffer_t * f_2;
   struct halide_buffer_t * f_3;
   struct halide_buffer_t * f_4;
   struct halide_buffer_t * f_5;
   struct halide_buffer_t * f_6;
   struct halide_buffer_t * f_7;
   struct halide_buffer_t * f_8;
   struct halide_buffer_t * f_9;
   struct halide_buffer_t * f_10;
   struct halide_buffer_t * f_11;
   struct halide_buffer_t * f_12;
  } s30 = {
   _patch_I_f_idx_0_tmp_buffer,
   _patch_I_f_idx_buffer,
   _patch_I_b_idx_0_tmp_buffer,
   _patch_I_b_idx_buffer,
   _patch_I_b_l_0_tmp_buffer,
   _patch_I_b_l_buffer,
   _patch_f_mask_0_tmp_buffer,
   _patch_f_mask_buffer,
   _patch_vidx_0_tmp_buffer,
   _patch_vidx_buffer,
   _get_faces_0_tmp_buffer,
   _get_faces_buffer,
   _363
  };
  auto *_364 = (&s30);
  int32_t _365 = _halide_buffer_retire_crops_after_extern_stage(_ucon, _364);
  halide_maybe_unused(_365);
  bool _366 = _362 == 0;
  if (!_366)
  {
   int32_t _367 = halide_error_extern_stage_failed(_ucon, "search_mid_faces", _362);
   return _367;
  }
 } // if _242 else
 return 0;
}
static HALIDE_FUNCTION_ATTRS
int merge_mesh_verts_par_for_P_out_faces_s0_p_v2(void *__user_context, int32_t _P_out_faces_s0_p_v2, uint8_t *_closure_arg__5) {
 void * const _ucon = const_cast<void *>(__user_context);
 halide_maybe_unused(_ucon);
 auto *_368 = (void *)(nullptr);
 struct {
  void * f_0;
  void * f_1;
  int32_t f_2;
  int32_t f_3;
  int32_t f_4;
  int32_t f_5;
  int32_t f_6;
  int32_t f_7;
  int32_t f_8;
  int32_t f_9;
  int32_t f_10;
 } s31 = {
  _368,
  _368,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
 };
 auto *_369 = (&s31);
 auto _closure_prototype__5 = _369;
 halide_maybe_unused(_closure_prototype__5);
 auto *_370 = ((decltype(_closure_prototype__5))_closure_arg__5)->f_0;
 auto _P_out_faces = _370;
 halide_maybe_unused(_P_out_faces);
 auto *_371 = ((decltype(_closure_prototype__5))_closure_arg__5)->f_1;
 auto _get_faces = _371;
 halide_maybe_unused(_get_faces);
 int32_t _372 = ((decltype(_closure_prototype__5))_closure_arg__5)->f_2;
 int32_t _373 = ((decltype(_closure_prototype__5))_closure_arg__5)->f_3;
 int32_t _374 = ((decltype(_closure_prototype__5))_closure_arg__5)->f_4;
 int32_t _375 = ((decltype(_closure_prototype__5))_closure_arg__5)->f_5;
 int32_t _376 = ((decltype(_closure_prototype__5))_closure_arg__5)->f_6;
 int32_t _377 = ((decltype(_closure_prototype__5))_closure_arg__5)->f_7;
 int32_t _378 = ((decltype(_closure_prototype__5))_closure_arg__5)->f_8;
 int32_t _379 = ((decltype(_closure_prototype__5))_closure_arg__5)->f_9;
 int32_t _380 = ((decltype(_closure_prototype__5))_closure_arg__5)->f_10;
 int32_t _381 = _P_out_faces_s0_p_v2 * 32;
 int32_t _382 = _381 + _374;
 int32_t _383 = _373 + -32;
 int32_t _384 = ::halide_cpp_min(_382, _383);
 int32_t _385 = _384 - _379;
 for (int _P_out_faces_s0_p_v3 = 0; _P_out_faces_s0_p_v3 < 0 + 32; _P_out_faces_s0_p_v3++)
 {
  int32_t _386 = _377 * _378;
  int32_t _387 = _P_out_faces_s0_p_v3 + _385;
  int32_t _388 = _386 * _387;
  int32_t _389 = _P_out_faces_s0_p_v3 + _384;
  int32_t _390 = _389 * _376;
  int32_t _391 = _390 + _380;
  for (int _P_out_faces_s0_f_rebased = 0; _P_out_faces_s0_f_rebased < 0 + _378; _P_out_faces_s0_f_rebased++)
  {
   int32_t _392 = _372 + _P_out_faces_s0_f_rebased;
   int32_t _393 = _392 * _375;
   int32_t _394 = _393 + _391;
   int32_t _395 = _P_out_faces_s0_f_rebased * _377;
   int32_t _396 = _395 + _388;
   for (int _P_out_faces_s0_c_rebased = 0; _P_out_faces_s0_c_rebased < 0 + _377; _P_out_faces_s0_c_rebased++)
   {
    int32_t _397 = _P_out_faces_s0_c_rebased + _396;
    int32_t _398 = ((int32_t *)_get_faces)[_397];
    int32_t _399 = _P_out_faces_s0_c_rebased + _394;
    ((int32_t *)_P_out_faces)[_399] = _398;
   } // for _P_out_faces_s0_c_rebased
  } // for _P_out_faces_s0_f_rebased
 } // for _P_out_faces_s0_p_v3
 return 0;
}
static HALIDE_FUNCTION_ATTRS
int merge_mesh_verts_par_for_P_N_faces_s0_p_v2(void *__user_context, int32_t _P_N_faces_s0_p_v2, uint8_t *_closure_arg__6) {
 void * const _ucon = const_cast<void *>(__user_context);
 halide_maybe_unused(_ucon);
 auto *_400 = (void *)(nullptr);
 struct {
  void * f_0;
  void * f_1;
  int32_t f_2;
  int32_t f_3;
  int32_t f_4;
  int32_t f_5;
  int32_t f_6;
 } s32 = {
  _400,
  _400,
  0,
  0,
  0,
  0,
  0
 };
 auto *_401 = (&s32);
 auto _closure_prototype__6 = _401;
 halide_maybe_unused(_closure_prototype__6);
 auto *_402 = ((decltype(_closure_prototype__6))_closure_arg__6)->f_0;
 auto _P_N_faces = _402;
 halide_maybe_unused(_P_N_faces);
 auto *_403 = ((decltype(_closure_prototype__6))_closure_arg__6)->f_1;
 auto _P_out_faces = _403;
 halide_maybe_unused(_P_out_faces);
 int32_t _404 = ((decltype(_closure_prototype__6))_closure_arg__6)->f_2;
 int32_t _405 = ((decltype(_closure_prototype__6))_closure_arg__6)->f_3;
 int32_t _406 = ((decltype(_closure_prototype__6))_closure_arg__6)->f_4;
 int32_t _407 = ((decltype(_closure_prototype__6))_closure_arg__6)->f_5;
 int32_t _408 = ((decltype(_closure_prototype__6))_closure_arg__6)->f_6;
 int32_t _409 = _P_N_faces_s0_p_v2 * 32;
 int32_t _410 = _404 + -32;
 int32_t _411 = ::halide_cpp_min(_409, _410);
 int32_t _412 = _405 + _411;
 for (int _P_N_faces_s0_p_v3 = 0; _P_N_faces_s0_p_v3 < 0 + 32; _P_N_faces_s0_p_v3++)
 {
  {
   int32_t _sum[1];
   // produce sum
   _sum[0] = 0;
   int32_t _413 = _P_N_faces_s0_p_v3 + _412;
   int32_t _414 = _413 * _407;
   for (int _sum_s1_r42__x = 0; _sum_s1_r42__x < 0 + 289; _sum_s1_r42__x++)
   {
    int32_t _415 = _406 * _sum_s1_r42__x;
    int32_t _416 = _415 + _414;
    int32_t _417 = _416 - _408;
    int32_t _418 = _sum[0];
    int32_t _419 = _417 + 2;
    int32_t _420 = ((int32_t *)_P_out_faces)[_419];
    int32_t _421 = _414 - _408;
    int32_t _422 = _415 + _421;
    int32_t _423 = ((int32_t *)_P_out_faces)[_422];
    int32_t _424 = _417 + 1;
    int32_t _425 = ((int32_t *)_P_out_faces)[_424];
    int32_t _426 = ::halide_cpp_min(_423, _425);
    int32_t _427 = ::halide_cpp_min(_420, _426);
    bool _428 = _427 < 0;
    int32_t _429 = (int32_t)(_428 ? 0 : 1);
    int32_t _430 = _418 + _429;
    _sum[0] = _430;
   } // for _sum_s1_r42__x
   // consume sum
   int32_t _431 = _sum[0];
   int32_t _432 = _P_N_faces_s0_p_v3 + _411;
   ((int32_t *)_P_N_faces)[_432] = _431;
  } // alloc _sum
 } // for _P_N_faces_s0_p_v3
 return 0;
}
static HALIDE_FUNCTION_ATTRS
int merge_mesh_verts_par_for_I_out_vidx_s0_y_rebased(void *__user_context, int32_t _I_out_vidx_s0_y_rebased, uint8_t *_closure_arg__7) {
 void * const _ucon = const_cast<void *>(__user_context);
 halide_maybe_unused(_ucon);
 auto *_433 = (void *)(nullptr);
 struct {
  void * f_0;
  void * f_1;
  void * f_2;
  int32_t f_3;
  int32_t f_4;
  int32_t f_5;
  int32_t f_6;
  int32_t f_7;
  int32_t f_8;
  int32_t f_9;
  int32_t f_10;
  int32_t f_11;
 } s33 = {
  _433,
  _433,
  _433,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
 };
 auto *_434 = (&s33);
 auto _closure_prototype__7 = _434;
 halide_maybe_unused(_closure_prototype__7);
 auto *_435 = ((decltype(_closure_prototype__7))_closure_arg__7)->f_0;
 auto _BI_fore_mask = _435;
 halide_maybe_unused(_BI_fore_mask);
 auto *_436 = ((decltype(_closure_prototype__7))_closure_arg__7)->f_1;
 auto _I_out_vidx = _436;
 halide_maybe_unused(_I_out_vidx);
 auto *_437 = ((decltype(_closure_prototype__7))_closure_arg__7)->f_2;
 auto _patch_vidx = _437;
 halide_maybe_unused(_patch_vidx);
 int32_t _438 = ((decltype(_closure_prototype__7))_closure_arg__7)->f_3;
 int32_t _439 = ((decltype(_closure_prototype__7))_closure_arg__7)->f_4;
 int32_t _440 = ((decltype(_closure_prototype__7))_closure_arg__7)->f_5;
 int32_t _441 = ((decltype(_closure_prototype__7))_closure_arg__7)->f_6;
 int32_t _442 = ((decltype(_closure_prototype__7))_closure_arg__7)->f_7;
 int32_t _443 = ((decltype(_closure_prototype__7))_closure_arg__7)->f_8;
 int32_t _444 = ((decltype(_closure_prototype__7))_closure_arg__7)->f_9;
 int32_t _445 = ((decltype(_closure_prototype__7))_closure_arg__7)->f_10;
 int32_t _446 = ((decltype(_closure_prototype__7))_closure_arg__7)->f_11;
 int32_t _447 = _442 + _I_out_vidx_s0_y_rebased;
 float _448 = (float)(_447);
 float _449 = float_from_bits(1031798784 /* 0.0625 */);
 float _450 = _448 * _449;
 float _451 = floor_f32(_450);
 int32_t _452 = (int32_t)(_451);
 for (int _I_out_vidx_s0_x_rebased = 0; _I_out_vidx_s0_x_rebased < 0 + _440; _I_out_vidx_s0_x_rebased++)
 {
  int32_t _453 = _441 + _I_out_vidx_s0_x_rebased;
  float _454 = (float)(_453);
  float _455 = float_from_bits(1031798784 /* 0.0625 */);
  float _456 = _454 * _455;
  float _457 = floor_f32(_456);
  int32_t _458 = (int32_t)(_457);
  int32_t _459 = _438 + -1;
  int32_t _460 = _459 * _452;
  int32_t _461 = _460 - _444;
  int32_t _462 = _461 + _458;
  int32_t _463 = ((int32_t *)_patch_vidx)[_462];
  int32_t _464 = _439 * _452;
  int32_t _465 = _464 - _445;
  int32_t _466 = _465 + _458;
  uint8_t _467 = ((uint8_t *)_BI_fore_mask)[_466];
  uint8_t _468 = (uint8_t)(1ull);
  bool _469 = _467 == _468;
  int32_t _470 = _453 + 8;
  int32_t _471 = _470 & 15;
  bool _472 = _471 == 0;
  bool _473 = _469 & _472;
  int32_t _474 = _447 + 8;
  int32_t _475 = _474 & 15;
  bool _476 = _475 == 0;
  bool _477 = _473 & _476;
  int32_t _478 = (int32_t)(_477 ? _463 : -1);
  int32_t _479 = _443 * _447;
  int32_t _480 = _479 + _446;
  int32_t _481 = _480 + _I_out_vidx_s0_x_rebased;
  ((int32_t *)_I_out_vidx)[_481] = _478;
 } // for _I_out_vidx_s0_x_rebased
 return 0;
}
HALIDE_FUNCTION_ATTRS
int merge_mesh_verts(struct halide_buffer_t *_I_fore_idx_buffer, struct halide_buffer_t *_I_back_idx_buffer, struct halide_buffer_t *_I_back_labels_buffer, struct halide_buffer_t *_BI_fore_mask_buffer, int32_t _N0_verts, struct halide_buffer_t *_P_out_faces_buffer, struct halide_buffer_t *_P_N_faces_buffer, struct halide_buffer_t *_I_out_vidx_buffer) {
 void * const _ucon = nullptr;
 halide_maybe_unused(_ucon);
 uint64_t _482 = (uint64_t)(_P_out_faces_buffer);
 uint64_t _483 = (uint64_t)(0ull);
 bool _484 = _482 != _483;
 if (!_484)
 {
  int32_t _485 = halide_error_buffer_argument_is_null(_ucon, "P_out_faces");
  return _485;
 }
 uint64_t _486 = (uint64_t)(_P_N_faces_buffer);
 uint64_t _487 = (uint64_t)(0ull);
 bool _488 = _486 != _487;
 if (!_488)
 {
  int32_t _489 = halide_error_buffer_argument_is_null(_ucon, "P_N_faces");
  return _489;
 }
 uint64_t _490 = (uint64_t)(_I_out_vidx_buffer);
 uint64_t _491 = (uint64_t)(0ull);
 bool _492 = _490 != _491;
 if (!_492)
 {
  int32_t _493 = halide_error_buffer_argument_is_null(_ucon, "I_out_vidx");
  return _493;
 }
 uint64_t _494 = (uint64_t)(_I_fore_idx_buffer);
 uint64_t _495 = (uint64_t)(0ull);
 bool _496 = _494 != _495;
 if (!_496)
 {
  int32_t _497 = halide_error_buffer_argument_is_null(_ucon, "I_fore_idx");
  return _497;
 }
 uint64_t _498 = (uint64_t)(_I_back_labels_buffer);
 uint64_t _499 = (uint64_t)(0ull);
 bool _500 = _498 != _499;
 if (!_500)
 {
  int32_t _501 = halide_error_buffer_argument_is_null(_ucon, "I_back_labels");
  return _501;
 }
 uint64_t _502 = (uint64_t)(_I_back_idx_buffer);
 uint64_t _503 = (uint64_t)(0ull);
 bool _504 = _502 != _503;
 if (!_504)
 {
  int32_t _505 = halide_error_buffer_argument_is_null(_ucon, "I_back_idx");
  return _505;
 }
 uint64_t _506 = (uint64_t)(_BI_fore_mask_buffer);
 uint64_t _507 = (uint64_t)(0ull);
 bool _508 = _506 != _507;
 if (!_508)
 {
  int32_t _509 = halide_error_buffer_argument_is_null(_ucon, "BI_fore_mask");
  return _509;
 }
 auto *_510 = _halide_buffer_get_host(_BI_fore_mask_buffer);
 auto _BI_fore_mask = _510;
 halide_maybe_unused(_BI_fore_mask);
 uint32_t _511 = _halide_buffer_get_type(_BI_fore_mask_buffer);
 bool _512 = _halide_buffer_get_device_dirty(_BI_fore_mask_buffer);
 int32_t _513 = _halide_buffer_get_dimensions(_BI_fore_mask_buffer);
 int32_t _514 = _halide_buffer_get_min(_BI_fore_mask_buffer, 0);
 int32_t _515 = _halide_buffer_get_extent(_BI_fore_mask_buffer, 0);
 int32_t _516 = _halide_buffer_get_stride(_BI_fore_mask_buffer, 0);
 int32_t _517 = _halide_buffer_get_min(_BI_fore_mask_buffer, 1);
 int32_t _518 = _halide_buffer_get_extent(_BI_fore_mask_buffer, 1);
 int32_t _519 = _halide_buffer_get_stride(_BI_fore_mask_buffer, 1);
 auto *_520 = _halide_buffer_get_host(_I_back_idx_buffer);
 auto _I_back_idx = _520;
 halide_maybe_unused(_I_back_idx);
 uint32_t _521 = _halide_buffer_get_type(_I_back_idx_buffer);
 bool _522 = _halide_buffer_get_device_dirty(_I_back_idx_buffer);
 int32_t _523 = _halide_buffer_get_dimensions(_I_back_idx_buffer);
 int32_t _524 = _halide_buffer_get_min(_I_back_idx_buffer, 0);
 int32_t _525 = _halide_buffer_get_extent(_I_back_idx_buffer, 0);
 int32_t _526 = _halide_buffer_get_stride(_I_back_idx_buffer, 0);
 int32_t _527 = _halide_buffer_get_min(_I_back_idx_buffer, 1);
 int32_t _528 = _halide_buffer_get_extent(_I_back_idx_buffer, 1);
 int32_t _529 = _halide_buffer_get_stride(_I_back_idx_buffer, 1);
 auto *_530 = _halide_buffer_get_host(_I_back_labels_buffer);
 auto _I_back_labels = _530;
 halide_maybe_unused(_I_back_labels);
 uint32_t _531 = _halide_buffer_get_type(_I_back_labels_buffer);
 bool _532 = _halide_buffer_get_device_dirty(_I_back_labels_buffer);
 int32_t _533 = _halide_buffer_get_dimensions(_I_back_labels_buffer);
 int32_t _534 = _halide_buffer_get_min(_I_back_labels_buffer, 0);
 int32_t _535 = _halide_buffer_get_extent(_I_back_labels_buffer, 0);
 int32_t _536 = _halide_buffer_get_stride(_I_back_labels_buffer, 0);
 int32_t _537 = _halide_buffer_get_min(_I_back_labels_buffer, 1);
 int32_t _538 = _halide_buffer_get_extent(_I_back_labels_buffer, 1);
 int32_t _539 = _halide_buffer_get_stride(_I_back_labels_buffer, 1);
 auto *_540 = _halide_buffer_get_host(_I_fore_idx_buffer);
 auto _I_fore_idx = _540;
 halide_maybe_unused(_I_fore_idx);
 uint32_t _541 = _halide_buffer_get_type(_I_fore_idx_buffer);
 bool _542 = _halide_buffer_get_device_dirty(_I_fore_idx_buffer);
 int32_t _543 = _halide_buffer_get_dimensions(_I_fore_idx_buffer);
 int32_t _544 = _halide_buffer_get_min(_I_fore_idx_buffer, 0);
 int32_t _545 = _halide_buffer_get_extent(_I_fore_idx_buffer, 0);
 int32_t _546 = _halide_buffer_get_stride(_I_fore_idx_buffer, 0);
 int32_t _547 = _halide_buffer_get_min(_I_fore_idx_buffer, 1);
 int32_t _548 = _halide_buffer_get_extent(_I_fore_idx_buffer, 1);
 int32_t _549 = _halide_buffer_get_stride(_I_fore_idx_buffer, 1);
 auto *_550 = _halide_buffer_get_host(_I_out_vidx_buffer);
 auto _I_out_vidx = _550;
 halide_maybe_unused(_I_out_vidx);
 uint32_t _551 = _halide_buffer_get_type(_I_out_vidx_buffer);
 bool _552 = _halide_buffer_get_device_dirty(_I_out_vidx_buffer);
 int32_t _553 = _halide_buffer_get_dimensions(_I_out_vidx_buffer);
 int32_t _554 = _halide_buffer_get_min(_I_out_vidx_buffer, 0);
 int32_t _555 = _halide_buffer_get_extent(_I_out_vidx_buffer, 0);
 int32_t _556 = _halide_buffer_get_stride(_I_out_vidx_buffer, 0);
 int32_t _557 = _halide_buffer_get_min(_I_out_vidx_buffer, 1);
 int32_t _558 = _halide_buffer_get_extent(_I_out_vidx_buffer, 1);
 int32_t _559 = _halide_buffer_get_stride(_I_out_vidx_buffer, 1);
 auto *_560 = _halide_buffer_get_host(_P_N_faces_buffer);
 auto _P_N_faces = _560;
 halide_maybe_unused(_P_N_faces);
 uint32_t _561 = _halide_buffer_get_type(_P_N_faces_buffer);
 bool _562 = _halide_buffer_get_device_dirty(_P_N_faces_buffer);
 int32_t _563 = _halide_buffer_get_dimensions(_P_N_faces_buffer);
 int32_t _564 = _halide_buffer_get_min(_P_N_faces_buffer, 0);
 int32_t _565 = _halide_buffer_get_extent(_P_N_faces_buffer, 0);
 int32_t _566 = _halide_buffer_get_stride(_P_N_faces_buffer, 0);
 auto *_567 = _halide_buffer_get_host(_P_out_faces_buffer);
 auto _P_out_faces = _567;
 halide_maybe_unused(_P_out_faces);
 uint32_t _568 = _halide_buffer_get_type(_P_out_faces_buffer);
 bool _569 = _halide_buffer_get_device_dirty(_P_out_faces_buffer);
 int32_t _570 = _halide_buffer_get_dimensions(_P_out_faces_buffer);
 int32_t _571 = _halide_buffer_get_min(_P_out_faces_buffer, 0);
 int32_t _572 = _halide_buffer_get_extent(_P_out_faces_buffer, 0);
 int32_t _573 = _halide_buffer_get_stride(_P_out_faces_buffer, 0);
 int32_t _574 = _halide_buffer_get_min(_P_out_faces_buffer, 1);
 int32_t _575 = _halide_buffer_get_extent(_P_out_faces_buffer, 1);
 int32_t _576 = _halide_buffer_get_stride(_P_out_faces_buffer, 1);
 int32_t _577 = _halide_buffer_get_min(_P_out_faces_buffer, 2);
 int32_t _578 = _halide_buffer_get_extent(_P_out_faces_buffer, 2);
 int32_t _579 = _halide_buffer_get_stride(_P_out_faces_buffer, 2);
 int32_t _580 = _578 + _577;
 int32_t _581 = _565 + _564;
 int32_t _582 = ::halide_cpp_max(_580, _581);
 int32_t _583 = ::halide_cpp_min(_564, _577);
 float _584 = (float)(_557);
 float _585 = float_from_bits(1031798784 /* 0.0625 */);
 float _586 = _584 * _585;
 float _587 = floor_f32(_586);
 int32_t _588 = (int32_t)(_587);
 int32_t _589 = _558 + _557;
 int32_t _590 = _589 + -1;
 float _591 = (float)(_590);
 float _592 = _591 * _585;
 float _593 = floor_f32(_592);
 int32_t _594 = (int32_t)(_593);
 bool _595 = _515 < 1;
 int32_t _596 = (int32_t)(_595 ? _588 : _594);
 int32_t _597 = _515 + -1;
 int32_t _598 = _596 * _597;
 int32_t _599 = _555 + _554;
 int32_t _600 = _599 + -1;
 float _601 = (float)(_600);
 float _602 = _601 * _585;
 float _603 = floor_f32(_602);
 int32_t _604 = (int32_t)(_603);
 int32_t _605 = _598 + _604;
 int32_t _606 = _582 + -1;
 int32_t _607 = ::halide_cpp_max(_605, _606);
 int32_t _608 = (int32_t)(_595 ? _594 : _588);
 int32_t _609 = _608 * _597;
 float _610 = (float)(_554);
 float _611 = _610 * _585;
 float _612 = floor_f32(_611);
 int32_t _613 = (int32_t)(_612);
 int32_t _614 = _609 + _613;
 int32_t _615 = ::halide_cpp_min(_614, _583);
 int32_t _616 = _518 + -1;
 int32_t _617 = _597 * _616;
 int32_t _618 = ::halide_cpp_max(_617, _582);
 int32_t _619 = ::halide_cpp_min(_617, 1);
 int32_t _620 = _619 + -1;
 int32_t _621 = ::halide_cpp_min(_620, _583);
 int32_t _622 = 0 - _515;
 int32_t _623 = ::halide_cpp_max(_515, 2);
 int32_t _624 = _623 + -2;
 int32_t _625 = ::halide_cpp_max(_622, _624);
 int32_t _626 = ::halide_cpp_max(_625, _604);
 int32_t _627 = ::halide_cpp_min(_613, 0);
 int32_t _628 = _626 - _627;
 bool _629 = 1 < _515;
 int32_t _630 = ::halide_cpp_max(_618, 1);
 int32_t _631 = _630 - _621;
 int32_t _632 = _631 + -1;
 int32_t _633 = _632 >> 5;
 int32_t _634 = _633 * 32;
 int32_t _635 = _634 + _621;
 int32_t _636 = _630 + -32;
 int32_t _637 = ::halide_cpp_min(_635, _636);
 int32_t _638 = ::halide_cpp_min(_636, _621);
 int32_t _639 = _637 + 31;
 int32_t _640 = (int32_t)(_629 ? _639 : _638);
 bool _641 = _640 < 0;
 int32_t _642 = (int32_t)(_641 ? -1 : 0);
 bool _643 = _515 == 1;
 int32_t _644 = (int32_t)(_643 ? -1 : 0);
 int32_t _645 = (int32_t)(_595 ? -1 : 0);
 int32_t _646 = _640 - _642;
 int32_t _647 = _515 - _644;
 int32_t _648 = _647 + -1;
 int32_t _649 = _646 / _648;
 int32_t _650 = ~_645;
 int32_t _651 = _650 - _645;
 int32_t _652 = _642 & _651;
 int32_t _653 = _649 + _652;
 int32_t _654 = ~_644;
 int32_t _655 = _653 & _654;
 int32_t _656 = ::halide_cpp_max(_655, _594);
 int32_t _657 = (int32_t)(_629 ? _638 : _639);
 bool _658 = _657 < 0;
 int32_t _659 = (int32_t)(_658 ? -1 : 0);
 int32_t _660 = _657 - _659;
 int32_t _661 = _660 / _648;
 int32_t _662 = _659 & _651;
 int32_t _663 = _661 + _662;
 int32_t _664 = _663 & _654;
 int32_t _665 = ::halide_cpp_min(_664, _588);
 int32_t _666 = _656 - _665;
 int32_t _667 = -1 - _545;
 int32_t _668 = ::halide_cpp_max(_545, 1);
 int32_t _669 = _668 + -1;
 int32_t _670 = ::halide_cpp_max(_667, _669);
 int32_t _671 = _670 + 17;
 int32_t _672 = ::halide_cpp_min(_671, _545);
 float _673 = float_from_bits(0 /* 0 */);
 float _674 = (float)(_597);
 bool _675 = _673 < _674;
 int32_t _676 = _582 - _583;
 int32_t _677 = _676 + -1;
 int32_t _678 = _677 >> 5;
 int32_t _679 = _678 * 32;
 int32_t _680 = _679 + _583;
 int32_t _681 = _582 + -32;
 int32_t _682 = ::halide_cpp_min(_680, _681);
 int32_t _683 = ::halide_cpp_min(_681, _583);
 float _684 = (float)(_683);
 int32_t _685 = _682 + 31;
 float _686 = (float)(_685);
 float _687 = (float)(_675 ? _686 : _684);
 float _688 = _687 / _674;
 float _689 = floor_f32(_688);
 float _690 = float_from_bits(1098907648 /* 16 */);
 float _691 = _689 * _690;
 int32_t _692 = (int32_t)(_691);
 int32_t _693 = _692 + 17;
 int32_t _694 = ::halide_cpp_min(_693, _548);
 int32_t _695 = ::halide_cpp_max(_694, 1);
 int32_t _696 = _548 + -1;
 float _697 = (float)(_675 ? _684 : _686);
 float _698 = _697 / _674;
 float _699 = floor_f32(_698);
 float _700 = _699 * _690;
 int32_t _701 = (int32_t)(_700);
 int32_t _702 = ::halide_cpp_min(_696, _701);
 int32_t _703 = ::halide_cpp_max(_702, 0);
 int32_t _704 = _695 - _703;
 int32_t _705 = _572 + _571;
 int32_t _706 = ::halide_cpp_max(_705, 3);
 int32_t _707 = ::halide_cpp_min(_571, 0);
 int32_t _708 = _706 - _707;
 int32_t _709 = _575 + _574;
 int32_t _710 = ::halide_cpp_max(_709, 289);
 int32_t _711 = ::halide_cpp_min(_574, 0);
 int32_t _712 = _710 - _711;
 int32_t _713 = _680 + 32;
 int32_t _714 = ::halide_cpp_min(_713, _582);
 int32_t _715 = ::halide_cpp_max(_714, _581);
 int32_t _716 = ::halide_cpp_min(_565, 32);
 int32_t _717 = _716 + _564;
 int32_t _718 = ::halide_cpp_min(_717, _582);
 int32_t _719 = _718 + -32;
 int32_t _720 = ::halide_cpp_min(_719, _583);
 int32_t _721 = _715 - _720;
 bool _722 = _halide_buffer_is_bounds_query(_BI_fore_mask_buffer);
 if (_722)
 {
  auto *_723 = _halide_buffer_get_shape(_BI_fore_mask_buffer);
  auto *_724 = (void *)(nullptr);
  uint64_t _725 = (uint64_t)(0ull);
  auto *_726 = (struct halide_device_interface_t *)(nullptr);
  int32_t _727 = ::halide_cpp_min(_613, 0);
  int32_t _728 = _628 + 1;
  int32_t _729 = _666 + 1;
  struct halide_dimension_t s34[2] = {
   {_727, _728, 1, 0},
   {_665, _729, _728, 0},
  };
  auto *_730 = s34;
  auto *_731 = _halide_buffer_init(_BI_fore_mask_buffer, _723, _724, _725, _726, 1, 8, 2, _730, _725);
  halide_maybe_unused(_731);
 } // if _722
 bool _732 = _halide_buffer_is_bounds_query(_I_back_idx_buffer);
 if (_732)
 {
  int32_t _733 = ::halide_cpp_max(_672, 1);
  auto *_734 = _halide_buffer_get_shape(_I_back_idx_buffer);
  auto *_735 = (void *)(nullptr);
  uint64_t _736 = (uint64_t)(0ull);
  auto *_737 = (struct halide_device_interface_t *)(nullptr);
  int32_t _738 = ::halide_cpp_max(_702, 0);
  struct halide_dimension_t s35[2] = {
   {0, _733, 1, 0},
   {_738, _704, _733, 0},
  };
  auto *_739 = s35;
  auto *_740 = _halide_buffer_init(_I_back_idx_buffer, _734, _735, _736, _737, 0, 32, 2, _739, _736);
  halide_maybe_unused(_740);
 } // if _732
 bool _741 = _halide_buffer_is_bounds_query(_I_back_labels_buffer);
 if (_741)
 {
  int32_t _742 = ::halide_cpp_max(_672, 1);
  auto *_743 = _halide_buffer_get_shape(_I_back_labels_buffer);
  auto *_744 = (void *)(nullptr);
  uint64_t _745 = (uint64_t)(0ull);
  auto *_746 = (struct halide_device_interface_t *)(nullptr);
  int32_t _747 = ::halide_cpp_max(_702, 0);
  struct halide_dimension_t s36[2] = {
   {0, _742, 1, 0},
   {_747, _704, _742, 0},
  };
  auto *_748 = s36;
  auto *_749 = _halide_buffer_init(_I_back_labels_buffer, _743, _744, _745, _746, 1, 8, 2, _748, _745);
  halide_maybe_unused(_749);
 } // if _741
 bool _750 = _halide_buffer_is_bounds_query(_I_fore_idx_buffer);
 if (_750)
 {
  int32_t _751 = ::halide_cpp_max(_672, 1);
  auto *_752 = _halide_buffer_get_shape(_I_fore_idx_buffer);
  auto *_753 = (void *)(nullptr);
  uint64_t _754 = (uint64_t)(0ull);
  auto *_755 = (struct halide_device_interface_t *)(nullptr);
  int32_t _756 = ::halide_cpp_max(_702, 0);
  struct halide_dimension_t s37[2] = {
   {0, _751, 1, 0},
   {_756, _704, _751, 0},
  };
  auto *_757 = s37;
  auto *_758 = _halide_buffer_init(_I_fore_idx_buffer, _752, _753, _754, _755, 0, 32, 2, _757, _754);
  halide_maybe_unused(_758);
 } // if _750
 bool _759 = _halide_buffer_is_bounds_query(_I_out_vidx_buffer);
 if (_759)
 {
  auto *_760 = _halide_buffer_get_shape(_I_out_vidx_buffer);
  auto *_761 = (void *)(nullptr);
  uint64_t _762 = (uint64_t)(0ull);
  auto *_763 = (struct halide_device_interface_t *)(nullptr);
  struct halide_dimension_t s38[2] = {
   {_554, _555, 1, 0},
   {_557, _558, _555, 0},
  };
  auto *_764 = s38;
  auto *_765 = _halide_buffer_init(_I_out_vidx_buffer, _760, _761, _762, _763, 0, 32, 2, _764, _762);
  halide_maybe_unused(_765);
 } // if _759
 bool _766 = _halide_buffer_is_bounds_query(_P_N_faces_buffer);
 if (_766)
 {
  auto *_767 = _halide_buffer_get_shape(_P_N_faces_buffer);
  auto *_768 = (void *)(nullptr);
  uint64_t _769 = (uint64_t)(0ull);
  auto *_770 = (struct halide_device_interface_t *)(nullptr);
  int32_t _771 = ::halide_cpp_min(_565, 32);
  int32_t _772 = _771 + _564;
  int32_t _773 = _772 + -32;
  int32_t _774 = ::halide_cpp_max(_565, 32);
  struct halide_dimension_t s39[1] = {
   {_773, _774, 1, 0},
  };
  auto *_775 = s39;
  auto *_776 = _halide_buffer_init(_P_N_faces_buffer, _767, _768, _769, _770, 0, 32, 1, _775, _769);
  halide_maybe_unused(_776);
 } // if _766
 bool _777 = _halide_buffer_is_bounds_query(_P_out_faces_buffer);
 if (_777)
 {
  auto *_778 = _halide_buffer_get_shape(_P_out_faces_buffer);
  auto *_779 = (void *)(nullptr);
  uint64_t _780 = (uint64_t)(0ull);
  auto *_781 = (struct halide_device_interface_t *)(nullptr);
  int32_t _782 = ::halide_cpp_min(_571, 0);
  int32_t _783 = ::halide_cpp_min(_574, 0);
  int32_t _784 = _708 * _712;
  struct halide_dimension_t s40[3] = {
   {_782, _708, 1, 0},
   {_783, _712, _708, 0},
   {_720, _721, _784, 0},
  };
  auto *_785 = s40;
  auto *_786 = _halide_buffer_init(_P_out_faces_buffer, _778, _779, _780, _781, 0, 32, 3, _785, _780);
  halide_maybe_unused(_786);
 } // if _777
 bool _787 = _halide_buffer_is_bounds_query(_P_out_faces_buffer);
 bool _788 = _halide_buffer_is_bounds_query(_P_N_faces_buffer);
 bool _789 = _halide_buffer_is_bounds_query(_I_out_vidx_buffer);
 bool _790 = _halide_buffer_is_bounds_query(_I_fore_idx_buffer);
 bool _791 = _halide_buffer_is_bounds_query(_I_back_labels_buffer);
 bool _792 = _halide_buffer_is_bounds_query(_BI_fore_mask_buffer);
 bool _793 = _halide_buffer_is_bounds_query(_I_back_idx_buffer);
 bool _794 = _792 || _793;
 bool _795 = _791 || _794;
 bool _796 = _790 || _795;
 bool _797 = _789 || _796;
 bool _798 = _788 || _797;
 bool _799 = _787 || _798;
 bool _800 = !(_799);
 if (_800)
 {
  uint32_t _801 = (uint32_t)(67585ull);
  bool _802 = _511 == _801;
  if (!_802)
  {
   uint32_t _803 = (uint32_t)(67585ull);
   int32_t _804 = halide_error_bad_type(_ucon, "Input buffer BI_fore_mask", _511, _803);
   return _804;
  }
  bool _805 = _513 == 2;
  if (!_805)
  {
   int32_t _806 = halide_error_bad_dimensions(_ucon, "Input buffer BI_fore_mask", _513, 2);
   return _806;
  }
  uint32_t _807 = (uint32_t)(73728ull);
  bool _808 = _521 == _807;
  if (!_808)
  {
   uint32_t _809 = (uint32_t)(73728ull);
   int32_t _810 = halide_error_bad_type(_ucon, "Input buffer I_back_idx", _521, _809);
   return _810;
  }
  bool _811 = _523 == 2;
  if (!_811)
  {
   int32_t _812 = halide_error_bad_dimensions(_ucon, "Input buffer I_back_idx", _523, 2);
   return _812;
  }
  uint32_t _813 = (uint32_t)(67585ull);
  bool _814 = _531 == _813;
  if (!_814)
  {
   uint32_t _815 = (uint32_t)(67585ull);
   int32_t _816 = halide_error_bad_type(_ucon, "Input buffer I_back_labels", _531, _815);
   return _816;
  }
  bool _817 = _533 == 2;
  if (!_817)
  {
   int32_t _818 = halide_error_bad_dimensions(_ucon, "Input buffer I_back_labels", _533, 2);
   return _818;
  }
  uint32_t _819 = (uint32_t)(73728ull);
  bool _820 = _541 == _819;
  if (!_820)
  {
   uint32_t _821 = (uint32_t)(73728ull);
   int32_t _822 = halide_error_bad_type(_ucon, "Input buffer I_fore_idx", _541, _821);
   return _822;
  }
  bool _823 = _543 == 2;
  if (!_823)
  {
   int32_t _824 = halide_error_bad_dimensions(_ucon, "Input buffer I_fore_idx", _543, 2);
   return _824;
  }
  uint32_t _825 = (uint32_t)(73728ull);
  bool _826 = _551 == _825;
  if (!_826)
  {
   uint32_t _827 = (uint32_t)(73728ull);
   int32_t _828 = halide_error_bad_type(_ucon, "Output buffer I_out_vidx", _551, _827);
   return _828;
  }
  bool _829 = _553 == 2;
  if (!_829)
  {
   int32_t _830 = halide_error_bad_dimensions(_ucon, "Output buffer I_out_vidx", _553, 2);
   return _830;
  }
  uint32_t _831 = (uint32_t)(73728ull);
  bool _832 = _561 == _831;
  if (!_832)
  {
   uint32_t _833 = (uint32_t)(73728ull);
   int32_t _834 = halide_error_bad_type(_ucon, "Output buffer P_N_faces", _561, _833);
   return _834;
  }
  bool _835 = _563 == 1;
  if (!_835)
  {
   int32_t _836 = halide_error_bad_dimensions(_ucon, "Output buffer P_N_faces", _563, 1);
   return _836;
  }
  uint32_t _837 = (uint32_t)(73728ull);
  bool _838 = _568 == _837;
  if (!_838)
  {
   uint32_t _839 = (uint32_t)(73728ull);
   int32_t _840 = halide_error_bad_type(_ucon, "Output buffer P_out_faces", _568, _839);
   return _840;
  }
  bool _841 = _570 == 3;
  if (!_841)
  {
   int32_t _842 = halide_error_bad_dimensions(_ucon, "Output buffer P_out_faces", _570, 3);
   return _842;
  }
  int32_t _843 = ::halide_cpp_min(_613, 0);
  bool _844 = _514 <= _843;
  int32_t _845 = _843 + _628;
  int32_t _846 = _845 + 1;
  int32_t _847 = _515 + _514;
  bool _848 = _846 <= _847;
  bool _849 = _844 && _848;
  if (!_849)
  {
   int32_t _850 = ::halide_cpp_min(_613, 0);
   int32_t _851 = _850 + _628;
   int32_t _852 = _515 + _514;
   int32_t _853 = _852 + -1;
   int32_t _854 = halide_error_access_out_of_bounds(_ucon, "Input buffer BI_fore_mask", 0, _850, _851, _514, _853);
   return _854;
  }
  bool _855 = 0 <= _515;
  if (!_855)
  {
   int32_t _856 = halide_error_buffer_extents_negative(_ucon, "Input buffer BI_fore_mask", 0, _515);
   return _856;
  }
  bool _857 = _517 <= _665;
  int32_t _858 = _666 + _665;
  int32_t _859 = _858 + 1;
  int32_t _860 = _518 + _517;
  bool _861 = _859 <= _860;
  bool _862 = _857 && _861;
  if (!_862)
  {
   int32_t _863 = _666 + _665;
   int32_t _864 = _518 + _517;
   int32_t _865 = _864 + -1;
   int32_t _866 = halide_error_access_out_of_bounds(_ucon, "Input buffer BI_fore_mask", 1, _665, _863, _517, _865);
   return _866;
  }
  bool _867 = 0 <= _518;
  if (!_867)
  {
   int32_t _868 = halide_error_buffer_extents_negative(_ucon, "Input buffer BI_fore_mask", 1, _518);
   return _868;
  }
  bool _869 = _524 <= 0;
  int32_t _870 = ::halide_cpp_max(_672, 1);
  int32_t _871 = _525 + _524;
  bool _872 = _870 <= _871;
  bool _873 = _869 && _872;
  if (!_873)
  {
   int32_t _874 = ::halide_cpp_max(_672, 1);
   int32_t _875 = _874 + -1;
   int32_t _876 = _525 + _524;
   int32_t _877 = _876 + -1;
   int32_t _878 = halide_error_access_out_of_bounds(_ucon, "Input buffer I_back_idx", 0, 0, _875, _524, _877);
   return _878;
  }
  bool _879 = 0 <= _525;
  if (!_879)
  {
   int32_t _880 = halide_error_buffer_extents_negative(_ucon, "Input buffer I_back_idx", 0, _525);
   return _880;
  }
  int32_t _881 = ::halide_cpp_max(_702, 0);
  bool _882 = _527 <= _881;
  int32_t _883 = _881 + _704;
  int32_t _884 = _528 + _527;
  bool _885 = _883 <= _884;
  bool _886 = _882 && _885;
  if (!_886)
  {
   int32_t _887 = ::halide_cpp_max(_702, 0);
   int32_t _888 = _887 + _704;
   int32_t _889 = _888 + -1;
   int32_t _890 = _528 + _527;
   int32_t _891 = _890 + -1;
   int32_t _892 = halide_error_access_out_of_bounds(_ucon, "Input buffer I_back_idx", 1, _887, _889, _527, _891);
   return _892;
  }
  bool _893 = 0 <= _528;
  if (!_893)
  {
   int32_t _894 = halide_error_buffer_extents_negative(_ucon, "Input buffer I_back_idx", 1, _528);
   return _894;
  }
  bool _895 = _534 <= 0;
  int32_t _896 = ::halide_cpp_max(_672, 1);
  int32_t _897 = _535 + _534;
  bool _898 = _896 <= _897;
  bool _899 = _895 && _898;
  if (!_899)
  {
   int32_t _900 = ::halide_cpp_max(_672, 1);
   int32_t _901 = _900 + -1;
   int32_t _902 = _535 + _534;
   int32_t _903 = _902 + -1;
   int32_t _904 = halide_error_access_out_of_bounds(_ucon, "Input buffer I_back_labels", 0, 0, _901, _534, _903);
   return _904;
  }
  bool _905 = 0 <= _535;
  if (!_905)
  {
   int32_t _906 = halide_error_buffer_extents_negative(_ucon, "Input buffer I_back_labels", 0, _535);
   return _906;
  }
  int32_t _907 = ::halide_cpp_max(_702, 0);
  bool _908 = _537 <= _907;
  int32_t _909 = _907 + _704;
  int32_t _910 = _538 + _537;
  bool _911 = _909 <= _910;
  bool _912 = _908 && _911;
  if (!_912)
  {
   int32_t _913 = ::halide_cpp_max(_702, 0);
   int32_t _914 = _913 + _704;
   int32_t _915 = _914 + -1;
   int32_t _916 = _538 + _537;
   int32_t _917 = _916 + -1;
   int32_t _918 = halide_error_access_out_of_bounds(_ucon, "Input buffer I_back_labels", 1, _913, _915, _537, _917);
   return _918;
  }
  bool _919 = 0 <= _538;
  if (!_919)
  {
   int32_t _920 = halide_error_buffer_extents_negative(_ucon, "Input buffer I_back_labels", 1, _538);
   return _920;
  }
  bool _921 = _544 <= 0;
  int32_t _922 = ::halide_cpp_max(_672, 1);
  int32_t _923 = _545 + _544;
  bool _924 = _922 <= _923;
  bool _925 = _921 && _924;
  if (!_925)
  {
   int32_t _926 = ::halide_cpp_max(_672, 1);
   int32_t _927 = _926 + -1;
   int32_t _928 = _545 + _544;
   int32_t _929 = _928 + -1;
   int32_t _930 = halide_error_access_out_of_bounds(_ucon, "Input buffer I_fore_idx", 0, 0, _927, _544, _929);
   return _930;
  }
  bool _931 = 0 <= _545;
  if (!_931)
  {
   int32_t _932 = halide_error_buffer_extents_negative(_ucon, "Input buffer I_fore_idx", 0, _545);
   return _932;
  }
  int32_t _933 = ::halide_cpp_max(_702, 0);
  bool _934 = _547 <= _933;
  int32_t _935 = _933 + _704;
  int32_t _936 = _548 + _547;
  bool _937 = _935 <= _936;
  bool _938 = _934 && _937;
  if (!_938)
  {
   int32_t _939 = ::halide_cpp_max(_702, 0);
   int32_t _940 = _939 + _704;
   int32_t _941 = _940 + -1;
   int32_t _942 = _548 + _547;
   int32_t _943 = _942 + -1;
   int32_t _944 = halide_error_access_out_of_bounds(_ucon, "Input buffer I_fore_idx", 1, _939, _941, _547, _943);
   return _944;
  }
  bool _945 = 0 <= _548;
  if (!_945)
  {
   int32_t _946 = halide_error_buffer_extents_negative(_ucon, "Input buffer I_fore_idx", 1, _548);
   return _946;
  }
  bool _947 = 0 <= _555;
  if (!_947)
  {
   int32_t _948 = halide_error_buffer_extents_negative(_ucon, "Output buffer I_out_vidx", 0, _555);
   return _948;
  }
  bool _949 = 0 <= _558;
  if (!_949)
  {
   int32_t _950 = halide_error_buffer_extents_negative(_ucon, "Output buffer I_out_vidx", 1, _558);
   return _950;
  }
  bool _951 = 32 <= _565;
  if (!_951)
  {
   int32_t _952 = _565 + _564;
   int32_t _953 = ::halide_cpp_min(_565, 32);
   int32_t _954 = _953 + _564;
   int32_t _955 = _954 + -32;
   int32_t _956 = _952 + -1;
   int32_t _957 = halide_error_access_out_of_bounds(_ucon, "Output buffer P_N_faces", 0, _955, _956, _564, _956);
   return _957;
  }
  bool _958 = _571 <= 0;
  int32_t _959 = ::halide_cpp_min(_571, 0);
  int32_t _960 = _959 + _708;
  int32_t _961 = _572 + _571;
  bool _962 = _960 <= _961;
  bool _963 = _958 && _962;
  if (!_963)
  {
   int32_t _964 = ::halide_cpp_min(_571, 0);
   int32_t _965 = _964 + _708;
   int32_t _966 = _965 + -1;
   int32_t _967 = _572 + _571;
   int32_t _968 = _967 + -1;
   int32_t _969 = halide_error_access_out_of_bounds(_ucon, "Output buffer P_out_faces", 0, _964, _966, _571, _968);
   return _969;
  }
  bool _970 = 0 <= _572;
  if (!_970)
  {
   int32_t _971 = halide_error_buffer_extents_negative(_ucon, "Output buffer P_out_faces", 0, _572);
   return _971;
  }
  bool _972 = _574 <= 0;
  int32_t _973 = ::halide_cpp_min(_574, 0);
  int32_t _974 = _973 + _712;
  int32_t _975 = _575 + _574;
  bool _976 = _974 <= _975;
  bool _977 = _972 && _976;
  if (!_977)
  {
   int32_t _978 = ::halide_cpp_min(_574, 0);
   int32_t _979 = _978 + _712;
   int32_t _980 = _979 + -1;
   int32_t _981 = _575 + _574;
   int32_t _982 = _981 + -1;
   int32_t _983 = halide_error_access_out_of_bounds(_ucon, "Output buffer P_out_faces", 1, _978, _980, _574, _982);
   return _983;
  }
  bool _984 = 0 <= _575;
  if (!_984)
  {
   int32_t _985 = halide_error_buffer_extents_negative(_ucon, "Output buffer P_out_faces", 1, _575);
   return _985;
  }
  bool _986 = _577 <= _720;
  int32_t _987 = _721 + _720;
  int32_t _988 = _578 + _577;
  bool _989 = _987 <= _988;
  bool _990 = _986 && _989;
  if (!_990)
  {
   int32_t _991 = _721 + _720;
   int32_t _992 = _991 + -1;
   int32_t _993 = _578 + _577;
   int32_t _994 = _993 + -1;
   int32_t _995 = halide_error_access_out_of_bounds(_ucon, "Output buffer P_out_faces", 2, _720, _992, _577, _994);
   return _995;
  }
  bool _996 = 0 <= _578;
  if (!_996)
  {
   int32_t _997 = halide_error_buffer_extents_negative(_ucon, "Output buffer P_out_faces", 2, _578);
   return _997;
  }
  bool _998 = _516 == 1;
  if (!_998)
  {
   int32_t _999 = halide_error_constraint_violated(_ucon, "BI_fore_mask.stride.0", _516, "1", 1);
   return _999;
  }
  bool _1000 = _526 == 1;
  if (!_1000)
  {
   int32_t _1001 = halide_error_constraint_violated(_ucon, "I_back_idx.stride.0", _526, "1", 1);
   return _1001;
  }
  bool _1002 = _536 == 1;
  if (!_1002)
  {
   int32_t _1003 = halide_error_constraint_violated(_ucon, "I_back_labels.stride.0", _536, "1", 1);
   return _1003;
  }
  bool _1004 = _546 == 1;
  if (!_1004)
  {
   int32_t _1005 = halide_error_constraint_violated(_ucon, "I_fore_idx.stride.0", _546, "1", 1);
   return _1005;
  }
  bool _1006 = _556 == 1;
  if (!_1006)
  {
   int32_t _1007 = halide_error_constraint_violated(_ucon, "I_out_vidx.stride.0", _556, "1", 1);
   return _1007;
  }
  bool _1008 = _566 == 1;
  if (!_1008)
  {
   int32_t _1009 = halide_error_constraint_violated(_ucon, "P_N_faces.stride.0", _566, "1", 1);
   return _1009;
  }
  bool _1010 = _573 == 1;
  if (!_1010)
  {
   int32_t _1011 = halide_error_constraint_violated(_ucon, "P_out_faces.stride.0", _573, "1", 1);
   return _1011;
  }
  int64_t _1012 = (int64_t)(_518);
  int64_t _1013 = (int64_t)(_515);
  int64_t _1014 = _1012 * _1013;
  int64_t _1015 = (int64_t)(_528);
  int64_t _1016 = (int64_t)(_525);
  int64_t _1017 = _1015 * _1016;
  int64_t _1018 = (int64_t)(_538);
  int64_t _1019 = (int64_t)(_535);
  int64_t _1020 = _1018 * _1019;
  int64_t _1021 = (int64_t)(_548);
  int64_t _1022 = (int64_t)(_545);
  int64_t _1023 = _1021 * _1022;
  int64_t _1024 = (int64_t)(_558);
  int64_t _1025 = (int64_t)(_555);
  int64_t _1026 = _1024 * _1025;
  int64_t _1027 = (int64_t)(_575);
  int64_t _1028 = (int64_t)(_572);
  int64_t _1029 = _1027 * _1028;
  int64_t _1030 = (int64_t)(_578);
  int64_t _1031 = _1029 * _1030;
  uint64_t _1032 = (uint64_t)(_515);
  uint64_t _1033 = (uint64_t)(2147483647ull);
  bool _1034 = _1032 <= _1033;
  if (!_1034)
  {
   uint64_t _1035 = (uint64_t)(_515);
   uint64_t _1036 = (uint64_t)(2147483647ull);
   int32_t _1037 = halide_error_buffer_allocation_too_large(_ucon, "BI_fore_mask", _1035, _1036);
   return _1037;
  }
  int64_t _1038 = (int64_t)(_518);
  int64_t _1039 = (int64_t)(_519);
  int64_t _1040 = _1038 * _1039;
  int64_t _1041 = (int64_t)(0ll);
  int64_t _1042 = _1041 - _1040;
  bool _1043 = _1040 > _1041;
  int64_t _1044 = (int64_t)(_1043 ? _1040 : _1042);
  uint64_t _1045 = (uint64_t)(_1044);
  uint64_t _1046 = _1045;
  uint64_t _1047 = (uint64_t)(2147483647ull);
  bool _1048 = _1046 <= _1047;
  if (!_1048)
  {
   int64_t _1049 = (int64_t)(_518);
   int64_t _1050 = (int64_t)(_519);
   int64_t _1051 = _1049 * _1050;
   int64_t _1052 = (int64_t)(0ll);
   int64_t _1053 = _1052 - _1051;
   bool _1054 = _1051 > _1052;
   int64_t _1055 = (int64_t)(_1054 ? _1051 : _1053);
   uint64_t _1056 = (uint64_t)(_1055);
   uint64_t _1057 = _1056;
   uint64_t _1058 = (uint64_t)(2147483647ull);
   int32_t _1059 = halide_error_buffer_allocation_too_large(_ucon, "BI_fore_mask", _1057, _1058);
   return _1059;
  }
  int64_t _1060 = (int64_t)(2147483647ll);
  bool _1061 = _1014 <= _1060;
  if (!_1061)
  {
   int64_t _1062 = (int64_t)(2147483647ll);
   int32_t _1063 = halide_error_buffer_extents_too_large(_ucon, "BI_fore_mask", _1014, _1062);
   return _1063;
  }
  uint64_t _1064 = (uint64_t)(_525);
  uint64_t _1065 = (uint64_t)(2147483647ull);
  bool _1066 = _1064 <= _1065;
  if (!_1066)
  {
   uint64_t _1067 = (uint64_t)(_525);
   uint64_t _1068 = (uint64_t)(2147483647ull);
   int32_t _1069 = halide_error_buffer_allocation_too_large(_ucon, "I_back_idx", _1067, _1068);
   return _1069;
  }
  int64_t _1070 = (int64_t)(_528);
  int64_t _1071 = (int64_t)(_529);
  int64_t _1072 = _1070 * _1071;
  int64_t _1073 = (int64_t)(0ll);
  int64_t _1074 = _1073 - _1072;
  bool _1075 = _1072 > _1073;
  int64_t _1076 = (int64_t)(_1075 ? _1072 : _1074);
  uint64_t _1077 = (uint64_t)(_1076);
  uint64_t _1078 = _1077;
  uint64_t _1079 = (uint64_t)(2147483647ull);
  bool _1080 = _1078 <= _1079;
  if (!_1080)
  {
   int64_t _1081 = (int64_t)(_528);
   int64_t _1082 = (int64_t)(_529);
   int64_t _1083 = _1081 * _1082;
   int64_t _1084 = (int64_t)(0ll);
   int64_t _1085 = _1084 - _1083;
   bool _1086 = _1083 > _1084;
   int64_t _1087 = (int64_t)(_1086 ? _1083 : _1085);
   uint64_t _1088 = (uint64_t)(_1087);
   uint64_t _1089 = _1088;
   uint64_t _1090 = (uint64_t)(2147483647ull);
   int32_t _1091 = halide_error_buffer_allocation_too_large(_ucon, "I_back_idx", _1089, _1090);
   return _1091;
  }
  int64_t _1092 = (int64_t)(2147483647ll);
  bool _1093 = _1017 <= _1092;
  if (!_1093)
  {
   int64_t _1094 = (int64_t)(2147483647ll);
   int32_t _1095 = halide_error_buffer_extents_too_large(_ucon, "I_back_idx", _1017, _1094);
   return _1095;
  }
  uint64_t _1096 = (uint64_t)(_535);
  uint64_t _1097 = (uint64_t)(2147483647ull);
  bool _1098 = _1096 <= _1097;
  if (!_1098)
  {
   uint64_t _1099 = (uint64_t)(_535);
   uint64_t _1100 = (uint64_t)(2147483647ull);
   int32_t _1101 = halide_error_buffer_allocation_too_large(_ucon, "I_back_labels", _1099, _1100);
   return _1101;
  }
  int64_t _1102 = (int64_t)(_538);
  int64_t _1103 = (int64_t)(_539);
  int64_t _1104 = _1102 * _1103;
  int64_t _1105 = (int64_t)(0ll);
  int64_t _1106 = _1105 - _1104;
  bool _1107 = _1104 > _1105;
  int64_t _1108 = (int64_t)(_1107 ? _1104 : _1106);
  uint64_t _1109 = (uint64_t)(_1108);
  uint64_t _1110 = _1109;
  uint64_t _1111 = (uint64_t)(2147483647ull);
  bool _1112 = _1110 <= _1111;
  if (!_1112)
  {
   int64_t _1113 = (int64_t)(_538);
   int64_t _1114 = (int64_t)(_539);
   int64_t _1115 = _1113 * _1114;
   int64_t _1116 = (int64_t)(0ll);
   int64_t _1117 = _1116 - _1115;
   bool _1118 = _1115 > _1116;
   int64_t _1119 = (int64_t)(_1118 ? _1115 : _1117);
   uint64_t _1120 = (uint64_t)(_1119);
   uint64_t _1121 = _1120;
   uint64_t _1122 = (uint64_t)(2147483647ull);
   int32_t _1123 = halide_error_buffer_allocation_too_large(_ucon, "I_back_labels", _1121, _1122);
   return _1123;
  }
  int64_t _1124 = (int64_t)(2147483647ll);
  bool _1125 = _1020 <= _1124;
  if (!_1125)
  {
   int64_t _1126 = (int64_t)(2147483647ll);
   int32_t _1127 = halide_error_buffer_extents_too_large(_ucon, "I_back_labels", _1020, _1126);
   return _1127;
  }
  uint64_t _1128 = (uint64_t)(_545);
  uint64_t _1129 = (uint64_t)(2147483647ull);
  bool _1130 = _1128 <= _1129;
  if (!_1130)
  {
   uint64_t _1131 = (uint64_t)(_545);
   uint64_t _1132 = (uint64_t)(2147483647ull);
   int32_t _1133 = halide_error_buffer_allocation_too_large(_ucon, "I_fore_idx", _1131, _1132);
   return _1133;
  }
  int64_t _1134 = (int64_t)(_548);
  int64_t _1135 = (int64_t)(_549);
  int64_t _1136 = _1134 * _1135;
  int64_t _1137 = (int64_t)(0ll);
  int64_t _1138 = _1137 - _1136;
  bool _1139 = _1136 > _1137;
  int64_t _1140 = (int64_t)(_1139 ? _1136 : _1138);
  uint64_t _1141 = (uint64_t)(_1140);
  uint64_t _1142 = _1141;
  uint64_t _1143 = (uint64_t)(2147483647ull);
  bool _1144 = _1142 <= _1143;
  if (!_1144)
  {
   int64_t _1145 = (int64_t)(_548);
   int64_t _1146 = (int64_t)(_549);
   int64_t _1147 = _1145 * _1146;
   int64_t _1148 = (int64_t)(0ll);
   int64_t _1149 = _1148 - _1147;
   bool _1150 = _1147 > _1148;
   int64_t _1151 = (int64_t)(_1150 ? _1147 : _1149);
   uint64_t _1152 = (uint64_t)(_1151);
   uint64_t _1153 = _1152;
   uint64_t _1154 = (uint64_t)(2147483647ull);
   int32_t _1155 = halide_error_buffer_allocation_too_large(_ucon, "I_fore_idx", _1153, _1154);
   return _1155;
  }
  int64_t _1156 = (int64_t)(2147483647ll);
  bool _1157 = _1023 <= _1156;
  if (!_1157)
  {
   int64_t _1158 = (int64_t)(2147483647ll);
   int32_t _1159 = halide_error_buffer_extents_too_large(_ucon, "I_fore_idx", _1023, _1158);
   return _1159;
  }
  uint64_t _1160 = (uint64_t)(_555);
  uint64_t _1161 = (uint64_t)(2147483647ull);
  bool _1162 = _1160 <= _1161;
  if (!_1162)
  {
   uint64_t _1163 = (uint64_t)(_555);
   uint64_t _1164 = (uint64_t)(2147483647ull);
   int32_t _1165 = halide_error_buffer_allocation_too_large(_ucon, "I_out_vidx", _1163, _1164);
   return _1165;
  }
  int64_t _1166 = (int64_t)(_558);
  int64_t _1167 = (int64_t)(_559);
  int64_t _1168 = _1166 * _1167;
  int64_t _1169 = (int64_t)(0ll);
  int64_t _1170 = _1169 - _1168;
  bool _1171 = _1168 > _1169;
  int64_t _1172 = (int64_t)(_1171 ? _1168 : _1170);
  uint64_t _1173 = (uint64_t)(_1172);
  uint64_t _1174 = _1173;
  uint64_t _1175 = (uint64_t)(2147483647ull);
  bool _1176 = _1174 <= _1175;
  if (!_1176)
  {
   int64_t _1177 = (int64_t)(_558);
   int64_t _1178 = (int64_t)(_559);
   int64_t _1179 = _1177 * _1178;
   int64_t _1180 = (int64_t)(0ll);
   int64_t _1181 = _1180 - _1179;
   bool _1182 = _1179 > _1180;
   int64_t _1183 = (int64_t)(_1182 ? _1179 : _1181);
   uint64_t _1184 = (uint64_t)(_1183);
   uint64_t _1185 = _1184;
   uint64_t _1186 = (uint64_t)(2147483647ull);
   int32_t _1187 = halide_error_buffer_allocation_too_large(_ucon, "I_out_vidx", _1185, _1186);
   return _1187;
  }
  int64_t _1188 = (int64_t)(2147483647ll);
  bool _1189 = _1026 <= _1188;
  if (!_1189)
  {
   int64_t _1190 = (int64_t)(2147483647ll);
   int32_t _1191 = halide_error_buffer_extents_too_large(_ucon, "I_out_vidx", _1026, _1190);
   return _1191;
  }
  uint64_t _1192 = (uint64_t)(_565);
  uint64_t _1193 = (uint64_t)(2147483647ull);
  bool _1194 = _1192 <= _1193;
  if (!_1194)
  {
   uint64_t _1195 = (uint64_t)(_565);
   uint64_t _1196 = (uint64_t)(2147483647ull);
   int32_t _1197 = halide_error_buffer_allocation_too_large(_ucon, "P_N_faces", _1195, _1196);
   return _1197;
  }
  uint64_t _1198 = (uint64_t)(_572);
  uint64_t _1199 = (uint64_t)(2147483647ull);
  bool _1200 = _1198 <= _1199;
  if (!_1200)
  {
   uint64_t _1201 = (uint64_t)(_572);
   uint64_t _1202 = (uint64_t)(2147483647ull);
   int32_t _1203 = halide_error_buffer_allocation_too_large(_ucon, "P_out_faces", _1201, _1202);
   return _1203;
  }
  int64_t _1204 = (int64_t)(_575);
  int64_t _1205 = (int64_t)(_576);
  int64_t _1206 = _1204 * _1205;
  int64_t _1207 = (int64_t)(0ll);
  int64_t _1208 = _1207 - _1206;
  bool _1209 = _1206 > _1207;
  int64_t _1210 = (int64_t)(_1209 ? _1206 : _1208);
  uint64_t _1211 = (uint64_t)(_1210);
  uint64_t _1212 = _1211;
  uint64_t _1213 = (uint64_t)(2147483647ull);
  bool _1214 = _1212 <= _1213;
  if (!_1214)
  {
   int64_t _1215 = (int64_t)(_575);
   int64_t _1216 = (int64_t)(_576);
   int64_t _1217 = _1215 * _1216;
   int64_t _1218 = (int64_t)(0ll);
   int64_t _1219 = _1218 - _1217;
   bool _1220 = _1217 > _1218;
   int64_t _1221 = (int64_t)(_1220 ? _1217 : _1219);
   uint64_t _1222 = (uint64_t)(_1221);
   uint64_t _1223 = _1222;
   uint64_t _1224 = (uint64_t)(2147483647ull);
   int32_t _1225 = halide_error_buffer_allocation_too_large(_ucon, "P_out_faces", _1223, _1224);
   return _1225;
  }
  int64_t _1226 = (int64_t)(2147483647ll);
  bool _1227 = _1029 <= _1226;
  if (!_1227)
  {
   int64_t _1228 = (int64_t)(2147483647ll);
   int32_t _1229 = halide_error_buffer_extents_too_large(_ucon, "P_out_faces", _1029, _1228);
   return _1229;
  }
  int64_t _1230 = (int64_t)(_578);
  int64_t _1231 = (int64_t)(_579);
  int64_t _1232 = _1230 * _1231;
  int64_t _1233 = (int64_t)(0ll);
  int64_t _1234 = _1233 - _1232;
  bool _1235 = _1232 > _1233;
  int64_t _1236 = (int64_t)(_1235 ? _1232 : _1234);
  uint64_t _1237 = (uint64_t)(_1236);
  uint64_t _1238 = _1237;
  uint64_t _1239 = (uint64_t)(2147483647ull);
  bool _1240 = _1238 <= _1239;
  if (!_1240)
  {
   int64_t _1241 = (int64_t)(_578);
   int64_t _1242 = (int64_t)(_579);
   int64_t _1243 = _1241 * _1242;
   int64_t _1244 = (int64_t)(0ll);
   int64_t _1245 = _1244 - _1243;
   bool _1246 = _1243 > _1244;
   int64_t _1247 = (int64_t)(_1246 ? _1243 : _1245);
   uint64_t _1248 = (uint64_t)(_1247);
   uint64_t _1249 = _1248;
   uint64_t _1250 = (uint64_t)(2147483647ull);
   int32_t _1251 = halide_error_buffer_allocation_too_large(_ucon, "P_out_faces", _1249, _1250);
   return _1251;
  }
  int64_t _1252 = (int64_t)(2147483647ll);
  bool _1253 = _1031 <= _1252;
  if (!_1253)
  {
   int64_t _1254 = (int64_t)(2147483647ll);
   int32_t _1255 = halide_error_buffer_extents_too_large(_ucon, "P_out_faces", _1031, _1254);
   return _1255;
  }
  bool _1256 = !(_512);
  if (!_1256)
  {
   int32_t _1257 = halide_error_device_dirty_with_no_device_support(_ucon, "Input buffer BI_fore_mask");
   return _1257;
  }
  bool _1258 = !(_522);
  if (!_1258)
  {
   int32_t _1259 = halide_error_device_dirty_with_no_device_support(_ucon, "Input buffer I_back_idx");
   return _1259;
  }
  bool _1260 = !(_532);
  if (!_1260)
  {
   int32_t _1261 = halide_error_device_dirty_with_no_device_support(_ucon, "Input buffer I_back_labels");
   return _1261;
  }
  bool _1262 = !(_542);
  if (!_1262)
  {
   int32_t _1263 = halide_error_device_dirty_with_no_device_support(_ucon, "Input buffer I_fore_idx");
   return _1263;
  }
  bool _1264 = !(_552);
  if (!_1264)
  {
   int32_t _1265 = halide_error_device_dirty_with_no_device_support(_ucon, "Output buffer I_out_vidx");
   return _1265;
  }
  bool _1266 = !(_562);
  if (!_1266)
  {
   int32_t _1267 = halide_error_device_dirty_with_no_device_support(_ucon, "Output buffer P_N_faces");
   return _1267;
  }
  bool _1268 = !(_569);
  if (!_1268)
  {
   int32_t _1269 = halide_error_device_dirty_with_no_device_support(_ucon, "Output buffer P_out_faces");
   return _1269;
  }
  auto *_1270 = (void *)(nullptr);
  bool _1271 = _BI_fore_mask != _1270;
  if (!_1271)
  {
   int32_t _1272 = halide_error_host_is_null(_ucon, "Input buffer BI_fore_mask");
   return _1272;
  }
  auto *_1273 = (void *)(nullptr);
  bool _1274 = _I_back_idx != _1273;
  if (!_1274)
  {
   int32_t _1275 = halide_error_host_is_null(_ucon, "Input buffer I_back_idx");
   return _1275;
  }
  auto *_1276 = (void *)(nullptr);
  bool _1277 = _I_back_labels != _1276;
  if (!_1277)
  {
   int32_t _1278 = halide_error_host_is_null(_ucon, "Input buffer I_back_labels");
   return _1278;
  }
  auto *_1279 = (void *)(nullptr);
  bool _1280 = _I_fore_idx != _1279;
  if (!_1280)
  {
   int32_t _1281 = halide_error_host_is_null(_ucon, "Input buffer I_fore_idx");
   return _1281;
  }
  auto *_1282 = (void *)(nullptr);
  bool _1283 = _I_out_vidx != _1282;
  if (!_1283)
  {
   int32_t _1284 = halide_error_host_is_null(_ucon, "Output buffer I_out_vidx");
   return _1284;
  }
  auto *_1285 = (void *)(nullptr);
  bool _1286 = _P_N_faces != _1285;
  if (!_1286)
  {
   int32_t _1287 = halide_error_host_is_null(_ucon, "Output buffer P_N_faces");
   return _1287;
  }
  auto *_1288 = (void *)(nullptr);
  bool _1289 = _P_out_faces != _1288;
  if (!_1289)
  {
   int32_t _1290 = halide_error_host_is_null(_ucon, "Output buffer P_out_faces");
   return _1290;
  }
  int32_t _1291 = _582 + -32;
  int32_t _1292 = ::halide_cpp_min(_1291, _583);
  int32_t _1293 = _582 - _583;
  int32_t _1294 = _1293 + -1;
  int32_t _1295 = _1294 >> 5;
  int32_t _1296 = _1295 * 32;
  int32_t _1297 = _1296 + _583;
  int32_t _1298 = ::halide_cpp_min(_1297, _1291);
  {
   int64_t _1299 = 17;
   int64_t _1300 = _1299 * 17;
   int32_t _1301 = _1298 - _1292;
   int32_t _1302 = _1301 + 32;
   int64_t _1303 = (_1300 > ((int64_t(1) << 31) - 1)) ? _1300 : (_1300 * _1302);
   if ((_1303 > ((int64_t(1) << 31) - 1)) || ((_1303 * sizeof(int32_t )) > ((int64_t(1) << 31) - 1)))
   {
    halide_error(_ucon, "32-bit signed overflow computing size of allocation patch_I_b_idx\n");
    return -1;
   } // overflow test patch_I_b_idx
   int64_t _1304 = _1303;
   int32_t *_patch_I_b_idx = (int32_t  *)halide_malloc(_ucon, sizeof(int32_t )*_1304);
   if (!((_patch_I_b_idx != nullptr) || (_1304 == 0)))
   {
    int32_t _1305 = halide_error_out_of_memory(_ucon);
    return _1305;
   }
   HalideFreeHelper<halide_free> _patch_I_b_idx_free(_ucon, _patch_I_b_idx);
   int32_t _1306 = _1298 - _1292;
   int32_t _1307 = _1306 + 32;
   struct halide_dimension_t s41[3] = {
    {0, 17, 1, 0},
    {0, 17, 17, 0},
    {_1292, _1307, 289, 0},
   };
   auto *_1308 = s41;
   auto _t251 = _1308;
   halide_maybe_unused(_t251);
   halide_buffer_t b14;
   auto *_1309 = &b14;
   uint64_t _1310 = (uint64_t)(0ull);
   auto *_1311 = (struct halide_device_interface_t *)(nullptr);
   auto *_1312 = _halide_buffer_init(_1309, _t251, _patch_I_b_idx, _1310, _1311, 0, 32, 3, _t251, _1310);
   auto _patch_I_b_idx_buffer = _1312;
   halide_maybe_unused(_patch_I_b_idx_buffer);
   // produce patch_I_b_idx
   int32_t _1313 = _582 - _583;
   int32_t _1314 = _1313 + 31;
   int32_t _1315 = _1314 >> 5;
   int32_t _1316 = _527 * _529;
   int32_t _1317 = _1316 + _524;
   int32_t _1318 = _515 + -1;
   float _1319 = (float)(_1318);
   struct {
    void * f_0;
    void * f_1;
    int32_t f_2;
    int32_t f_3;
    int32_t f_4;
    int32_t f_5;
    int32_t f_6;
    int32_t f_7;
    float f_8;
    int32_t f_9;
   } s42 = {
    _I_back_idx,
    _patch_I_b_idx,
    _529,
    _545,
    _548,
    _582,
    _583,
    _1292,
    _1319,
    _1317
   };
   auto *_1320 = (&s42);
   auto _parallel_closure = _1320;
   halide_maybe_unused(_parallel_closure);
   auto *_1321 = (uint8_t *)(_parallel_closure);
   int32_t _1322 = halide_do_par_for(_ucon, ::merge_mesh_verts_par_for_patch_I_b_idx_s0_p_v2, 0, _1315, _1321);
   bool _1323 = _1322 == 0;
   if (!_1323)
   {
    return _1322;
   }
   {
    int64_t _1324 = 17;
    int64_t _1325 = _1324 * 17;
    int32_t _1326 = _1298 - _1292;
    int32_t _1327 = _1326 + 32;
    int64_t _1328 = (_1325 > ((int64_t(1) << 31) - 1)) ? _1325 : (_1325 * _1327);
    if ((_1328 > ((int64_t(1) << 31) - 1)) || ((_1328 * sizeof(uint8_t )) > ((int64_t(1) << 31) - 1)))
    {
     halide_error(_ucon, "32-bit signed overflow computing size of allocation patch_I_b_l\n");
     return -1;
    } // overflow test patch_I_b_l
    int64_t _1329 = _1328;
    uint8_t *_patch_I_b_l = (uint8_t  *)halide_malloc(_ucon, sizeof(uint8_t )*_1329);
    if (!((_patch_I_b_l != nullptr) || (_1329 == 0)))
    {
     int32_t _1330 = halide_error_out_of_memory(_ucon);
     return _1330;
    }
    HalideFreeHelper<halide_free> _patch_I_b_l_free(_ucon, _patch_I_b_l);
    int32_t _1331 = _1298 - _1292;
    int32_t _1332 = _1331 + 32;
    struct halide_dimension_t s43[3] = {
     {0, 17, 1, 0},
     {0, 17, 17, 0},
     {_1292, _1332, 289, 0},
    };
    auto *_1333 = s43;
    auto _t252 = _1333;
    halide_maybe_unused(_t252);
    halide_buffer_t b15;
    auto *_1334 = &b15;
    uint64_t _1335 = (uint64_t)(0ull);
    auto *_1336 = (struct halide_device_interface_t *)(nullptr);
    auto *_1337 = _halide_buffer_init(_1334, _t252, _patch_I_b_l, _1335, _1336, 1, 8, 3, _t252, _1335);
    auto _patch_I_b_l_buffer = _1337;
    halide_maybe_unused(_patch_I_b_l_buffer);
    // produce patch_I_b_l
    int32_t _1338 = _582 - _583;
    int32_t _1339 = _1338 + 31;
    int32_t _1340 = _1339 >> 5;
    int32_t _1341 = _537 * _539;
    int32_t _1342 = _1341 + _534;
    int32_t _1343 = _515 + -1;
    float _1344 = (float)(_1343);
    struct {
     void * f_0;
     void * f_1;
     int32_t f_2;
     int32_t f_3;
     int32_t f_4;
     int32_t f_5;
     int32_t f_6;
     int32_t f_7;
     float f_8;
     int32_t f_9;
    } s44 = {
     _I_back_labels,
     _patch_I_b_l,
     _539,
     _545,
     _548,
     _582,
     _583,
     _1292,
     _1344,
     _1342
    };
    auto *_1345 = (&s44);
    auto _parallel_closure__1 = _1345;
    halide_maybe_unused(_parallel_closure__1);
    auto *_1346 = (uint8_t *)(_parallel_closure__1);
    int32_t _1347 = halide_do_par_for(_ucon, ::merge_mesh_verts_par_for_patch_I_b_l_s0_p_v2, 0, _1340, _1346);
    bool _1348 = _1347 == 0;
    if (!_1348)
    {
     return _1347;
    }
    {
     int64_t _1349 = 17;
     int64_t _1350 = _1349 * 17;
     int32_t _1351 = _1298 - _1292;
     int32_t _1352 = _1351 + 32;
     int64_t _1353 = (_1350 > ((int64_t(1) << 31) - 1)) ? _1350 : (_1350 * _1352);
     if ((_1353 > ((int64_t(1) << 31) - 1)) || ((_1353 * sizeof(int32_t )) > ((int64_t(1) << 31) - 1)))
     {
      halide_error(_ucon, "32-bit signed overflow computing size of allocation patch_I_f_idx\n");
      return -1;
     } // overflow test patch_I_f_idx
     int64_t _1354 = _1353;
     int32_t *_patch_I_f_idx = (int32_t  *)halide_malloc(_ucon, sizeof(int32_t )*_1354);
     if (!((_patch_I_f_idx != nullptr) || (_1354 == 0)))
     {
      int32_t _1355 = halide_error_out_of_memory(_ucon);
      return _1355;
     }
     HalideFreeHelper<halide_free> _patch_I_f_idx_free(_ucon, _patch_I_f_idx);
     int32_t _1356 = _1298 - _1292;
     int32_t _1357 = _1356 + 32;
     struct halide_dimension_t s45[3] = {
      {0, 17, 1, 0},
      {0, 17, 17, 0},
      {_1292, _1357, 289, 0},
     };
     auto *_1358 = s45;
     auto _t253 = _1358;
     halide_maybe_unused(_t253);
     halide_buffer_t b16;
     auto *_1359 = &b16;
     uint64_t _1360 = (uint64_t)(0ull);
     auto *_1361 = (struct halide_device_interface_t *)(nullptr);
     auto *_1362 = _halide_buffer_init(_1359, _t253, _patch_I_f_idx, _1360, _1361, 0, 32, 3, _t253, _1360);
     auto _patch_I_f_idx_buffer = _1362;
     halide_maybe_unused(_patch_I_f_idx_buffer);
     // produce patch_I_f_idx
     int32_t _1363 = _582 - _583;
     int32_t _1364 = _1363 + 31;
     int32_t _1365 = _1364 >> 5;
     int32_t _1366 = _547 * _549;
     int32_t _1367 = _1366 + _544;
     int32_t _1368 = _515 + -1;
     float _1369 = (float)(_1368);
     struct {
      void * f_0;
      void * f_1;
      int32_t f_2;
      int32_t f_3;
      int32_t f_4;
      int32_t f_5;
      int32_t f_6;
      int32_t f_7;
      float f_8;
      int32_t f_9;
     } s46 = {
      _I_fore_idx,
      _patch_I_f_idx,
      _545,
      _548,
      _549,
      _582,
      _583,
      _1292,
      _1369,
      _1367
     };
     auto *_1370 = (&s46);
     auto _parallel_closure__2 = _1370;
     halide_maybe_unused(_parallel_closure__2);
     auto *_1371 = (uint8_t *)(_parallel_closure__2);
     int32_t _1372 = halide_do_par_for(_ucon, ::merge_mesh_verts_par_for_patch_I_f_idx_s0_p_v2, 0, _1365, _1371);
     bool _1373 = _1372 == 0;
     if (!_1373)
     {
      return _1372;
     }
     int32_t _1374 = ::halide_cpp_max(_618, 1);
     int32_t _1375 = _1374 + -32;
     int32_t _1376 = ::halide_cpp_min(_1375, _621);
     {
      int32_t _1377 = ::halide_cpp_max(_618, 1);
      int32_t _1378 = _1377 - _621;
      int32_t _1379 = ::halide_cpp_max(_1378, 32);
      int64_t _1380 = _1379;
      if ((_1380 > ((int64_t(1) << 31) - 1)) || ((_1380 * sizeof(uint8_t )) > ((int64_t(1) << 31) - 1)))
      {
       halide_error(_ucon, "32-bit signed overflow computing size of allocation patch_f_mask\n");
       return -1;
      } // overflow test patch_f_mask
      int64_t _1381 = _1380;
      uint8_t *_patch_f_mask = (uint8_t  *)halide_malloc(_ucon, sizeof(uint8_t )*_1381);
      if (!((_patch_f_mask != nullptr) || (_1381 == 0)))
      {
       int32_t _1382 = halide_error_out_of_memory(_ucon);
       return _1382;
      }
      HalideFreeHelper<halide_free> _patch_f_mask_free(_ucon, _patch_f_mask);
      int32_t _1383 = ::halide_cpp_max(_618, 1);
      int32_t _1384 = _1383 - _621;
      int32_t _1385 = ::halide_cpp_max(_1384, 32);
      struct halide_dimension_t s47[1] = {
       {_1376, _1385, 1, 0},
      };
      auto *_1386 = s47;
      auto _t254 = _1386;
      halide_maybe_unused(_t254);
      halide_buffer_t b17;
      auto *_1387 = &b17;
      uint64_t _1388 = (uint64_t)(0ull);
      auto *_1389 = (struct halide_device_interface_t *)(nullptr);
      auto *_1390 = _halide_buffer_init(_1387, _t254, _patch_f_mask, _1388, _1389, 1, 8, 1, _t254, _1388);
      auto _patch_f_mask_buffer = _1390;
      halide_maybe_unused(_patch_f_mask_buffer);
      // produce patch_f_mask
      int32_t _1391 = _1384 + 31;
      int32_t _1392 = _1391 >> 5;
      int32_t _1393 = _517 * _519;
      int32_t _1394 = _1393 + _514;
      struct {
       void * f_0;
       void * f_1;
       int32_t f_2;
       int32_t f_3;
       int32_t f_4;
       int32_t f_5;
       int32_t f_6;
       int32_t f_7;
      } s48 = {
       _BI_fore_mask,
       _patch_f_mask,
       _515,
       _519,
       _1376,
       _621,
       _1394,
       _1383
      };
      auto *_1395 = (&s48);
      auto _parallel_closure__3 = _1395;
      halide_maybe_unused(_parallel_closure__3);
      auto *_1396 = (uint8_t *)(_parallel_closure__3);
      int32_t _1397 = halide_do_par_for(_ucon, ::merge_mesh_verts_par_for_patch_f_mask_s0_p_v2, 0, _1392, _1396);
      bool _1398 = _1397 == 0;
      if (!_1398)
      {
       return _1397;
      }
      int32_t _1399 = _558 + _557;
      int32_t _1400 = _1399 + -1;
      float _1401 = (float)(_1400);
      float _1402 = float_from_bits(1031798784 /* 0.0625 */);
      float _1403 = _1401 * _1402;
      float _1404 = floor_f32(_1403);
      int32_t _1405 = (int32_t)(_1404);
      float _1406 = (float)(_557);
      float _1407 = _1406 * _1402;
      float _1408 = floor_f32(_1407);
      int32_t _1409 = (int32_t)(_1408);
      bool _1410 = _515 < 1;
      int32_t _1411 = (int32_t)(_1410 ? _1405 : _1409);
      int32_t _1412 = _515 + -1;
      int32_t _1413 = _1411 * _1412;
      int32_t _1414 = _1413 + _613;
      int32_t _1415 = ::halide_cpp_min(_1414, _615);
      int32_t _1416 = (int32_t)(_1410 ? _1409 : _1405);
      int32_t _1417 = _1416 * _1412;
      int32_t _1418 = _555 + _554;
      int32_t _1419 = _1418 + -1;
      float _1420 = (float)(_1419);
      float _1421 = _1420 * _1402;
      float _1422 = floor_f32(_1421);
      int32_t _1423 = (int32_t)(_1422);
      int32_t _1424 = _1417 + _1423;
      int32_t _1425 = ::halide_cpp_max(_1424, _607);
      int32_t _1426 = _1425 - _1415;
      int32_t _1427 = _1426 + 1;
      {
       int64_t _1428 = _1427;
       if ((_1428 > ((int64_t(1) << 31) - 1)) || ((_1428 * sizeof(int32_t )) > ((int64_t(1) << 31) - 1)))
       {
        halide_error(_ucon, "32-bit signed overflow computing size of allocation patch_vidx\n");
        return -1;
       } // overflow test patch_vidx
       int64_t _1429 = _1428;
       int32_t *_patch_vidx = (int32_t  *)halide_malloc(_ucon, sizeof(int32_t )*_1429);
       if (!((_patch_vidx != nullptr) || (_1429 == 0)))
       {
        int32_t _1430 = halide_error_out_of_memory(_ucon);
        return _1430;
       }
       HalideFreeHelper<halide_free> _patch_vidx_free(_ucon, _patch_vidx);
       struct halide_dimension_t s49[1] = {
        {_1415, _1427, 1, 0},
       };
       auto *_1431 = s49;
       auto _t258 = _1431;
       halide_maybe_unused(_t258);
       halide_buffer_t b18;
       auto *_1432 = &b18;
       uint64_t _1433 = (uint64_t)(0ull);
       auto *_1434 = (struct halide_device_interface_t *)(nullptr);
       auto *_1435 = _halide_buffer_init(_1432, _t258, _patch_vidx, _1433, _1434, 0, 32, 1, _t258, _1433);
       auto _patch_vidx_buffer = _1435;
       halide_maybe_unused(_patch_vidx_buffer);
       // produce patch_vidx
       // consume patch_f_mask
       int32_t _1436 = load_vert_idx(_patch_f_mask_buffer, _N0_verts, _patch_vidx_buffer);
       bool _1437 = _1436 == 0;
       if (!_1437)
       {
        int32_t _1438 = halide_error_extern_stage_failed(_ucon, "load_vert_idx", _1436);
        return _1438;
       }
       int32_t _1439 = 289 - _574;
       int32_t _1440 = ::halide_cpp_max(_1439, _575);
       int32_t _1441 = 3 - _571;
       int32_t _1442 = ::halide_cpp_max(_1441, _572);
       {
        int64_t _1443 = _1442;
        int64_t _1444 = _1443 * _1440;
        int32_t _1445 = _582 - _583;
        int32_t _1446 = ::halide_cpp_max(_1445, 32);
        int64_t _1447 = (_1444 > ((int64_t(1) << 31) - 1)) ? _1444 : (_1444 * _1446);
        if ((_1447 > ((int64_t(1) << 31) - 1)) || ((_1447 * sizeof(int32_t )) > ((int64_t(1) << 31) - 1)))
        {
         halide_error(_ucon, "32-bit signed overflow computing size of allocation get_faces\n");
         return -1;
        } // overflow test get_faces
        int64_t _1448 = _1447;
        int32_t *_get_faces = (int32_t  *)halide_malloc(_ucon, sizeof(int32_t )*_1448);
        if (!((_get_faces != nullptr) || (_1448 == 0)))
        {
         int32_t _1449 = halide_error_out_of_memory(_ucon);
         return _1449;
        }
        HalideFreeHelper<halide_free> _get_faces_free(_ucon, _get_faces);
        int32_t _1450 = _582 - _583;
        int32_t _1451 = ::halide_cpp_max(_1450, 32);
        int32_t _1452 = _1442 * _1440;
        struct halide_dimension_t s50[3] = {
         {_571, _1442, 1, 0},
         {_574, _1440, _1442, 0},
         {_1292, _1451, _1452, 0},
        };
        auto *_1453 = s50;
        auto _t259 = _1453;
        halide_maybe_unused(_t259);
        halide_buffer_t b19;
        auto *_1454 = &b19;
        uint64_t _1455 = (uint64_t)(0ull);
        auto *_1456 = (struct halide_device_interface_t *)(nullptr);
        auto *_1457 = _halide_buffer_init(_1454, _t259, _get_faces, _1455, _1456, 0, 32, 3, _t259, _1455);
        auto _get_faces_buffer = _1457;
        halide_maybe_unused(_get_faces_buffer);
        // produce get_faces
        // consume patch_vidx
        // consume patch_f_mask
        // consume patch_I_f_idx
        // consume patch_I_b_l
        // consume patch_I_b_idx
        int32_t _1458 = _1450 >> 5;
        int32_t _1459 = ::halide_cpp_max(_1458, 0);
        int32_t _1460 = _1450 + 31;
        int32_t _1461 = _1460 >> 5;
        int32_t _1462 = ::halide_cpp_max(_618, 1);
        int32_t _1463 = _1462 - _621;
        int32_t _1464 = _607 - _615;
        struct {
         struct halide_buffer_t * f_0;
         struct halide_buffer_t * f_1;
         struct halide_buffer_t * f_2;
         struct halide_buffer_t * f_3;
         struct halide_buffer_t * f_4;
         struct halide_buffer_t * f_5;
         int32_t f_6;
         int32_t f_7;
         int32_t f_8;
         int32_t f_9;
         int32_t f_10;
         int32_t f_11;
         int32_t f_12;
         int32_t f_13;
         int32_t f_14;
         int32_t f_15;
         int32_t f_16;
         int32_t f_17;
        } s51 = {
         _get_faces_buffer,
         _patch_I_b_idx_buffer,
         _patch_I_b_l_buffer,
         _patch_I_f_idx_buffer,
         _patch_f_mask_buffer,
         _patch_vidx_buffer,
         _571,
         _574,
         _582,
         _583,
         _1442,
         _1440,
         _621,
         _615,
         _1459,
         _1464,
         _1463,
         _1450
        };
        auto *_1465 = (&s51);
        auto _parallel_closure__4 = _1465;
        halide_maybe_unused(_parallel_closure__4);
        auto *_1466 = (uint8_t *)(_parallel_closure__4);
        int32_t _1467 = halide_do_par_for(_ucon, ::merge_mesh_verts_par_for_get_faces_s0_p_v2, 0, _1461, _1466);
        bool _1468 = _1467 == 0;
        if (!_1468)
        {
         return _1467;
        }
        _patch_I_b_idx_free.free();
        _patch_I_b_l_free.free();
        _patch_I_f_idx_free.free();
        _patch_f_mask_free.free();
        // produce P_out_faces
        // consume get_faces
        int32_t _1469 = _582 - _583;
        int32_t _1470 = _1469 + 31;
        int32_t _1471 = _1470 >> 5;
        int32_t _1472 = _577 * _579;
        int32_t _1473 = _574 * _576;
        int32_t _1474 = _1472 + _1473;
        int32_t _1475 = 0 - _1474;
        struct {
         void * f_0;
         void * f_1;
         int32_t f_2;
         int32_t f_3;
         int32_t f_4;
         int32_t f_5;
         int32_t f_6;
         int32_t f_7;
         int32_t f_8;
         int32_t f_9;
         int32_t f_10;
        } s52 = {
         _P_out_faces,
         _get_faces,
         _574,
         _582,
         _583,
         _576,
         _579,
         _1442,
         _1440,
         _1292,
         _1475
        };
        auto *_1476 = (&s52);
        auto _parallel_closure__5 = _1476;
        halide_maybe_unused(_parallel_closure__5);
        auto *_1477 = (uint8_t *)(_parallel_closure__5);
        int32_t _1478 = halide_do_par_for(_ucon, ::merge_mesh_verts_par_for_P_out_faces_s0_p_v2, 0, _1471, _1477);
        bool _1479 = _1478 == 0;
        if (!_1479)
        {
         return _1478;
        }
        _get_faces_free.free();
        // produce P_N_faces
        int32_t _1480 = _565 + 31;
        int32_t _1481 = _1480 >> 5;
        int32_t _1482 = _577 * _579;
        int32_t _1483 = _574 * _576;
        int32_t _1484 = _1482 + _1483;
        int32_t _1485 = _1484 + _571;
        struct {
         void * f_0;
         void * f_1;
         int32_t f_2;
         int32_t f_3;
         int32_t f_4;
         int32_t f_5;
         int32_t f_6;
        } s53 = {
         _P_N_faces,
         _P_out_faces,
         _565,
         _564,
         _576,
         _579,
         _1485
        };
        auto *_1486 = (&s53);
        auto _parallel_closure__6 = _1486;
        halide_maybe_unused(_parallel_closure__6);
        auto *_1487 = (uint8_t *)(_parallel_closure__6);
        int32_t _1488 = halide_do_par_for(_ucon, ::merge_mesh_verts_par_for_P_N_faces_s0_p_v2, 0, _1481, _1487);
        bool _1489 = _1488 == 0;
        if (!_1489)
        {
         return _1488;
        }
        // produce I_out_vidx
        // consume patch_vidx
        int32_t _1490 = _557 * _559;
        int32_t _1491 = 0 - _1490;
        int32_t _1492 = _517 * _519;
        int32_t _1493 = _1492 + _514;
        struct {
         void * f_0;
         void * f_1;
         void * f_2;
         int32_t f_3;
         int32_t f_4;
         int32_t f_5;
         int32_t f_6;
         int32_t f_7;
         int32_t f_8;
         int32_t f_9;
         int32_t f_10;
         int32_t f_11;
        } s54 = {
         _BI_fore_mask,
         _I_out_vidx,
         _patch_vidx,
         _515,
         _519,
         _555,
         _554,
         _557,
         _559,
         _1415,
         _1493,
         _1491
        };
        auto *_1494 = (&s54);
        auto _parallel_closure__7 = _1494;
        halide_maybe_unused(_parallel_closure__7);
        auto *_1495 = (uint8_t *)(_parallel_closure__7);
        int32_t _1496 = halide_do_par_for(_ucon, ::merge_mesh_verts_par_for_I_out_vidx_s0_y_rebased, 0, _558, _1495);
        bool _1497 = _1496 == 0;
        if (!_1497)
        {
         return _1496;
        }
        _patch_vidx_free.free();
       } // alloc _get_faces
      } // alloc _patch_vidx
     } // alloc _patch_f_mask
    } // alloc _patch_I_f_idx
   } // alloc _patch_I_b_l
  } // alloc _patch_I_b_idx
 } // if _800
 return 0;
}

HALIDE_FUNCTION_ATTRS
int merge_mesh_verts_argv(void **args) {
 return merge_mesh_verts(
  (halide_buffer_t *)args[0],
  (halide_buffer_t *)args[1],
  (halide_buffer_t *)args[2],
  (halide_buffer_t *)args[3],
  *(int32_t const *)args[4],
  (halide_buffer_t *)args[5],
  (halide_buffer_t *)args[6],
  (halide_buffer_t *)args[7]
);
}
HALIDE_FUNCTION_ATTRS
const struct halide_filter_metadata_t *merge_mesh_verts_metadata() {
 int64_t const *const *buffer_estimates__I_fore_idx = nullptr;
 const halide_scalar_value_t *scalar_def__I_fore_idx = nullptr;
 const halide_scalar_value_t *scalar_min__I_fore_idx = nullptr;
 const halide_scalar_value_t *scalar_max__I_fore_idx = nullptr;
 const halide_scalar_value_t *scalar_estimate__I_fore_idx = nullptr;
 int64_t const *const *buffer_estimates__I_back_idx = nullptr;
 const halide_scalar_value_t *scalar_def__I_back_idx = nullptr;
 const halide_scalar_value_t *scalar_min__I_back_idx = nullptr;
 const halide_scalar_value_t *scalar_max__I_back_idx = nullptr;
 const halide_scalar_value_t *scalar_estimate__I_back_idx = nullptr;
 int64_t const *const *buffer_estimates__I_back_labels = nullptr;
 const halide_scalar_value_t *scalar_def__I_back_labels = nullptr;
 const halide_scalar_value_t *scalar_min__I_back_labels = nullptr;
 const halide_scalar_value_t *scalar_max__I_back_labels = nullptr;
 const halide_scalar_value_t *scalar_estimate__I_back_labels = nullptr;
 int64_t const *const *buffer_estimates__BI_fore_mask = nullptr;
 const halide_scalar_value_t *scalar_def__BI_fore_mask = nullptr;
 const halide_scalar_value_t *scalar_min__BI_fore_mask = nullptr;
 const halide_scalar_value_t *scalar_max__BI_fore_mask = nullptr;
 const halide_scalar_value_t *scalar_estimate__BI_fore_mask = nullptr;
 int64_t const *const *buffer_estimates__N0_verts = nullptr;
 const halide_scalar_value_t *scalar_def__N0_verts = nullptr;
 const halide_scalar_value_t *scalar_min__N0_verts = nullptr;
 const halide_scalar_value_t *scalar_max__N0_verts = nullptr;
 const halide_scalar_value_t *scalar_estimate__N0_verts = nullptr;
 int64_t const *const *buffer_estimates__P_out_faces = nullptr;
 const halide_scalar_value_t *scalar_def__P_out_faces = nullptr;
 const halide_scalar_value_t *scalar_min__P_out_faces = nullptr;
 const halide_scalar_value_t *scalar_max__P_out_faces = nullptr;
 const halide_scalar_value_t *scalar_estimate__P_out_faces = nullptr;
 int64_t const *const *buffer_estimates__P_N_faces = nullptr;
 const halide_scalar_value_t *scalar_def__P_N_faces = nullptr;
 const halide_scalar_value_t *scalar_min__P_N_faces = nullptr;
 const halide_scalar_value_t *scalar_max__P_N_faces = nullptr;
 const halide_scalar_value_t *scalar_estimate__P_N_faces = nullptr;
 int64_t const *const *buffer_estimates__I_out_vidx = nullptr;
 const halide_scalar_value_t *scalar_def__I_out_vidx = nullptr;
 const halide_scalar_value_t *scalar_min__I_out_vidx = nullptr;
 const halide_scalar_value_t *scalar_max__I_out_vidx = nullptr;
 const halide_scalar_value_t *scalar_estimate__I_out_vidx = nullptr;
 static const halide_filter_argument_t args[8] = {
  {
   "I_fore_idx",
   halide_argument_kind_input_buffer,
   2,
   {halide_type_int, 32, 1},
   scalar_def__I_fore_idx,
   scalar_min__I_fore_idx,
   scalar_max__I_fore_idx,
   scalar_estimate__I_fore_idx,
   buffer_estimates__I_fore_idx,
   },
  {
   "I_back_idx",
   halide_argument_kind_input_buffer,
   2,
   {halide_type_int, 32, 1},
   scalar_def__I_back_idx,
   scalar_min__I_back_idx,
   scalar_max__I_back_idx,
   scalar_estimate__I_back_idx,
   buffer_estimates__I_back_idx,
   },
  {
   "I_back_labels",
   halide_argument_kind_input_buffer,
   2,
   {halide_type_uint, 8, 1},
   scalar_def__I_back_labels,
   scalar_min__I_back_labels,
   scalar_max__I_back_labels,
   scalar_estimate__I_back_labels,
   buffer_estimates__I_back_labels,
   },
  {
   "BI_fore_mask",
   halide_argument_kind_input_buffer,
   2,
   {halide_type_uint, 8, 1},
   scalar_def__BI_fore_mask,
   scalar_min__BI_fore_mask,
   scalar_max__BI_fore_mask,
   scalar_estimate__BI_fore_mask,
   buffer_estimates__BI_fore_mask,
   },
  {
   "N0_verts",
   halide_argument_kind_input_scalar,
   0,
   {halide_type_int, 32, 1},
   scalar_def__N0_verts,
   scalar_min__N0_verts,
   scalar_max__N0_verts,
   scalar_estimate__N0_verts,
   buffer_estimates__N0_verts,
   },
  {
   "P_out_faces",
   halide_argument_kind_output_buffer,
   3,
   {halide_type_int, 32, 1},
   scalar_def__P_out_faces,
   scalar_min__P_out_faces,
   scalar_max__P_out_faces,
   scalar_estimate__P_out_faces,
   buffer_estimates__P_out_faces,
   },
  {
   "P_N_faces",
   halide_argument_kind_output_buffer,
   1,
   {halide_type_int, 32, 1},
   scalar_def__P_N_faces,
   scalar_min__P_N_faces,
   scalar_max__P_N_faces,
   scalar_estimate__P_N_faces,
   buffer_estimates__P_N_faces,
   },
  {
   "I_out_vidx",
   halide_argument_kind_output_buffer,
   2,
   {halide_type_int, 32, 1},
   scalar_def__I_out_vidx,
   scalar_min__I_out_vidx,
   scalar_max__I_out_vidx,
   scalar_estimate__I_out_vidx,
   buffer_estimates__I_out_vidx,
   },
  };
 static const halide_filter_metadata_t md = {
  halide_filter_metadata_t::VERSION,
  8,
  args,
  "x86-64-linux-avx-avx2-f16c-fma-no_runtime-sse41",
  "merge_mesh_verts",
  };
 return &md;
}

#ifdef __cplusplus
}  // extern "C"
#endif

